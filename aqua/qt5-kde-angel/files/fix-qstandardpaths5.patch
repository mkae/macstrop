diff --git a/qtbase/include/QtCore/QExtStandardPaths b/qtbase/include/QtCore/QExtStandardPaths
new file mode 100644
index 0000000..21a9879
--- /dev/null
+++ b/qtbase/include/QtCore/QExtStandardPaths
@@ -0,0 +1 @@
+#include "qextstandardpaths.h"
diff --git a/qtbase/src/corelib/io/io.pri b/qtbase/src/corelib/io/io.pri
index 8d9908c..906826e 100644
--- a/qtbase/src/corelib/io/io.pri
+++ b/qtbase/src/corelib/io/io.pri
@@ -32,6 +32,7 @@ HEADERS +=  \
         io/qresource_p.h \
         io/qresource_iterator_p.h \
         io/qsavefile.h \
+        io/qextstandardpaths.h \
         io/qstandardpaths.h \
         io/qstorageinfo.h \
         io/qstorageinfo_p.h \
diff --git a/qtbase/src/corelib/io/qextstandardpaths.h b/qtbase/src/corelib/io/qextstandardpaths.h
new file mode 100644
index 0000000..368d8c8
--- /dev/null
+++ b/qtbase/src/corelib/io/qextstandardpaths.h
@@ -0,0 +1,40 @@
+/****************************************************************************
+**
+** Copyright (C) 2016 Ren√© J.V. Bertin
+** Contact: http://www.qt.io/licensing/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL21$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see http://www.qt.io/terms-conditions. For further
+** information use the contact form at http://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 or version 3 as published by the Free
+** Software Foundation and appearing in the file LICENSE.LGPLv21 and
+** LICENSE.LGPLv3 included in the packaging of this file. Please review the
+** following information to ensure the GNU Lesser General Public License
+** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** As a special exception, The Qt Company gives you certain additional
+** rights. These rights are described in The Qt Company LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QEXTSTANDARDPATHS_H
+#define QEXTSTANDARDPATHS_H
+
+#define QT_USE_EXTSTANDARDPATHS
+#include <QtCore/qstandardpaths.h>
+
+#endif // QEXTSTANDARDPATHS_H
diff --git a/qtbase/src/corelib/io/qstandardpaths.cpp b/qtbase/src/corelib/io/qstandardpaths.cpp
index 8828e09..79ef255 100644
--- a/qtbase/src/corelib/io/qstandardpaths.cpp
+++ b/qtbase/src/corelib/io/qstandardpaths.cpp
@@ -31,8 +31,10 @@
 **
 ****************************************************************************/
 
+#undef QT_USE_EXTSTANDARDPATHS
 #include "qstandardpaths.h"
 
+#include <qglobal.h>
 #include <qdir.h>
 #include <qfileinfo.h>
 
@@ -399,16 +401,67 @@ static bool existsAsSpecified(const QString &path, QStandardPaths::LocateOptions
     return QFileInfo(path).isFile();
 }
 
+bool QStandardPaths::usingALTLocations = false;
+bool QStandardPaths::isSetALTLocations = false;
+
+/*!
+    This function enables or disables alternative locations on platforms where Qt can be configured
+    to use this kind of locations instead of locations following OS guidelines.
+    Currently this concerns Mac OS X, Cygwin and MSYS2; on other platforms this function does nothing.
+ */
+void QStandardPaths::setALTLocationsEnabled(bool altMode)
+{
+#if defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+    usingALTLocations = altMode;
+    isSetALTLocations = true;
+#endif
+}
+
+/*!
+    This function returns true when alternative locations are used, unless QT_STANDARDPATHS_CANNOT_SWITCH
+    is set, in which case switching is disabled and the function always returns false.
+ */
+bool QStandardPaths::isALTLocationsEnabled()
+{
+#if defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+    if (qEnvironmentVariableIsSet("QT_STANDARDPATHS_CANNOT_SWITCH"))
+        return false;
+    else
+        return usingALTLocations;
+#else
+    return false;
+#endif // QSTANDARDPATHS_HAS_ALTERNATIVE_MODE
+}
+
+#if !defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+// wrappers for the actual implementation in a platform-specific file.
+
+QString QStandardPaths::writableLocation(StandardLocation type, bool altMode)
+{
+    return writableLocation(type);
+}
+
+QStringList QStandardPaths::standardLocations(StandardLocation type, bool altMode)
+{
+    return standardLocations(type);
+}
+#endif
+
 /*!
    Tries to find a file or directory called \a fileName in the standard locations
-   for \a type.
+   for \a type. If an alternative location mode is supported, \a altMode determines
+   the mode to be used.
 
    The full path to the first file or directory (depending on \a options) found is returned.
    If no such file or directory can be found, an empty string is returned.
  */
-QString QStandardPaths::locate(StandardLocation type, const QString &fileName, LocateOptions options)
+QString QStandardPaths::locate(StandardLocation type, bool altMode, const QString &fileName, LocateOptions options)
 {
+#if defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+    const QStringList &dirs = standardLocations(type, altMode);
+#else
     const QStringList &dirs = standardLocations(type);
+#endif
     for (QStringList::const_iterator dir = dirs.constBegin(); dir != dirs.constEnd(); ++dir) {
         const QString path = *dir + QLatin1Char('/') + fileName;
         if (existsAsSpecified(path, options))
@@ -419,24 +472,81 @@ QString QStandardPaths::locate(StandardLocation type, const QString &fileName, L
 
 /*!
    Tries to find all files or directories called \a fileName in the standard locations
-   for \a type.
+   for \a type. If an alternative location mode is supported, \a altMode determines
+   the mode to be used.
 
    The \a options flag allows to specify whether to look for files or directories.
 
    Returns the list of all the files that were found.
  */
-QStringList QStandardPaths::locateAll(StandardLocation type, const QString &fileName, LocateOptions options)
+QStringList QStandardPaths::locateAll(StandardLocation type, bool altMode, const QString &fileName, LocateOptions options)
 {
+#if defined(QSTANDARDPATHS_HAS_ALTERNATIVE_MODE)
+    const QStringList &dirs = standardLocations(type, altMode);
+#else
     const QStringList &dirs = standardLocations(type);
+#endif
     QStringList result;
     for (QStringList::const_iterator dir = dirs.constBegin(); dir != dirs.constEnd(); ++dir) {
         const QString path = *dir + QLatin1Char('/') + fileName;
         if (existsAsSpecified(path, options))
             result.append(path);
     }
+    //qDebug() << Q_FUNC_INFO << "search list=" << dirs;
     return result;
 }
 
+/*!
+   Tries to find a file or directory called \a fileName in the standard locations
+   for \a type.
+
+   The full path to the first file or directory (depending on \a options) found is returned.
+   If no such file or directory can be found, an empty string is returned.
+ */
+QString QStandardPaths::locate(StandardLocation type, const QString &fileName, LocateOptions options)
+{
+    return QStandardPaths::locate(type, isALTLocationsEnabled(), fileName, options);
+}
+
+/*!
+   Tries to find all files or directories called \a fileName in the standard locations
+   for \a type.
+
+   The \a options flag allows to specify whether to look for files or directories.
+
+   Returns the list of all the files that were found.
+ */
+QStringList QStandardPaths::locateAll(StandardLocation type, const QString &fileName, LocateOptions options)
+{
+    QStringList ret = QStandardPaths::locateAll(type, isALTLocationsEnabled(), fileName, options);
+    //qDebug() << Q_FUNC_INFO << "type=" << type << "name=" << fileName << "found" << ret;
+    return ret;
+}
+
+#if defined(Q_OS_OSX)
+// deprecated versions using the XDG instead of ALT term
+//#include <QDebug>
+/*!
+    Obsolete: This function enables or disables XDG locations on OS X where Qt can be configured
+    to use this kind of locations instead of locations following OS guidelines.
+    Currently this concerns only Mac OS X
+ */
+void QStandardPaths::setXDGLocationsEnabled(bool altMode)
+{
+    setALTLocationsEnabled(altMode);
+    //qDebug() << Q_FUNC_INFO << "Setting usingALTLocations=" << altMode;
+}
+
+/*!
+    This function returns true when XDG locations are used, unless QT_STANDARDPATHS_CANNOT_SWITCH
+    is set, in which case switching is disabled and the function always returns false.
+ */
+bool QStandardPaths::isXDGLocationsEnabled()
+{
+    return isALTLocationsEnabled();
+}
+#endif // Q_OS_OSX
+
 #ifdef Q_OS_WIN
 static QStringList executableExtensions()
 {
diff --git a/qtbase/src/corelib/io/qstandardpaths.h b/qtbase/src/corelib/io/qstandardpaths.h
index 5c0e08b..d67c5ec 100644
--- a/qtbase/src/corelib/io/qstandardpaths.h
+++ b/qtbase/src/corelib/io/qstandardpaths.h
@@ -41,6 +41,11 @@ QT_BEGIN_NAMESPACE
 
 #ifndef QT_NO_STANDARDPATHS
 
+#if defined(Q_OS_OSX) /* || defined(???) */
+// QStandardPaths provides an alternative mode on these platforms
+#define QSTANDARDPATHS_HAS_ALTERNATIVE_MODE
+#endif
+
 class Q_CORE_EXPORT QStandardPaths
 {
 public:
@@ -68,6 +73,14 @@ public:
         AppLocalDataLocation = DataLocation
     };
 
+    static void setALTLocationsEnabled(bool altMode);
+    static bool isALTLocationsEnabled();
+#if defined(Q_OS_OSX)
+    // obsolete versions:
+    static void setXDGLocationsEnabled(bool altMode);
+    static bool isXDGLocationsEnabled();
+#endif // Q_OS_OSX
+
     static QString writableLocation(StandardLocation type);
     static QStringList standardLocations(StandardLocation type);
 
@@ -91,14 +104,102 @@ public:
     static void setTestModeEnabled(bool testMode);
     static bool isTestModeEnabled();
 
+protected:
+    static QString writableLocation(StandardLocation type, bool altMode);
+    static QStringList standardLocations(StandardLocation type, bool altMode);
+
+    static QString locate(StandardLocation type, bool altMode, const QString &fileName, LocateOptions options = LocateFile);
+    static QStringList locateAll(StandardLocation type, bool altMode, const QString &fileName, LocateOptions options = LocateFile);
+
 private:
     // prevent construction
     QStandardPaths();
     ~QStandardPaths();
+    static bool usingALTLocations, isSetALTLocations;
+
+    friend class QExtStandardPaths;
+};
+
+/* **** Extended QStandardPaths **** */
+
+#ifdef QT_EXTSTANDARDPATHS_ALT_DEFAULT
+#if QT_EXTSTANDARDPATHS_ALT_DEFAULT == runtime
+#define QSPDEFAULTALTMODE  QStandardPaths::isALTLocationsEnabled()
+#else
+#define QSPDEFAULTALTMODE  QT_EXTSTANDARDPATHS_ALT_DEFAULT
+#endif // "runtime"
+#else
+#define QSPDEFAULTALTMODE  false
+#endif
+
+// obsolete version:
+#ifdef QT_EXTSTANDARDPATHS_XDG_DEFAULT
+#if QT_EXTSTANDARDPATHS_XDG_DEFAULT == runtime
+#undef QSPDEFAULTALTMODE
+#define QSPDEFAULTALTMODE  QStandardPaths::isALTLocationsEnabled()
+#else
+#undef QSPDEFAULTALTMODE
+#define QSPDEFAULTALTMODE  QT_EXTSTANDARDPATHS_XDG_DEFAULT
+#endif // "runtime"
+#endif
+
+/*!
+    \class QExtStandardPaths
+    \inmodule QtCore
+    \brief The QExtStandardPaths class provides configurable methods for accessing standard paths.
+
+    This class inherits and elaborates on \class QStandardPaths, providing access to the support for
+    native vs. alternative (e.g. XDG-compliant) standard locations that QStandardPaths has on certain
+    platforms (currently Mac OS X, Cygwin and MSYS2).
+    When the QT_USE_EXTSTANDARDPATHS macro is defined, this class will replace QStandardPaths, and
+    in that case the QT_EXTSTANDARDPATHS_ALT_DEFAULT macro will define the behaviour of code that does
+    not use QExtStandardPaths explicitly itself. When undefined or QT_EXTSTANDARDPATHS_ALT_DEFAULT=false,
+    QExtStandardPaths will use native locations, even if QStandardPaths::isALTLocationsEnabled() returns true.
+    When QT_EXTSTANDARDPATHS_ALT_DEFAULT=runtime, behaviour is controlled at runtime through
+    QStandardPaths::setALTLocationsEnabled() and QStandardPaths::isALTLocationsEnabled().
+    In all other cases QStandardPaths will use alternative locations.
+*/
+class Q_CORE_EXPORT QExtStandardPaths : public QStandardPaths
+{
+public:
+    /*!
+        returns the default ALT mode as determined when the code was being compiled.
+    */
+    static bool getDefaultALTMode()
+    {
+        return QSPDEFAULTALTMODE;
+    }
+    static QString writableLocation(StandardLocation type, bool altMode=QSPDEFAULTALTMODE)
+    {
+        return QStandardPaths::writableLocation(type, altMode);
+    }
+    static QStringList standardLocations(StandardLocation type, bool altMode=QSPDEFAULTALTMODE)
+    {
+        return QStandardPaths::standardLocations(type, altMode);
+    }
+
+    static QString locate(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile, bool altMode=QSPDEFAULTALTMODE)
+    {
+        return QStandardPaths::locate(type, altMode, fileName, options);
+    }
+    static QStringList locateAll(StandardLocation type, const QString &fileName, LocateOptions options = LocateFile, bool altMode=QSPDEFAULTALTMODE)
+    {
+        return QStandardPaths::locateAll(type, altMode, fileName, options);
+    }
+
+private:
+    // prevent construction
+    QExtStandardPaths();
+    ~QExtStandardPaths();
 };
 
 #endif // QT_NO_STANDARDPATHS
 
 QT_END_NAMESPACE
 
+#ifdef QT_USE_EXTSTANDARDPATHS
+#define QStandardPaths  QExtStandardPaths
+#endif // QT_USE_EXTSTANDARDPATHS
+
+
 #endif // QSTANDARDPATHS_H
diff --git a/qtbase/src/corelib/io/qstandardpaths_mac.mm b/qtbase/src/corelib/io/qstandardpaths_mac.mm
index f65ca20..039ed1e 100644
--- a/qtbase/src/corelib/io/qstandardpaths_mac.mm
+++ b/qtbase/src/corelib/io/qstandardpaths_mac.mm
@@ -31,13 +31,16 @@
 **
 ****************************************************************************/
 
+#undef QT_USE_EXTSTANDARDPATHS
 #include "qstandardpaths.h"
 #include <qdir.h>
 #include <qurl.h>
 #include <private/qcore_mac_p.h>
+#include <private/qfilesystemengine_p.h>
 
 #ifndef QT_BOOTSTRAPPED
 #include <qcoreapplication.h>
+#include <qlibraryinfo.h>
 #endif
 
 #include <CoreFoundation/CoreFoundation.h>
@@ -136,8 +139,152 @@ static QString macLocation(QStandardPaths::StandardLocation type, short domain)
     return path;
 }
 
-QString QStandardPaths::writableLocation(StandardLocation type)
+static void normaliseDirs(QStringList &dirs)
+{
+    // Normalise paths, skip relative paths
+    QMutableListIterator<QString> it(dirs);
+    while (it.hasNext()) {
+        const QString dir = it.next();
+        if (!dir.startsWith(QLatin1Char('/')))
+            it.remove();
+        else
+            it.setValue(QDir::cleanPath(dir));
+    }
+
+    // Remove duplicates from the list, there's no use for duplicated
+    // paths in XDG_CONFIG_DIRS - if it's not found in the given
+    // directory the first time, it won't be there the second time.
+    // Plus duplicate paths causes problems for example for mimetypes,
+    // where duplicate paths here lead to duplicated mime types returned
+    // for a file, eg "text/plain,text/plain" instead of "text/plain"
+    dirs.removeDuplicates();
+}
+
+static QStringList xdgCacheDirs()
 {
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgConfigDirsEnv = QFile::decodeName(qgetenv("XDG_CACHE_HOME"));
+    if (xdgConfigDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QDir::homePath() + QString::fromLatin1("/.cache"));
+#endif
+    } else {
+        dirs = xdgConfigDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QStringList xdgConfigDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgConfigDirsEnv = QFile::decodeName(qgetenv("XDG_CONFIG_DIRS"));
+    if (xdgConfigDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QLibraryInfo::location(QLibraryInfo::PrefixPath) + QString::fromLatin1("/etc/xdg"));
+#endif
+    } else {
+        dirs = xdgConfigDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QStringList xdgDataDirs()
+{
+    QStringList dirs;
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgDataDirsEnv = QFile::decodeName(qgetenv("XDG_DATA_DIRS"));
+    if (xdgDataDirsEnv.isEmpty()) {
+#ifndef QT_BOOTSTRAPPED
+        dirs.append(QLibraryInfo::location(QLibraryInfo::PrefixPath) + QString::fromLatin1("/share"));
+#endif
+    } else {
+        dirs = xdgDataDirsEnv.split(QLatin1Char(':'), QString::SkipEmptyParts);
+
+        normaliseDirs(dirs);
+    }
+    return dirs;
+}
+
+static QString xdgRuntimeDir()
+{
+    const uid_t myUid = geteuid();
+    // http://standards.freedesktop.org/basedir-spec/latest/
+    QString xdgRTDir = QFile::decodeName(qgetenv("XDG_RUNTIME_DIR"));
+    if (xdgRTDir.isEmpty()) {
+        const QString userName = QFileSystemEngine::resolveUserName(myUid);
+//         xdgRTDir = QDir::tempPath() + QLatin1String("/runtime-") + userName;
+        // NSTemporaryDirectory() returns the default $TMPDIR value, regardless of its current setting,
+        // which is more in line with XDG_RUNTIME_DIR requirements.
+        xdgRTDir = QString::fromNSString(NSTemporaryDirectory()) + QLatin1String("runtime-") + userName;
+        QDir dir(xdgRTDir);
+        if (!dir.exists()) {
+            if (!QDir().mkdir(xdgRTDir)) {
+                qWarning("QStandardPaths: error creating runtime directory %s: %s",
+                         qPrintable(xdgRTDir), qPrintable(qt_error_string(errno)));
+                return QString();
+            }
+        }
+    } else {
+        qWarning("QStandardPaths: XDG_RUNTIME_DIR is set, using '%s'", qPrintable(xdgRTDir));
+    }
+    // "The directory MUST be owned by the user"
+    QFileInfo fileInfo(xdgRTDir);
+    if (fileInfo.ownerId() != myUid) {
+        qWarning("QStandardPaths: wrong ownership on runtime directory %s, %d instead of %d", qPrintable(xdgRTDir),
+                 fileInfo.ownerId(), myUid);
+        return QString();
+    }
+    // "and he MUST be the only one having read and write access to it. Its Unix access mode MUST be 0700."
+    // since the current user is the owner, set both xxxUser and xxxOwner
+    QFile file(xdgRTDir);
+    const QFile::Permissions wantedPerms = QFile::ReadUser | QFile::WriteUser | QFile::ExeUser
+                                           | QFile::ReadOwner | QFile::WriteOwner | QFile::ExeOwner;
+    if (file.permissions() != wantedPerms && !file.setPermissions(wantedPerms)) {
+        qWarning("QStandardPaths: could not set correct permissions on runtime directory %s: %s",
+                 qPrintable(xdgRTDir), qPrintable(file.errorString()));
+        return QString();
+    }
+    return xdgRTDir;
+}
+
+QString QStandardPaths::writableLocation(StandardLocation type, bool altMode)
+{
+    if (altMode) {
+        const QString prefix = (isTestModeEnabled())? QDir::homePath() + QLatin1String("/.qttest") : QDir::homePath();
+        QString path;
+        switch (type) {
+        case GenericDataLocation:
+        case AppDataLocation:
+        case AppLocalDataLocation:
+            path = prefix + QLatin1String("/.local/share");
+            if (type != GenericDataLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericCacheLocation:
+        case CacheLocation:
+            path = prefix + QLatin1String("/.cache");
+            if (type == CacheLocation)
+                appendOrganizationAndApp(path);
+            return path;
+        case GenericConfigLocation:
+        case ConfigLocation:
+            return prefix + QLatin1String("/.config");
+        case ApplicationsLocation:
+            path = writableLocation(GenericDataLocation, altMode) + QLatin1String("/applications");
+            return path;
+        case RuntimeLocation:
+            return xdgRuntimeDir();
+        default:
+            break;
+        }
+    }
+
     if (isTestModeEnabled()) {
         const QString qttestDir = QDir::homePath() + QLatin1String("/.qttest");
         QString path;
@@ -162,6 +309,9 @@ QString QStandardPaths::writableLocation(StandardLocation type)
             if (type == AppConfigLocation)
                 appendOrganizationAndApp(path);
             return path;
+        case ApplicationsLocation:
+            path = qttestDir + QLatin1String("/Applications");
+            return path;
         default:
             break;
         }
@@ -178,16 +328,45 @@ QString QStandardPaths::writableLocation(StandardLocation type)
     case GenericCacheLocation:
     case CacheLocation:
     case RuntimeLocation:
+    case FontsLocation:
+        // the font location that is writable for all users is ~/Library/Fonts
         return macLocation(type, kUserDomain);
     default:
         return macLocation(type, kOnAppropriateDisk);
     }
 }
 
-QStringList QStandardPaths::standardLocations(StandardLocation type)
+QString QStandardPaths::writableLocation(StandardLocation type)
+{
+    return QStandardPaths::writableLocation(type, isALTLocationsEnabled());
+}
+
+QStringList QStandardPaths::standardLocations(StandardLocation type, bool altMode)
 {
     QStringList dirs;
 
+    if (altMode) {
+        switch (type) {
+        case GenericDataLocation:
+            dirs.append(xdgDataDirs());
+            break;
+        case GenericConfigLocation:
+        case ConfigLocation:
+            dirs.append(xdgConfigDirs());
+            break;
+        case GenericCacheLocation:
+        case CacheLocation:
+            dirs.append(xdgCacheDirs());
+            break;
+        case ApplicationsLocation:
+            QStringList xdgDirs = xdgDataDirs();
+            for (int i = 0; i < xdgDirs.count(); ++i)
+                xdgDirs[i].append(QLatin1String("/applications"));
+            dirs.append(xdgDirs);
+            break;
+        }
+    }
+
     if (type == GenericDataLocation || type == AppDataLocation || type == AppLocalDataLocation || type == GenericCacheLocation || type == CacheLocation) {
         const QString path = macLocation(type, kOnAppropriateDisk);
         if (!path.isEmpty())
@@ -195,6 +374,14 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
     }
 
     if (type == AppDataLocation || type == AppLocalDataLocation) {
+        if (altMode) {
+            QStringList xdgDirs = xdgDataDirs();
+            for (int i = 0; i < xdgDirs.count(); ++i) {
+                appendOrganizationAndApp(xdgDirs[i]);
+            }
+            dirs.append(xdgDirs);
+        }
+
         CFBundleRef mainBundle = CFBundleGetMainBundle();
         if (mainBundle) {
             CFURLRef bundleUrl = CFBundleCopyBundleURL(mainBundle);
@@ -218,11 +405,22 @@ QStringList QStandardPaths::standardLocations(StandardLocation type)
                 dirs.append(bundlePath + resourcesPath);
         }
     }
-    const QString localDir = writableLocation(type);
+    if (type == FontsLocation) {
+        // /Library/Fonts
+        dirs.append(macLocation(type,kLocalDomain));
+        // /System/Library/Fonts
+        dirs.append(macLocation(type,kSystemDomain));
+    }
+    const QString localDir = writableLocation(type, altMode);
     dirs.prepend(localDir);
     return dirs;
 }
 
+QStringList QStandardPaths::standardLocations(StandardLocation type)
+{
+    return QStandardPaths::standardLocations(type, isALTLocationsEnabled());
+}
+
 #ifndef QT_BOOTSTRAPPED
 QString QStandardPaths::displayName(StandardLocation type)
 {
diff --git a/qtbase/src/corelib/io/qloggingregistry.cpp b/qtbase/src/corelib/io/qloggingregistry.cpp
index a9ac38c..e9d620e 100644
--- a/qtbase/src/corelib/io/qloggingregistry.cpp
+++ b/qtbase/src/corelib/io/qloggingregistry.cpp
@@ -294,8 +294,11 @@ void QLoggingRegistry::init()
 #endif
 
     // get rules from user's/system configuration
-    const QString envPath = QStandardPaths::locate(QStandardPaths::GenericConfigLocation,
-                                                   QString::fromLatin1("QtProject/") + configFileName);
+    // Set altmode to true, so on platforms where this mode exists
+    // the alt locations are included in the search
+    const QString envPath = QExtStandardPaths::locate(QStandardPaths::GenericConfigLocation,
+                                                   QString::fromLatin1("QtProject/") + configFileName,
+                                                   QStandardPaths::LocateFile, true);
     if (!envPath.isEmpty())
         configRules = loadRulesFromFile(envPath);
 
