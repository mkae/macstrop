diff --git a/qttools/src/designer/src/designer/qdesigner_workbench.cpp b/qttools/src/designer/src/designer/qdesigner_workbench.cpp
index d54d48a..39b1cd3 100644
--- a/qttools/src/designer/src/designer/qdesigner_workbench.cpp
+++ b/qttools/src/designer/src/designer/qdesigner_workbench.cpp
@@ -70,6 +70,8 @@
 
 QT_BEGIN_NAMESPACE
 
+static bool macNativeMode;
+
 static const char *appFontPrefixC = "AppFonts";
 
 typedef QList<QAction *> ActionList;
@@ -174,6 +176,10 @@ QDesignerWorkbench::QDesignerWorkbench()  :
 {
     QDesignerSettings settings(m_core);
 
+    // Check if we're using the cocoa platform plugin, which ought to be a foolproof indication
+    // that we're running on OS X.
+    macNativeMode = QGuiApplication::platformName().contains(QLatin1String("cocoa"));
+
     (void) QDesignerComponents::createTaskMenu(core(), this);
 
     initializeCorePlugins();
@@ -384,9 +390,9 @@ void QDesignerWorkbench::switchToNeutralMode()
         fw->setMaximumSize(QWIDGETSIZE_MAX, QWIDGETSIZE_MAX);
     }
 
-#ifndef Q_OS_MACOS
-    m_globalMenuBar->setParent(0);
-#endif
+    if (macNativeMode) {
+        m_globalMenuBar->setParent(0);
+    }
 
     m_core->setTopLevel(0);
     qDesigner->setMainWindow(0);
@@ -402,14 +408,14 @@ void QDesignerWorkbench::switchToDockedMode()
 
     switchToNeutralMode();
 
-#if !defined(Q_OS_MACOS)
+    if (!macNativeMode) {
 #    if defined(Q_OS_UNIX)
-    QApplication::setAttribute(Qt::AA_DontUseNativeMenuBar, false);
+        QApplication::setAttribute(Qt::AA_DontUseNativeMenuBar, false);
 #    endif // Q_OS_UNIX
-    QDesignerToolWindow *widgetBoxWrapper = widgetBoxToolWindow();
-    widgetBoxWrapper->action()->setVisible(true);
-    widgetBoxWrapper->setWindowTitle(tr("Widget Box"));
-#endif // !Q_OS_MACOS
+        QDesignerToolWindow *widgetBoxWrapper = widgetBoxToolWindow();
+        widgetBoxWrapper->action()->setVisible(true);
+        widgetBoxWrapper->setWindowTitle(tr("Widget Box"));
+    }
 
     m_mode = DockedMode;
     const QDesignerSettings settings(m_core);
@@ -426,10 +432,10 @@ void QDesignerWorkbench::switchToDockedMode()
 
     m_core->setTopLevel(m_dockedMainWindow);
 
-#ifndef Q_OS_MACOS
-    m_dockedMainWindow->setMenuBar(m_globalMenuBar);
-    m_globalMenuBar->show();
-#endif
+    if (!macNativeMode) {
+        m_dockedMainWindow->setMenuBar(m_globalMenuBar);
+        m_globalMenuBar->show();
+    }
     qDesigner->setMainWindow(m_dockedMainWindow);
 
     foreach (QDesignerFormWindow *fw, m_formWindows) {
@@ -475,21 +481,21 @@ void QDesignerWorkbench::switchToTopLevelMode()
     // The widget box is special, it gets the menubar and gets to be the main widget.
 
     m_core->setTopLevel(widgetBoxWrapper);
-#if !defined(Q_OS_MACOS)
+    if (!macNativeMode) {
 #    if defined(Q_OS_UNIX)
-    // For now the appmenu protocol does not make it possible to associate a
-    // menubar with all application windows. This means in top level mode you
-    // can only reach the menubar when the widgetbox window is active. Since
-    // this is quite inconvenient, better not use the native menubar in this
-    // configuration and keep the menubar in the widgetbox window.
-    QApplication::setAttribute(Qt::AA_DontUseNativeMenuBar, true);
+        // For now the appmenu protocol does not make it possible to associate a
+        // menubar with all application windows. This means in top level mode you
+        // can only reach the menubar when the widgetbox window is active. Since
+        // this is quite inconvenient, better not use the native menubar in this
+        // configuration and keep the menubar in the widgetbox window.
+        QApplication::setAttribute(Qt::AA_DontUseNativeMenuBar, true);
 #    endif // Q_OS_UNIX
-    widgetBoxWrapper->setMenuBar(m_globalMenuBar);
-    widgetBoxWrapper->action()->setVisible(false);
-    widgetBoxWrapper->setCloseEventPolicy(MainWindowBase::EmitCloseEventSignal);
-    qDesigner->setMainWindow(widgetBoxWrapper);
-    widgetBoxWrapper->setWindowTitle(MainWindowBase::mainWindowTitle());
-#endif // !Q_OS_MACOS
+        widgetBoxWrapper->setMenuBar(m_globalMenuBar);
+        widgetBoxWrapper->action()->setVisible(false);
+        widgetBoxWrapper->setCloseEventPolicy(MainWindowBase::EmitCloseEventSignal);
+        qDesigner->setMainWindow(widgetBoxWrapper);
+        widgetBoxWrapper->setWindowTitle(MainWindowBase::mainWindowTitle());
+    }
 
     const QDesignerSettings settings(m_core);
     m_topLevelData.toolbars = MainWindowBase::createToolBars(m_actionManager, false);
