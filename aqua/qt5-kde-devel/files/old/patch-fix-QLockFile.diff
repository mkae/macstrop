diff --git a/qtbase/src/corelib/io/qlockfile_unix.cpp b/qtbase/src/corelib/io/qlockfile_unix.cpp
index 623968b..bcef842 100644
--- a/qtbase/src/corelib/io/qlockfile_unix.cpp
+++ b/qtbase/src/corelib/io/qlockfile_unix.cpp
@@ -136,6 +136,8 @@ static QBasicMutex fcntlLock;
 static bool fcntlWorksAfterFlock(const QString &fn)
 {
     QMutexLocker lock(&fcntlLock);
+    if (fcntlOK.isDestroyed())
+        return QLockFilePrivate::checkFcntlWorksAfterFlock(fn);
     bool *worksPtr = fcntlOK->object(fn);
     if (!worksPtr) {
         worksPtr = new bool(QLockFilePrivate::checkFcntlWorksAfterFlock(fn));
diff --git a/qtbase/tests/auto/corelib/io/qlockfile/tst_qlockfile.cpp b/qtbase/tests/auto/corelib/io/qlockfile/tst_qlockfile.cpp
index 21c5696..4884c12 100644
--- a/qtbase/tests/auto/corelib/io/qlockfile/tst_qlockfile.cpp
+++ b/qtbase/tests/auto/corelib/io/qlockfile/tst_qlockfile.cpp
@@ -546,5 +546,15 @@ bool tst_QLockFile::overwritePidInLockFile(const QString &filePath, qint64 pid)
     return f.write(buf) == buf.size();
 }
 
+struct LockFileUsageInGlobalDtor
+{
+    ~LockFileUsageInGlobalDtor() {
+        QLockFile lockFile(QDir::currentPath() + "/lastlock");
+        QVERIFY(lockFile.lock());
+        QVERIFY(lockFile.isLocked());
+    }
+};
+LockFileUsageInGlobalDtor s_instance;
+
 QTEST_MAIN(tst_QLockFile)
 #include "tst_qlockfile.moc"
