diff --git a/qtbase/src/widgets/styles/qmacstyle_mac.mm b/qtbase/src/widgets/styles/qmacstyle_mac.mm
index 007ce20175454100f9adf652fb80c8c656df9136..2cbf9735c57a378bd5e169a228402558e1a11b36 100644
--- a/qtbase/src/widgets/styles/qmacstyle_mac.mm
+++ b/qtbase/src/widgets/styles/qmacstyle_mac.mm
@@ -3037,6 +3037,9 @@ int QMacStyle::styleHint(StyleHint sh, const QStyleOption *opt, const QWidget *w
     case SH_ItemView_ScrollMode:
         ret = QAbstractItemView::ScrollPerPixel;
         break;
+    case SH_Menu_SupportsSections:
+        ret = true;
+        break;
     default:
         ret = QCommonStyle::styleHint(sh, opt, w, hret);
         break;
@@ -4390,6 +4396,9 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                 mdi.itemType |= kThemeMenuItemHierarchical | kThemeMenuItemHierBackground;
             else
                 mdi.itemType |= kThemeMenuItemPopUpBackground;
+            if (mi->menuItemType == QStyleOptionMenuItem::Separator) {
+                enabled = active = false;
+            }
             if (enabled)
                 mdi.state = kThemeMenuActive;
             else
@@ -4397,7 +4406,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             if (active)
                 mdi.state |= kThemeMenuSelected;
             QRect contentRect;
-            if (mi->menuItemType == QStyleOptionMenuItem::Separator) {
+            if (mi->menuItemType == QStyleOptionMenuItem::Separator && mi->text.isEmpty()) {
                 // First arg should be &menurect, but wacky stuff happens then.
                 HIThemeDrawMenuSeparator(&itemRect, &itemRect, &mdi,
                                          cg, kHIThemeOrientationNormal);
@@ -4426,88 +4435,90 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             else
                 p->setPen(mi->palette.buttonText().color());
 
-            if (mi->checked) {
-                // Use the HIThemeTextInfo foo to draw the check mark correctly, if we do it,
-                // we somehow need to use a special encoding as it doesn't look right with our
-                // drawText().
-                p->save();
-                CGContextSetShouldAntialias(cg, true);
-                CGContextSetShouldSmoothFonts(cg, true);
-                QColor textColor = p->pen().color();
-                CGFloat colorComp[] = { static_cast<CGFloat>(textColor.redF()), static_cast<CGFloat>(textColor.greenF()),
-                                      static_cast<CGFloat>(textColor.blueF()), static_cast<CGFloat>(textColor.alphaF()) };
-                CGContextSetFillColorSpace(cg, qt_mac_genericColorSpace());
-                CGContextSetFillColor(cg, colorComp);
-                HIThemeTextInfo tti;
-                tti.version = qt_mac_hitheme_version;
-                tti.state = tds;
-                if (active && enabled)
-                    tti.state = kThemeStatePressed;
-                switch (widgetSize) {
-                case QAquaSizeUnknown:
-                case QAquaSizeLarge:
-                    tti.fontID = kThemeMenuItemMarkFont;
-                    break;
-                case QAquaSizeSmall:
-                    tti.fontID = kThemeSmallSystemFont;
-                    break;
-                case QAquaSizeMini:
-                    tti.fontID = kThemeMiniSystemFont;
-                    break;
-                }
-                tti.horizontalFlushness = kHIThemeTextHorizontalFlushLeft;
-                tti.verticalFlushness = kHIThemeTextVerticalFlushCenter;
-                tti.options = kHIThemeTextBoxOptionNone;
-                tti.truncationPosition = kHIThemeTextTruncationNone;
-                tti.truncationMaxLines = 1;
-                QCFString checkmark;
+            if (mi->menuItemType != QStyleOptionMenuItem::Separator) {
+                if (mi->checked) {
+                    // Use the HIThemeTextInfo foo to draw the check mark correctly, if we do it,
+                    // we somehow need to use a special encoding as it doesn't look right with our
+                    // drawText().
+                    p->save();
+                    CGContextSetShouldAntialias(cg, true);
+                    CGContextSetShouldSmoothFonts(cg, true);
+                    QColor textColor = p->pen().color();
+                    CGFloat colorComp[] = { static_cast<CGFloat>(textColor.redF()), static_cast<CGFloat>(textColor.greenF()),
+                                          static_cast<CGFloat>(textColor.blueF()), static_cast<CGFloat>(textColor.alphaF()) };
+                    CGContextSetFillColorSpace(cg, qt_mac_genericColorSpace());
+                    CGContextSetFillColor(cg, colorComp);
+                    HIThemeTextInfo tti;
+                    tti.version = qt_mac_hitheme_version;
+                    tti.state = tds;
+                    if (active && enabled)
+                        tti.state = kThemeStatePressed;
+                    switch (widgetSize) {
+                    case QAquaSizeUnknown:
+                    case QAquaSizeLarge:
+                        tti.fontID = kThemeMenuItemMarkFont;
+                        break;
+                    case QAquaSizeSmall:
+                        tti.fontID = kThemeSmallSystemFont;
+                        break;
+                    case QAquaSizeMini:
+                        tti.fontID = kThemeMiniSystemFont;
+                        break;
+                    }
+                    tti.horizontalFlushness = kHIThemeTextHorizontalFlushLeft;
+                    tti.verticalFlushness = kHIThemeTextVerticalFlushCenter;
+                    tti.options = kHIThemeTextBoxOptionNone;
+                    tti.truncationPosition = kHIThemeTextTruncationNone;
+                    tti.truncationMaxLines = 1;
+                    QCFString checkmark;
 #if 0
-                if (mi->checkType == QStyleOptionMenuItem::Exclusive)
-                    checkmark = QString(QChar(kDiamondUnicode));
-                else
+                    if (mi->checkType == QStyleOptionMenuItem::Exclusive)
+                        checkmark = QString(QChar(kDiamondUnicode));
+                    else
 #endif
-                    checkmark = QString(QChar(kCheckUnicode));
-                int mw = checkcol + macItemFrame;
-                int mh = contentRect.height() - 2 * macItemFrame;
-                int xp = contentRect.x();
-                xp += macItemFrame;
-                CGFloat outWidth, outHeight, outBaseline;
-                HIThemeGetTextDimensions(checkmark, 0, &tti, &outWidth, &outHeight,
-                                         &outBaseline);
-                if (widgetSize == QAquaSizeMini)
-                    outBaseline += 1;
-                QRect r(xp, contentRect.y(), mw, mh);
-                r.translate(0, p->fontMetrics().ascent() - int(outBaseline) + 1);
-                HIRect bounds = qt_hirectForQRect(r);
-                HIThemeDrawTextBox(checkmark, &bounds, &tti,
-                                   cg, kHIThemeOrientationNormal);
-                p->restore();
-            }
-            if (!mi->icon.isNull()) {
-                QIcon::Mode mode = (mi->state & State_Enabled) ? QIcon::Normal
-                                                               : QIcon::Disabled;
-                // Always be normal or disabled to follow the Mac style.
-                int smallIconSize = proxy()->pixelMetric(PM_SmallIconSize);
-                QSize iconSize(smallIconSize, smallIconSize);
-#ifndef QT_NO_COMBOBOX
-                if (const QComboBox *comboBox = qobject_cast<const QComboBox *>(w)) {
-                    iconSize = comboBox->iconSize();
+                        checkmark = QString(QChar(kCheckUnicode));
+                    int mw = checkcol + macItemFrame;
+                    int mh = contentRect.height() - 2 * macItemFrame;
+                    int xp = contentRect.x();
+                    xp += macItemFrame;
+                    CGFloat outWidth, outHeight, outBaseline;
+                    HIThemeGetTextDimensions(checkmark, 0, &tti, &outWidth, &outHeight,
+                                             &outBaseline);
+                    if (widgetSize == QAquaSizeMini)
+                        outBaseline += 1;
+                    QRect r(xp, contentRect.y(), mw, mh);
+                    r.translate(0, p->fontMetrics().ascent() - int(outBaseline) + 1);
+                    HIRect bounds = qt_hirectForQRect(r);
+                    HIThemeDrawTextBox(checkmark, &bounds, &tti,
+                                       cg, kHIThemeOrientationNormal);
+                    p->restore();
                 }
+                if (!mi->icon.isNull()) {
+                    QIcon::Mode mode = (mi->state & State_Enabled) ? QIcon::Normal
+                                                                   : QIcon::Disabled;
+                    // Always be normal or disabled to follow the Mac style.
+                    int smallIconSize = proxy()->pixelMetric(PM_SmallIconSize);
+                    QSize iconSize(smallIconSize, smallIconSize);
+#ifndef QT_NO_COMBOBOX
+                    if (const QComboBox *comboBox = qobject_cast<const QComboBox *>(w)) {
+                        iconSize = comboBox->iconSize();
+                    }
 #endif
-                QPixmap pixmap = mi->icon.pixmap(window, iconSize, mode);
-                int pixw = pixmap.width() / pixmap.devicePixelRatio();
-                int pixh = pixmap.height() / pixmap.devicePixelRatio();
-                QRect cr(xpos, contentRect.y(), checkcol, contentRect.height());
-                QRect pmr(0, 0, pixw, pixh);
-                pmr.moveCenter(cr.center());
-                p->drawPixmap(pmr.topLeft(), pixmap);
-                xpos += pixw + 6;
+                    QPixmap pixmap = mi->icon.pixmap(window, iconSize, mode);
+                    int pixw = pixmap.width() / pixmap.devicePixelRatio();
+                    int pixh = pixmap.height() / pixmap.devicePixelRatio();
+                    QRect cr(xpos, contentRect.y(), checkcol, contentRect.height());
+                    QRect pmr(0, 0, pixw, pixh);
+                    pmr.moveCenter(cr.center());
+                    p->drawPixmap(pmr.topLeft(), pixmap);
+                    xpos += pixw + 6;
+                }
             }
 
             QString s = mi->text;
             if (!s.isEmpty()) {
                 int t = s.indexOf(QLatin1Char('\t'));
-                int text_flags = Qt::AlignRight | Qt::AlignVCenter | Qt::TextHideMnemonic
+                int text_flags = Qt::AlignVCenter | Qt::TextHideMnemonic
                                  | Qt::TextSingleLine | Qt::AlignAbsolute;
                 int yPos = contentRect.y();
                 if (widgetSize == QAquaSizeMini)
@@ -4517,7 +4528,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                     p->setFont(qt_app_fonts_hash()->value("QMenuItem", p->font()));
                     int xp = contentRect.right() - tabwidth - macRightBorder
                              - macItemHMargin - macItemFrame + 1;
-                    p->drawText(xp, yPos, tabwidth, contentRect.height(), text_flags,
+                    p->drawText(xp, yPos, tabwidth, contentRect.height(), text_flags | Qt::AlignRight,
                                 s.mid(t + 1));
                     s = s.left(t);
                 }
@@ -4530,9 +4541,32 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                 // and then the combo inherits it and passes it onward. At that point the resolve mask
                 // is very, very weak. This makes it stonger.
                 myFont.setPointSizeF(QFontInfo(mi->font).pointSizeF());
-                p->setFont(myFont);
-                p->drawText(xpos, yPos, contentRect.width() - xm - tabwidth + 1,
-                            contentRect.height(), text_flags ^ Qt::AlignRight, s);
+                if (mi->menuItemType == QStyleOptionMenuItem::Separator) {
+                    // render the text as much as possible as QCocoaMenuItem does
+                    // for native menubar menu items
+                    myFont.setUnderline(true);
+                    myFont.setWeight(QFont::DemiBold);
+                    myFont.setLetterSpacing(QFont::PercentageSpacing, 95);
+                    // use an appropriate pen:
+                    p->setPen(mi->palette.color(QPalette::Disabled, QPalette::Text));
+                    p->setFont(myFont);
+                    // draw the separator line above the section title text
+                    QRect lr(mi->rect);
+                    lr.translate(0, - p->fontMetrics().ascent() / 2 - 5);
+                    if (lr.y() >= 0) {
+                        // draw the overlying separator line only if not the 1st thing in the menu
+                        HIRect hiLr = qt_hirectForQRect(lr);
+                        HIThemeDrawMenuSeparator(&hiLr, &hiLr, &mdi,
+                                             cg, kHIThemeOrientationNormal);
+                    }
+                    // draw the text left-aligned w.r.t. the icon location
+                    p->drawText(contentRect.x() + macItemHMargin, yPos, contentRect.width(),
+                                contentRect.height(), text_flags | Qt::AlignLeft, s);
+                } else {
+                    p->setFont(myFont);
+                    p->drawText(xpos, yPos, contentRect.width() - xm - tabwidth + 1,
+                                contentRect.height(), text_flags | Qt::AlignLeft, s);
+                }
                 p->restore();
             }
         }
@@ -6697,10 +6731,16 @@ QSize QMacStyle::sizeFromContents(ContentsType ct, const QStyleOption *opt,
             int w = sz.width(),
                 h = sz.height();
             if (mi->menuItemType == QStyleOptionMenuItem::Separator) {
-                w = 10;
                 SInt16 ash;
                 GetThemeMenuSeparatorHeight(&ash);
                 h = ash;
+                if (!mi->text.isEmpty()) {
+                    // make room for the overlying separator line and 
+                    // don't change the base width .
+                    h += mi->fontMetrics.height() / 2 + 4;
+                } else {
+                    w = 10;
+                }
             } else {
                 h = mi->fontMetrics.height() + 2;
                 if (!mi->icon.isNull()) {
diff --git a/qtbase/src/plugins/platforms/cocoa/qcocoamenuitem.mm b/qtbase/src/plugins/platforms/cocoa/qcocoamenuitem.mm
index 21f2b4de85155fe64db91ef28005fed115f32387..2b47e9bbbdeebd9d79ed0a2ee6ae56dccd00afa7 100644
--- a/qtbase/src/plugins/platforms/cocoa/qcocoamenuitem.mm
+++ b/qtbase/src/plugins/platforms/cocoa/qcocoamenuitem.mm
@@ -222,13 +222,18 @@ void QCocoaMenuItem::setNativeContents(WId item)
 
 NSMenuItem *QCocoaMenuItem::sync()
 {
-    if (m_isSeparator != [m_native isSeparatorItem]) {
+    bool isNativeSeparator = [m_native isSeparatorItem];
+    bool noText = m_text.isEmpty();
+    if ( (m_isSeparator != isNativeSeparator && noText)
+        || (isNativeSeparator && !noText)) {
         [m_native release];
-        if (m_isSeparator) {
+        if (m_isSeparator && m_text.isEmpty()) {
             m_native = [[NSMenuItem separatorItem] retain];
             [m_native setTag:reinterpret_cast<NSInteger>(this)];
-        } else
+        } else {
             m_native = nil;
+            isNativeSeparator = false;
+        }
     }
 
     if ((m_role != NoRole && !m_textSynced) || m_merged) {
@@ -329,22 +334,49 @@ NSMenuItem *QCocoaMenuItem::sync()
 
     QString finalString = QPlatformTheme::removeMnemonics(text);
     bool useAttributedTitle = false;
+    NSFont *customMenuFont = NULL;
+    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:1];
+    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:1];
     // Cocoa Font and title
     if (m_font.resolve()) {
-        NSFont *customMenuFont = [NSFont fontWithName:m_font.family().toNSString()
+        customMenuFont = [NSFont fontWithName:m_font.family().toNSString()
                                   size:m_font.pointSize()];
         if (customMenuFont) {
-            NSArray *keys = [NSArray arrayWithObjects:NSFontAttributeName, nil];
-            NSArray *objects = [NSArray arrayWithObjects:customMenuFont, nil];
-            NSDictionary *attributes = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
-            NSAttributedString *str = [[[NSAttributedString alloc] initWithString:finalString.toNSString()
-                                     attributes:attributes] autorelease];
-            [m_native setAttributedTitle: str];
+            [keys addObject:NSFontAttributeName];
+            [objects addObject:customMenuFont];
             useAttributedTitle = true;
         }
     }
+    if (m_isSeparator && !m_text.isEmpty()) {
+        if (!customMenuFont) {
+            // make sure we use an appropriate font
+            customMenuFont = [NSFont menuBarFontOfSize:0];
+            if (customMenuFont) {
+                [keys addObject:NSFontAttributeName];
+                [objects addObject:customMenuFont];
+            }
+        }
+        [keys addObject:NSUnderlineStyleAttributeName];
+        [objects addObject:[NSNumber numberWithInt:NSUnderlineStyleSingle|NSUnderlinePatternSolid]];
+        // the text will be drawn with a slightly heavier stroke:
+        [keys addObject:NSStrokeWidthAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-1.5]];
+        // narrow the text ever so slightly:
+        [keys addObject:NSExpansionAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-0.05]];
+        // add some additional vertical space:
+        [keys addObject:NSBaselineOffsetAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-5]];
+        useAttributedTitle = true;
+        setEnabled(false);
+    }
     if (!useAttributedTitle) {
        [m_native setTitle:finalString.toNSString()];
+    } else {
+        NSDictionary *attributes = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
+        NSAttributedString *str = [[[NSAttributedString alloc] initWithString:finalString.toNSString()
+                                 attributes:attributes] autorelease];
+        [m_native setAttributedTitle: str];
     }
 
 #ifndef QT_NO_SHORTCUT
diff --git a/qtbase/src/widgets/widgets/qmenu.cpp b/qtbase/src/widgets/widgets/qmenu.cpp
index 36a8a96b79e6c56ffbc320313376778514930b35..b4bd597bb3f768c0d54d92273c20679bf0e3bc6f 100644
--- a/qtbase/src/widgets/widgets/qmenu.cpp
+++ b/qtbase/src/widgets/widgets/qmenu.cpp
@@ -1852,6 +1852,52 @@ QAction *QMenu::addSeparator()
     return action;
 }
 
+#ifdef Q_OS_MACOS
+static bool isNativeMenubarMenu(const QMenu *m)
+{   bool ret = false;
+    QSet<const QMenu*> checkList;
+    if (m->menuAction()) {
+        QAction *mAct = m->menuAction();
+        foreach (const QWidget *w, mAct->associatedWidgets()) {
+            if (w == m) {
+                goto done;
+            }
+            if (const QMenuBar *mb = qobject_cast<const QMenuBar*>(w)) {
+                ret = mb->isNativeMenuBar();
+                goto done;
+            }
+            else if (const QMenu *mm = qobject_cast<const QMenu*>(w)) {
+                if (checkList.contains(mm)) {
+                    continue;
+                }
+                checkList += mm;
+                if (isNativeMenubarMenu(mm)) {
+                    ret = true;
+                    goto done;
+                }
+            }
+        }
+    }
+done:;
+    return ret;
+}
+#endif
+
+static bool qMenuRendersSections(const QMenu *m)
+{
+    bool ret = false;
+    if (m) {
+#ifdef Q_OS_MACOS
+        // on Mac menus in the native menubar will never render sections properly,
+        // regardless of the style in use
+        ret = m->style()->styleHint(QStyle::SH_Menu_SupportsSections) || isNativeMenubarMenu(m);
+#else
+        ret = m->style()->styleHint(QStyle::SH_Menu_SupportsSections);
+#endif
+    }
+    return ret;
+}
+
 /*!
     \since 5.1
 
@@ -1862,7 +1908,8 @@ QAction *QMenu::addSeparator()
 
     The rendering of the hint is style and platform dependent. Widget
     styles can use the text information in the rendering for sections,
-    or can choose to ignore it and render sections like simple separators.
+    or can choose to ignore it and render sections like simple separators,
+    depending on whether the platform supports texted separators.
 
     QMenu takes ownership of the returned QAction.
 
@@ -1871,7 +1918,18 @@ QAction *QMenu::addSeparator()
 QAction *QMenu::addSection(const QString &text)
 {
     QAction *action = new QAction(text, this);
+    if (!qMenuRendersSections(this)) {
+        // add the text item without turning it into a separator first
+        // but deactivated, also to make it visually distinct
+        action->setEnabled(false);
+        action->setMenuRole(QAction::NoRole);
+        addAction(action);
+        // create a 2nd action that will be returned and have the expected properties
+        // but show up as a simple separator on this platform
+        action = new QAction(text, this);
+    }
     action->setSeparator(true);
+    action->setMenuRole(QAction::NoRole);
     addAction(action);
     return action;
 }
@@ -1886,7 +1944,8 @@ QAction *QMenu::addSection(const QString &text)
 
     The rendering of the hints is style and platform dependent. Widget
     styles can use the text and icon information in the rendering for sections,
-    or can choose to ignore them and render sections like simple separators.
+    or can choose to ignore them and render sections like simple separators,
+    depending on whether the platform supports texted separators.
 
     QMenu takes ownership of the returned QAction.
 
@@ -1895,7 +1954,18 @@ QAction *QMenu::addSection(const QString &text)
 QAction *QMenu::addSection(const QIcon &icon, const QString &text)
 {
     QAction *action = new QAction(icon, text, this);
+    if (!qMenuRendersSections(this)) {
+        // add the text item without turning it into a separator first
+        // but deactivated, also to make it visually distinct
+        action->setEnabled(false);
+        action->setMenuRole(QAction::NoRole);
+        addAction(action);
+        // create a 2nd action that will be returned and have the expected properties
+        // but show up as a simple separator on this platform
+        action = new QAction(icon, text, this);
+    }
     action->setSeparator(true);
+    action->setMenuRole(QAction::NoRole);
     addAction(action);
     return action;
 }
diff --git a/qtbase/src/plugins/platforms/cocoa/qcocoamenu.mm b/qtbase/src/plugins/platforms/cocoa/qcocoamenu.mm
index e177a24e737be5e8277afaf8ffd01c516b9a8f06..0a8ed6cbf9d4954daa776e1d4e988f5557ca078b 100644
--- a/qtbase/src/plugins/platforms/cocoa/qcocoamenu.mm
+++ b/qtbase/src/plugins/platforms/cocoa/qcocoamenu.mm
@@ -359,9 +372,18 @@ void QCocoaMenu::insertNative(QCocoaMenuItem *item, QCocoaMenuItem *beforeItem)
             qWarning("No non-merged before menu item found");
             return;
         }
+        if (item->isSeparator() && !item->text().isEmpty()) {
+            // menu section: add a separator before the section title text
+            const NSInteger idx = [m_nativeMenu indexOfItem:beforeItem->nsItem()];
+            [m_nativeMenu insertItem:[NSMenuItem separatorItem] atIndex:idx];
+        }
         const NSInteger nativeIndex = [m_nativeMenu indexOfItem:beforeItem->nsItem()];
         [m_nativeMenu insertItem:nativeItem atIndex:nativeIndex];
     } else {
+        if (item->isSeparator() && !item->text().isEmpty()) {
+            // menu section: add a separator before the section title text
+            [m_nativeMenu addItem:[NSMenuItem separatorItem]];
+        }
         [m_nativeMenu addItem:nativeItem];
     }
     item->setMenuParent(this);
@@ -474,7 +497,7 @@ void QCocoaMenu::syncSeparatorsCollapsible(bool enable)
         }
     } else {
         foreach (QCocoaMenuItem *item, m_menuItems) {
-            if (!item->isSeparator())
+            if (!item->isSeparator() || !item->text().isEmpty())
                 continue;
 
             // sync the visiblity directly
