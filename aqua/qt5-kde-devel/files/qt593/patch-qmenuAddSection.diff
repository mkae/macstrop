diff --git a/qtbase/src/plugins/platforms/cocoa/qcocoamenu.mm b/qtbase/src/plugins/platforms/cocoa/qcocoamenu.mm
index 40fa09f..981d900 100644
--- a/qtbase/src/plugins/platforms/cocoa/qcocoamenu.mm
+++ b/qtbase/src/plugins/platforms/cocoa/qcocoamenu.mm
@@ -380,9 +380,18 @@ void QCocoaMenu::insertNative(QCocoaMenuItem *item, QCocoaMenuItem *beforeItem)
             qWarning("No non-merged before menu item found");
             return;
         }
+        if (item->isSeparator() && !item->text().isEmpty()) {
+            // menu section: add a separator before the section title text
+            const NSInteger idx = [m_nativeMenu indexOfItem:beforeItem->nsItem()];
+            [m_nativeMenu insertItem:[NSMenuItem separatorItem] atIndex:idx];
+        }
         const NSInteger nativeIndex = [m_nativeMenu indexOfItem:beforeItem->nsItem()];
         [m_nativeMenu insertItem:nativeItem atIndex:nativeIndex];
     } else {
+        if (item->isSeparator() && !item->text().isEmpty()) {
+            // menu section: add a separator before the section title text
+            [m_nativeMenu addItem:[NSMenuItem separatorItem]];
+        }
         [m_nativeMenu addItem:nativeItem];
     }
     item->setMenuParent(this);
@@ -525,7 +534,7 @@ void QCocoaMenu::syncSeparatorsCollapsible(bool enable)
         }
     } else {
         foreach (QCocoaMenuItem *item, m_menuItems) {
-            if (!item->isSeparator())
+            if (!item->isSeparator() || !item->text().isEmpty())
                 continue;
 
             // sync the visiblity directly
diff --git a/qtbase/src/plugins/platforms/cocoa/qcocoamenuitem.mm b/qtbase/src/plugins/platforms/cocoa/qcocoamenuitem.mm
index 394e0fb..440b3f0 100644
--- a/qtbase/src/plugins/platforms/cocoa/qcocoamenuitem.mm
+++ b/qtbase/src/plugins/platforms/cocoa/qcocoamenuitem.mm
@@ -218,13 +218,18 @@ void QCocoaMenuItem::setNativeContents(WId item)
 
 NSMenuItem *QCocoaMenuItem::sync()
 {
-    if (m_isSeparator != [m_native isSeparatorItem]) {
+    bool isNativeSeparator = [m_native isSeparatorItem];
+    bool noText = m_text.isEmpty();
+    if ( (m_isSeparator != isNativeSeparator && noText)
+        || (isNativeSeparator && !noText)) {
         [m_native release];
-        if (m_isSeparator) {
+        if (m_isSeparator && m_text.isEmpty()) {
             m_native = [[NSMenuItem separatorItem] retain];
             [m_native setTag:reinterpret_cast<NSInteger>(this)];
-        } else
+        } else {
             m_native = nil;
+            isNativeSeparator = false;
+        }
     }
 
     if ((m_role != NoRole && !m_textSynced) || m_merged) {
@@ -325,22 +330,49 @@ NSMenuItem *QCocoaMenuItem::sync()
 
     QString finalString = QPlatformTheme::removeMnemonics(text);
     bool useAttributedTitle = false;
+    NSFont *customMenuFont = NULL;
+    NSMutableArray *keys = [NSMutableArray arrayWithCapacity:1];
+    NSMutableArray *objects = [NSMutableArray arrayWithCapacity:1];
     // Cocoa Font and title
     if (m_font.resolve()) {
-        NSFont *customMenuFont = [NSFont fontWithName:m_font.family().toNSString()
+        customMenuFont = [NSFont fontWithName:m_font.family().toNSString()
                                   size:m_font.pointSize()];
         if (customMenuFont) {
-            NSArray *keys = [NSArray arrayWithObjects:NSFontAttributeName, nil];
-            NSArray *objects = [NSArray arrayWithObjects:customMenuFont, nil];
-            NSDictionary *attributes = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
-            NSAttributedString *str = [[[NSAttributedString alloc] initWithString:finalString.toNSString()
-                                     attributes:attributes] autorelease];
-            [m_native setAttributedTitle: str];
+            [keys addObject:NSFontAttributeName];
+            [objects addObject:customMenuFont];
             useAttributedTitle = true;
         }
     }
+    if (m_isSeparator && !m_text.isEmpty()) {
+        if (!customMenuFont) {
+            // make sure we use an appropriate font
+            customMenuFont = [NSFont menuBarFontOfSize:0];
+            if (customMenuFont) {
+                [keys addObject:NSFontAttributeName];
+                [objects addObject:customMenuFont];
+            }
+        }
+        [keys addObject:NSUnderlineStyleAttributeName];
+        [objects addObject:[NSNumber numberWithInt:NSUnderlineStyleSingle|NSUnderlinePatternSolid]];
+        // the text will be drawn with a slightly heavier stroke:
+        [keys addObject:NSStrokeWidthAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-1.5]];
+        // narrow the text ever so slightly:
+        [keys addObject:NSExpansionAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-0.05]];
+        // add some additional vertical space:
+        [keys addObject:NSBaselineOffsetAttributeName];
+        [objects addObject:[NSNumber numberWithDouble:-5]];
+        useAttributedTitle = true;
+        setEnabled(false);
+    }
     if (!useAttributedTitle) {
        [m_native setTitle:finalString.toNSString()];
+    } else {
+        NSDictionary *attributes = [NSDictionary dictionaryWithObjects:objects forKeys:keys];
+        NSAttributedString *str = [[[NSAttributedString alloc] initWithString:finalString.toNSString()
+                                 attributes:attributes] autorelease];
+        [m_native setAttributedTitle: str];
     }
 
 #ifndef QT_NO_SHORTCUT
diff --git a/qtbase/src/widgets/styles/qmacstyle_mac.mm b/qtbase/src/widgets/styles/qmacstyle_mac.mm
index 9e44e1d..5913f3f 100644
--- a/qtbase/src/widgets/styles/qmacstyle_mac.mm
+++ b/qtbase/src/widgets/styles/qmacstyle_mac.mm
@@ -3126,6 +3126,9 @@ int QMacStyle::styleHint(StyleHint sh, const QStyleOption *opt, const QWidget *w
     case SH_ItemView_ScrollMode:
         ret = QAbstractItemView::ScrollPerPixel;
         break;
+    case SH_Menu_SupportsSections:
+        ret = true;
+        break;
     default:
         ret = QCommonStyle::styleHint(sh, opt, w, hret);
         break;
@@ -4451,6 +4454,9 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                 mdi.itemType |= kThemeMenuItemHierarchical | kThemeMenuItemHierBackground;
             else
                 mdi.itemType |= kThemeMenuItemPopUpBackground;
+            if (mi->menuItemType == QStyleOptionMenuItem::Separator) {
+                enabled = active = false;
+            }
             if (enabled)
                 mdi.state = kThemeMenuActive;
             else
@@ -4458,7 +4464,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             if (active)
                 mdi.state |= kThemeMenuSelected;
             QRect contentRect;
-            if (mi->menuItemType == QStyleOptionMenuItem::Separator) {
+            if (mi->menuItemType == QStyleOptionMenuItem::Separator && mi->text.isEmpty()) {
                 // First arg should be &menurect, but wacky stuff happens then.
                 HIThemeDrawMenuSeparator(&itemRect, &itemRect, &mdi,
                                          cg, kHIThemeOrientationNormal);
@@ -4487,54 +4493,56 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             else
                 p->setPen(mi->palette.buttonText().color());
 
-            if (mi->checked) {
-                QStyleOption checkmarkOpt;
-                checkmarkOpt.initFrom(w);
-
-                const int mw = checkcol + macItemFrame;
-                const int mh = contentRect.height() + macItemFrame;
-                const int xp = contentRect.x() + macItemFrame;
-                checkmarkOpt.rect = QRect(xp, contentRect.y() - checkmarkOpt.fontMetrics.descent(), mw, mh);
-
-                checkmarkOpt.state |= State_On; // Always on. Never rendered when off.
-                checkmarkOpt.state.setFlag(State_Selected, active);
-                checkmarkOpt.state.setFlag(State_Enabled, enabled);
-                if (widgetSize == QAquaSizeMini)
-                    checkmarkOpt.state |= State_Mini;
-                else if (widgetSize == QAquaSizeSmall)
-                    checkmarkOpt.state |= State_Small;
-
-                // We let drawPrimitive(PE_IndicatorMenuCheckMark) pick the right color
-                checkmarkOpt.palette.setColor(QPalette::HighlightedText, p->pen().color());
-                checkmarkOpt.palette.setColor(QPalette::Text, p->pen().color());
-
-                proxy()->drawPrimitive(PE_IndicatorMenuCheckMark, &checkmarkOpt, p, w);
-            }
-            if (!mi->icon.isNull()) {
-                QIcon::Mode mode = (mi->state & State_Enabled) ? QIcon::Normal
-                                                               : QIcon::Disabled;
-                // Always be normal or disabled to follow the Mac style.
-                int smallIconSize = proxy()->pixelMetric(PM_SmallIconSize);
-                QSize iconSize(smallIconSize, smallIconSize);
-#if QT_CONFIG(combobox)
-                if (const QComboBox *comboBox = qobject_cast<const QComboBox *>(w)) {
-                    iconSize = comboBox->iconSize();
+            if (mi->menuItemType != QStyleOptionMenuItem::Separator) {
+                if (mi->checked) {
+                    QStyleOption checkmarkOpt;
+                    checkmarkOpt.initFrom(w);
+
+                    const int mw = checkcol + macItemFrame;
+                    const int mh = contentRect.height() + macItemFrame;
+                    const int xp = contentRect.x() + macItemFrame;
+                    checkmarkOpt.rect = QRect(xp, contentRect.y() - checkmarkOpt.fontMetrics.descent(), mw, mh);
+
+                    checkmarkOpt.state |= State_On; // Always on. Never rendered when off.
+                    checkmarkOpt.state.setFlag(State_Selected, active);
+                    checkmarkOpt.state.setFlag(State_Enabled, enabled);
+                    if (widgetSize == QAquaSizeMini)
+                        checkmarkOpt.state |= State_Mini;
+                    else if (widgetSize == QAquaSizeSmall)
+                        checkmarkOpt.state |= State_Small;
+
+                    // We let drawPrimitive(PE_IndicatorMenuCheckMark) pick the right color
+                    checkmarkOpt.palette.setColor(QPalette::HighlightedText, p->pen().color());
+                    checkmarkOpt.palette.setColor(QPalette::Text, p->pen().color());
+
+                    proxy()->drawPrimitive(PE_IndicatorMenuCheckMark, &checkmarkOpt, p, w);
                 }
+                if (!mi->icon.isNull()) {
+                    QIcon::Mode mode = (mi->state & State_Enabled) ? QIcon::Normal
+                                                                   : QIcon::Disabled;
+                    // Always be normal or disabled to follow the Mac style.
+                    int smallIconSize = proxy()->pixelMetric(PM_SmallIconSize);
+                    QSize iconSize(smallIconSize, smallIconSize);
+#if QT_CONFIG(combobox)
+                    if (const QComboBox *comboBox = qobject_cast<const QComboBox *>(w)) {
+                        iconSize = comboBox->iconSize();
+                    }
 #endif
-                QPixmap pixmap = mi->icon.pixmap(window, iconSize, mode);
-                int pixw = pixmap.width() / pixmap.devicePixelRatio();
-                int pixh = pixmap.height() / pixmap.devicePixelRatio();
-                QRect cr(xpos, contentRect.y(), checkcol, contentRect.height());
-                QRect pmr(0, 0, pixw, pixh);
-                pmr.moveCenter(cr.center());
-                p->drawPixmap(pmr.topLeft(), pixmap);
-                xpos += pixw + 6;
+                    QPixmap pixmap = mi->icon.pixmap(window, iconSize, mode);
+                    int pixw = pixmap.width() / pixmap.devicePixelRatio();
+                    int pixh = pixmap.height() / pixmap.devicePixelRatio();
+                    QRect cr(xpos, contentRect.y(), checkcol, contentRect.height());
+                    QRect pmr(0, 0, pixw, pixh);
+                    pmr.moveCenter(cr.center());
+                    p->drawPixmap(pmr.topLeft(), pixmap);
+                    xpos += pixw + 6;
+                }
             }
 
             QString s = mi->text;
             if (!s.isEmpty()) {
                 int t = s.indexOf(QLatin1Char('\t'));
-                int text_flags = Qt::AlignRight | Qt::AlignVCenter | Qt::TextHideMnemonic
+                int text_flags = Qt::AlignVCenter | Qt::TextHideMnemonic
                                  | Qt::TextSingleLine | Qt::AlignAbsolute;
                 int yPos = contentRect.y();
                 if (widgetSize == QAquaSizeMini)
@@ -4544,7 +4552,7 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                     p->setFont(qt_app_fonts_hash()->value("QMenuItem", p->font()));
                     int xp = contentRect.right() - tabwidth - macRightBorder
                              - macItemHMargin - macItemFrame + 1;
-                    p->drawText(xp, yPos, tabwidth, contentRect.height(), text_flags,
+                    p->drawText(xp, yPos, tabwidth, contentRect.height(), text_flags | Qt::AlignRight,
                                 s.mid(t + 1));
                     s = s.left(t);
                 }
@@ -4557,9 +4565,32 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
                 // and then the combo inherits it and passes it onward. At that point the resolve mask
                 // is very, very weak. This makes it stonger.
                 myFont.setPointSizeF(QFontInfo(mi->font).pointSizeF());
-                p->setFont(myFont);
-                p->drawText(xpos, yPos, contentRect.width() - xm - tabwidth + 1,
-                            contentRect.height(), text_flags ^ Qt::AlignRight, s);
+                if (mi->menuItemType == QStyleOptionMenuItem::Separator) {
+                    // render the text as much as possible as QCocoaMenuItem does
+                    // for native menubar menu items
+                    myFont.setUnderline(true);
+                    myFont.setWeight(QFont::DemiBold);
+                    myFont.setLetterSpacing(QFont::PercentageSpacing, 95);
+                    // use an appropriate pen:
+                    p->setPen(mi->palette.color(QPalette::Disabled, QPalette::Text));
+                    p->setFont(myFont);
+                    // draw the separator line above the section title text
+                    QRect lr(mi->rect);
+                    lr.translate(0, - p->fontMetrics().ascent() / 2 - 5);
+                    if (lr.y() >= 0) {
+                        // draw the overlying separator line only if not the 1st thing in the menu
+                        HIRect hiLr = qt_hirectForQRect(lr);
+                        HIThemeDrawMenuSeparator(&hiLr, &hiLr, &mdi,
+                                             cg, kHIThemeOrientationNormal);
+                    }
+                    // draw the text left-aligned w.r.t. the icon location
+                    p->drawText(contentRect.x() + macItemHMargin, yPos, contentRect.width(),
+                                contentRect.height(), text_flags | Qt::AlignLeft, s);
+                } else {
+                    p->setFont(myFont);
+                    p->drawText(xpos, yPos, contentRect.width() - xm - tabwidth + 1,
+                                contentRect.height(), text_flags | Qt::AlignLeft, s);
+                }
                 p->restore();
             }
         }
@@ -6780,10 +6811,16 @@ QSize QMacStyle::sizeFromContents(ContentsType ct, const QStyleOption *opt,
             int w = sz.width(),
                 h = sz.height();
             if (mi->menuItemType == QStyleOptionMenuItem::Separator) {
-                w = 10;
                 SInt16 ash;
                 GetThemeMenuSeparatorHeight(&ash);
                 h = ash;
+                if (!mi->text.isEmpty()) {
+                    // make room for the overlying separator line and 
+                    // don't change the base width .
+                    h += mi->fontMetrics.height() / 2 + 4;
+                } else {
+                    w = 10;
+                }
             } else {
                 h = mi->fontMetrics.height() + 2;
                 if (!mi->icon.isNull()) {
diff --git a/qtbase/src/widgets/widgets/qmenu.cpp b/qtbase/src/widgets/widgets/qmenu.cpp
index cf306e6..0653330 100644
--- a/qtbase/src/widgets/widgets/qmenu.cpp
+++ b/qtbase/src/widgets/widgets/qmenu.cpp
@@ -1933,6 +1933,52 @@ QAction *QMenu::addSeparator()
     return action;
 }
 
+#ifdef Q_OS_MACOS
+static bool isNativeMenubarMenu(const QMenu *m)
+{   bool ret = false;
+    QSet<const QMenu*> checkList;
+    if (m->menuAction()) {
+        QAction *mAct = m->menuAction();
+        foreach (const QWidget *w, mAct->associatedWidgets()) {
+            if (w == m) {
+                goto done;
+            }
+            if (const QMenuBar *mb = qobject_cast<const QMenuBar*>(w)) {
+                ret = mb->isNativeMenuBar();
+                goto done;
+            }
+            else if (const QMenu *mm = qobject_cast<const QMenu*>(w)) {
+                if (checkList.contains(mm)) {
+                    continue;
+                }
+                checkList += mm;
+                if (isNativeMenubarMenu(mm)) {
+                    ret = true;
+                    goto done;
+                }
+            }
+        }
+    }
+done:;
+    return ret;
+}
+#endif
+
+static bool qMenuRendersSections(const QMenu *m)
+{
+    bool ret = false;
+    if (m) {
+#ifdef Q_OS_MACOS
+        // on Mac menus in the native menubar will never render sections properly,
+        // regardless of the style in use
+        ret = m->style()->styleHint(QStyle::SH_Menu_SupportsSections) || isNativeMenubarMenu(m);
+#else
+        ret = m->style()->styleHint(QStyle::SH_Menu_SupportsSections);
+#endif
+    }
+    return ret;
+}
+
 /*!
     \since 5.1
 
@@ -1943,7 +1989,8 @@ QAction *QMenu::addSeparator()
 
     The rendering of the hint is style and platform dependent. Widget
     styles can use the text information in the rendering for sections,
-    or can choose to ignore it and render sections like simple separators.
+    or can choose to ignore it and render sections like simple separators,
+    depending on whether the platform supports texted separators.
 
     QMenu takes ownership of the returned QAction.
 
@@ -1952,7 +1999,18 @@ QAction *QMenu::addSeparator()
 QAction *QMenu::addSection(const QString &text)
 {
     QAction *action = new QAction(text, this);
+    if (!qMenuRendersSections(this)) {
+        // add the text item without turning it into a separator first
+        // but deactivated, also to make it visually distinct
+        action->setEnabled(false);
+        action->setMenuRole(QAction::NoRole);
+        addAction(action);
+        // create a 2nd action that will be returned and have the expected properties
+        // but show up as a simple separator on this platform
+        action = new QAction(text, this);
+    }
     action->setSeparator(true);
+    action->setMenuRole(QAction::NoRole);
     addAction(action);
     return action;
 }
@@ -1967,7 +2025,8 @@ QAction *QMenu::addSection(const QString &text)
 
     The rendering of the hints is style and platform dependent. Widget
     styles can use the text and icon information in the rendering for sections,
-    or can choose to ignore them and render sections like simple separators.
+    or can choose to ignore them and render sections like simple separators,
+    depending on whether the platform supports texted separators.
 
     QMenu takes ownership of the returned QAction.
 
@@ -1976,7 +2035,18 @@ QAction *QMenu::addSection(const QString &text)
 QAction *QMenu::addSection(const QIcon &icon, const QString &text)
 {
     QAction *action = new QAction(icon, text, this);
+    if (!qMenuRendersSections(this)) {
+        // add the text item without turning it into a separator first
+        // but deactivated, also to make it visually distinct
+        action->setEnabled(false);
+        action->setMenuRole(QAction::NoRole);
+        addAction(action);
+        // create a 2nd action that will be returned and have the expected properties
+        // but show up as a simple separator on this platform
+        action = new QAction(icon, text, this);
+    }
     action->setSeparator(true);
+    action->setMenuRole(QAction::NoRole);
     addAction(action);
     return action;
 }
