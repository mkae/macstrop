diff --git a/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes.cpp b/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes.cpp
index 0bcd346..a417d19 100644
--- a/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes.cpp
+++ b/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes.cpp
@@ -43,6 +43,8 @@
 #include <QtCore/QFileInfo>
 #include <QtCore/QFile>
 #include <QtCore/QDebug>
+#undef QT_NO_DEBUG
+#undef QT_NO_DEBUG_OUTPUT
 #include <QtCore/QHash>
 #include <QtCore/QLoggingCategory>
 #include <QtCore/QSettings>
@@ -53,6 +55,13 @@
 #include <qpa/qplatformintegration.h>
 #include <qpa/qplatformservices.h>
 #include <qpa/qplatformdialoghelper.h>
+
+#ifdef Q_OS_OSX
+// platformsupport plugins shouldn't use DBus on OS X
+// and systray functionality doesn't depend on it
+#define QT_NO_DBUS
+#endif
+
 #if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
 #include "QtPlatformSupport/private/qdbustrayicon_p.h"
 #include "QtPlatformSupport/private/qdbusplatformmenu_p.h"
@@ -692,7 +701,9 @@ QPlatformTheme *QGenericUnixTheme::createUnixTheme(const QString &name)
 #endif
     if (name == QLatin1String(QGnomeTheme::name))
         return new QGnomeTheme;
-    return Q_NULLPTR;
+//     return Q_NULLPTR;
+    // On OS X prefer to return something valid always?
+    return new QGenericUnixTheme;
 }
 
 QStringList QGenericUnixTheme::themeNames()
diff --git a/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes_p.h b/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes_p.h
index 77aa04f..35f8304 100644
--- a/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes_p.h
+++ b/qtbase/src/platformsupport/themes/genericunix/qgenericunixthemes_p.h
@@ -79,7 +79,7 @@ public:
     QVariant themeHint(ThemeHint hint) const Q_DECL_OVERRIDE;
 
     static QStringList xdgIconThemePaths();
-#if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
+#if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON) && !defined(Q_OS_OSX)
     QPlatformSystemTrayIcon *createPlatformSystemTrayIcon() const Q_DECL_OVERRIDE;
 #endif
 
@@ -101,7 +101,7 @@ public:
     const QPalette *palette(Palette type = SystemPalette) const Q_DECL_OVERRIDE;
 
     const QFont *font(Font type) const Q_DECL_OVERRIDE;
-#if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
+#if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON) && !defined(Q_OS_OSX)
     QPlatformSystemTrayIcon *createPlatformSystemTrayIcon() const Q_DECL_OVERRIDE;
 #endif
 
@@ -121,7 +121,7 @@ public:
     QString standardButtonText(int button) const Q_DECL_OVERRIDE;
 
     virtual QString gtkFontName() const;
-#if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON)
+#if !defined(QT_NO_DBUS) && !defined(QT_NO_SYSTEMTRAYICON) && !defined(Q_OS_OSX)
     QPlatformSystemTrayIcon *createPlatformSystemTrayIcon() const Q_DECL_OVERRIDE;
 #endif
 
diff --git a/qtbase/src/platformsupport/themes/themes.pri b/qtbase/src/platformsupport/themes/themes.pri
index adee852..797ac77 100644
--- a/qtbase/src/platformsupport/themes/themes.pri
+++ b/qtbase/src/platformsupport/themes/themes.pri
@@ -1,3 +1,3 @@
-unix:!mac {
+unix {
     include($$PWD/genericunix/genericunix.pri)
 }
diff --git a/qtbase/src/plugins/platforms/cocoa/qcocoaintegration.mm b/qtbase/src/plugins/platforms/cocoa/qcocoaintegration.mm
index 659c803..74a32c7 100644
--- a/qtbase/src/plugins/platforms/cocoa/qcocoaintegration.mm
+++ b/qtbase/src/plugins/platforms/cocoa/qcocoaintegration.mm
@@ -54,6 +54,8 @@
 
 #include <IOKit/graphics/IOGraphicsLib.h>
 
+#include <private/qgenericunixthemes_p.h>
+
 static void initResources()
 {
     Q_INIT_RESOURCE(qcocoaresources);
@@ -538,14 +540,33 @@ QCocoaDrag *QCocoaIntegration::drag() const
 
 QStringList QCocoaIntegration::themeNames() const
 {
-    return QStringList(QLatin1String(QCocoaTheme::name));
+    QStringList themes;
+    themes.push_back(QLatin1String(QCocoaTheme::name));
+    const QByteArray kdeSessionVersion = qgetenv("KDE_SESSION_VERSION");
+    const int kdeVersion = kdeSessionVersion.toInt();
+    if (kdeVersion >= 4)
+        themes.push_back(QLatin1String("kde"));
+    return themes;
 }
 
 QPlatformTheme *QCocoaIntegration::createPlatformTheme(const QString &name) const
 {
-    if (name == QLatin1String(QCocoaTheme::name))
+    // qDebug() << "QCocoaIntegration::createPlatformTheme(" << n << ")";
+    if (name == QLatin1String(QCocoaTheme::name)) {
+        // qDebug() << "returning the QCocoaTheme";
         return new QCocoaTheme;
-    return QPlatformIntegration::createPlatformTheme(name);
+    }
+    QPlatformTheme *unixTheme = QGenericUnixTheme::createUnixTheme(name);
+    if (unixTheme) {
+        qDebug() << "returning QGenericUnixTheme" << unixTheme;
+        return unixTheme;
+    }
+    else {
+        unixTheme = QPlatformIntegration::createPlatformTheme(name);
+        qDebug() << "returning QPlatformIntegration::createPlatformTheme(" << name << ")=" << unixTheme;
+        return unixTheme;
+//         return QPlatformIntegration::createPlatformTheme(name);
+    }
 }
 
 QCocoaServices *QCocoaIntegration::services() const
diff --git a/qtbase/src/widgets/styles/qmacstyle_mac.mm b/qtbase/src/widgets/styles/qmacstyle_mac.mm
index 8f724df..54afac8 100644
--- a/qtbase/src/widgets/styles/qmacstyle_mac.mm
+++ b/qtbase/src/widgets/styles/qmacstyle_mac.mm
@@ -4294,7 +4294,10 @@ void QMacStyle::drawControl(ControlElement ce, const QStyleOption *opt, QPainter
             // (QComboMenuItem is internal and should never be seen by the
             // outside world, unless they read the source, in which case, it's
             // their own fault).
-            bool nonDefaultFont = p->font() != qt_app_fonts_hash()->value("QComboMenuItem");
+//             bool nonDefaultFont = p->font() != qt_app_fonts_hash()->value("QComboMenuItem");
+            // We support non-native themes in this patched Qt version, so we cannot rely on the result
+            // of the test above. It's best to presume it always returns true.
+            bool nonDefaultFont = true;
             bool isSelectedAndNeedsShadow = selected && !usingYosemiteOrLater;
             if (isSelectedAndNeedsShadow || verticalTabs || nonDefaultFont || !tab->icon.isNull()
                 || !myTab.leftButtonSize.isEmpty() || !myTab.rightButtonSize.isEmpty()) {
