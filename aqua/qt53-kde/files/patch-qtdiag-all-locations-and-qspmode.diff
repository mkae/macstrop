diff --git a/qttools/src/qtdiag/main.cpp b/qttools/src/qtdiag/main.cpp
index 14eae6b..d90141b 100644
--- a/qttools/src/qtdiag/main.cpp
+++ b/qttools/src/qtdiag/main.cpp
@@ -30,6 +30,7 @@
 
 #include <QtGui/QGuiApplication>
 #include <QtCore/QCommandLineParser>
+#include <QtCore/QStandardPaths>
 
 #include <iostream>
 #include <string>
@@ -49,10 +50,18 @@ int main(int argc, char **argv)
     const QCommandLineOption noGlOption(QStringLiteral("no-gl"), QStringLiteral("Do not output GL information"));
     const QCommandLineOption glExtensionOption(QStringLiteral("gl-extensions"), QStringLiteral("List GL extensions"));
     const QCommandLineOption fontOption(QStringLiteral("fonts"), QStringLiteral("Output list of fonts"));
+    const QCommandLineOption qspTestModeOption(QStringLiteral("qsp-testmode"), QStringLiteral("output the QStandardPaths locations in testing mode"));
+#ifdef Q_OS_MACOS
+    const QCommandLineOption qspXDGModeOption(QStringLiteral("qsp-xdgmode"), QStringLiteral("output the QStandardPaths locations in XDG/Freedesktop compliant mode"));
+#endif
     commandLineParser.setApplicationDescription(QStringLiteral("Prints diagnostic output about the Qt library."));
     commandLineParser.addOption(noGlOption);
     commandLineParser.addOption(glExtensionOption);
     commandLineParser.addOption(fontOption);
+    commandLineParser.addOption(qspTestModeOption);
+#ifdef Q_OS_MACOS
+    commandLineParser.addOption(qspXDGModeOption);
+#endif
     commandLineParser.addHelpOption();
     commandLineParser.process(app);
     unsigned flags = commandLineParser.isSet(noGlOption) ? 0u : unsigned(QtDiagGl);
@@ -60,6 +69,14 @@ int main(int argc, char **argv)
         flags |= QtDiagGlExtensions;
     if (commandLineParser.isSet(fontOption))
         flags |= QtDiagFonts;
+    if (commandLineParser.isSet(qspTestModeOption))
+        flags |= QtDiagQSPTestMode;
+#ifdef Q_OS_MACOS
+    if (commandLineParser.isSet(qspXDGModeOption)) {
+        flags |= QtDiagQSPXDGMode;
+        QStandardPaths::setALTLocationsEnabled(true);
+    }
+#endif
 
     std::wcout << qtDiag(flags).toStdWString();
     return 0;
diff --git a/qttools/src/qtdiag/qtdiag.cpp b/qttools/src/qtdiag/qtdiag.cpp
index d12dd69..359c5f2 100644
--- a/qttools/src/qtdiag/qtdiag.cpp
+++ b/qttools/src/qtdiag/qtdiag.cpp
@@ -191,7 +191,7 @@ void dumpGlInfo(QTextStream &str, bool listExtensions)
 // Dump values of QStandardPaths, indicate writable locations by asterisk.
 static void dumpStandardLocation(QTextStream &str, QStandardPaths::StandardLocation location)
 {
-    str << '"' << QStandardPaths::displayName(location) << '"';
+    str << '"' << QStandardPaths::displayName(location) << "\" =";
     const QStringList directories = QStandardPaths::standardLocations(location);
     const QString writableDirectory = QStandardPaths::writableLocation(location);
     const int writableIndex = writableDirectory.isEmpty() ? -1 : directories.indexOf(writableDirectory);
@@ -374,7 +374,17 @@ QString qtDiag(unsigned flags)
     DUMP_LIBRARYPATH(str, TestsPath)
     DUMP_LIBRARYPATH(str, SettingsPath)
 
-    str << "\nStandard paths [*...* denote writable entry]:\n";
+    if (flags & QtDiagQSPTestMode) {
+        QStandardPaths::enableTestMode(true);
+        str << "\nStandard paths, testing mode [*...* denote writable entry]:\n";
+    } else {
+        str << "\nStandard paths [*...* denote writable entry]:\n";
+    }
+#ifdef Q_OS_MACOS
+    if ((flags & QtDiagQSPXDGMode) || QStandardPaths::isALTLocationsEnabled()) {
+        str << "\t- QStandardPaths is in XDG/Freedesktop compliant mode -\n";
+    }
+#endif
     DUMP_STANDARDPATH(str, DesktopLocation)
     DUMP_STANDARDPATH(str, DocumentsLocation)
     DUMP_STANDARDPATH(str, FontsLocation)
@@ -384,6 +394,7 @@ QString qtDiag(unsigned flags)
     DUMP_STANDARDPATH(str, PicturesLocation)
     DUMP_STANDARDPATH(str, TempLocation)
     DUMP_STANDARDPATH(str, HomeLocation)
+    DUMP_STANDARDPATH(str, DataLocation)
     DUMP_STANDARDPATH(str, AppLocalDataLocation)
     DUMP_STANDARDPATH(str, CacheLocation)
     DUMP_STANDARDPATH(str, GenericDataLocation)
@@ -582,8 +593,6 @@ QString qtDiag(unsigned flags)
         dumpGlInfo(str, flags & QtDiagGlExtensions);
         str << "\n\n";
     }
-#else
-    Q_UNUSED(flags)
 #endif // !QT_NO_OPENGL
 
     // On Windows, this will provide addition GPU info similar to the output of dxdiag.
diff --git a/qttools/src/qtdiag/qtdiag.h b/qttools/src/qtdiag/qtdiag.h
index b073297..0b12d6f 100644
--- a/qttools/src/qtdiag/qtdiag.h
+++ b/qttools/src/qtdiag/qtdiag.h
@@ -36,7 +36,9 @@ QT_BEGIN_NAMESPACE
 enum QtDiagFlags {
     QtDiagGl = 0x1,
     QtDiagGlExtensions = 0x2,
-    QtDiagFonts = 0x4
+    QtDiagFonts = 0x4,
+    QtDiagQSPTestMode = (1<<3),
+    QtDiagQSPXDGMode = (1<<4),
 };
 
 QString qtDiag(unsigned flags = 0);
