From c109a95a067af783e48f93d1cdeca870cda98878 Mon Sep 17 00:00:00 2001
From: Alexandru Croitor <alexandru.croitor@qt.io>
Date: Fri, 1 Jul 2016 14:08:55 +0200
Subject: [PATCH] Fix compilation on OS X 10.9 with 10.10 SDK.

This patch allows conditionally disabling Force Touch API usage on
OS X, if the OS X SDK does contain the aforementioned API. The API
is only included starting with SDK version 10.10.3.

Task-number: QTBUG-54486
Change-Id: I3beefb500d1c6a70e1bcf3578dbe091834a1dc2d
Reviewed-by: Allan Sandfeld Jensen <allan.jensen@qt.io>
---
 chromium/base/mac/sdk_forward_declarations.h                       | 2 ++
 chromium/build/common.gypi                                         | 7 +++++++
 .../content/browser/renderer_host/render_widget_host_view_mac.h    | 2 ++
 .../content/browser/renderer_host/render_widget_host_view_mac.mm   | 2 ++
 chromium/ui/base/cocoa/base_view.h                                 | 6 ++++++
 chromium/ui/base/cocoa/base_view.mm                                | 4 ++++
 6 files changed, 23 insertions(+)

diff --git a/qt5/src/3rdparty/chromium/base/mac/sdk_forward_declarations.h b/qt5/src/3rdparty/chromium/base/mac/sdk_forward_declarations.h
index 769d762..0a018fe 100644
--- a/qt5/src/3rdparty/chromium/base/mac/sdk_forward_declarations.h
+++ b/qt5/src/3rdparty/chromium/base/mac/sdk_forward_declarations.h
@@ -292,7 +292,9 @@ BASE_EXPORT extern NSString* const NSAppearanceNameVibrantDark;
     MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_7
 
 @interface NSEvent (LionSDK)
+#if !defined(QT_DISABLE_FORCE_TOUCH)
 @property(readonly) NSInteger stage;
+#endif
 + (BOOL)isSwipeTrackingFromScrollEventsEnabled;
 - (NSEventPhase)momentumPhase;
 - (NSEventPhase)phase;
diff --git a/qt5/src/3rdparty/chromium/build/common.gypi b/qt5/src/3rdparty/chromium/build/common.gypi
index 26c1d6c..9f4b575 100644
--- a/qt5/src/3rdparty/chromium/build/common.gypi
+++ b/qt5/src/3rdparty/chromium/build/common.gypi
@@ -731,6 +731,9 @@
       # By default include non-appstore-compliant code.
       'appstore_compliant_code%': 0,
 
+      # By default enable force touch API. It's only supported with OSX SDK 10.10.3+.
+      'disable_force_touch%': 0,
+
       'conditions': [
         # A flag for POSIX platforms
         ['OS=="win"', {
@@ -1276,6 +1279,7 @@
     'enable_hangout_services_extension%' : '<(enable_hangout_services_extension)',
     'proprietary_codecs%': '<(proprietary_codecs)',
     'appstore_compliant_code%': '<(appstore_compliant_code)',
+    'disable_force_touch%': '<(disable_force_touch)',
     'use_goma%': '<(use_goma)',
     'gomadir%': '<(gomadir)',
     'use_lto%': '<(use_lto)',
@@ -2773,6 +2777,9 @@
       ['appstore_compliant_code==1', {
         'defines': ['USE_APPSTORE_COMPLIANT_CODE'],
       }],
+      ['disable_force_touch==1', {
+        'defines': ['QT_DISABLE_FORCE_TOUCH'],
+      }],
       ['enable_viewport==1', {
         'defines': ['ENABLE_VIEWPORT'],
       }],
diff --git a/qt5/src/3rdparty/chromium/content/browser/renderer_host/render_widget_host_view_mac.h b/qt5/src/3rdparty/chromium/content/browser/renderer_host/render_widget_host_view_mac.h
index 459f16a..6631ae2 100644
--- a/qt5/src/3rdparty/chromium/content/browser/renderer_host/render_widget_host_view_mac.h
+++ b/qt5/src/3rdparty/chromium/content/browser/renderer_host/render_widget_host_view_mac.h
@@ -210,7 +210,9 @@ class Layer;
 - (void)updateCursor:(NSCursor*)cursor;
 - (NSRect)firstViewRectForCharacterRange:(NSRange)theRange
                              actualRange:(NSRangePointer)actualRange;
+#if !defined(QT_DISABLE_FORCE_TOUCH)
 - (void)quickLookWithEvent:(NSEvent*)event;
+#endif
 - (void)showLookUpDictionaryOverlayAtPoint:(NSPoint)point;
 - (void)showLookUpDictionaryOverlayFromRange:(NSRange)range
                                   targetView:(NSView*)targetView;
diff --git a/qt5/src/3rdparty/chromium/content/browser/renderer_host/render_widget_host_view_mac.mm b/qt5/src/3rdparty/chromium/content/browser/renderer_host/render_widget_host_view_mac.mm
index ef38d30..815c76c 100644
--- a/qt5/src/3rdparty/chromium/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/qt5/src/3rdparty/chromium/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -2308,9 +2308,11 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
     [NSCursor setHiddenUntilMouseMoves:YES];
 }
 
+#if !defined(QT_DISABLE_FORCE_TOUCH)
 - (void)forceTouchEvent:(NSEvent*)theEvent {
   [self quickLookWithEvent:theEvent];
 }
+#endif
 
 - (void)shortCircuitScrollWheelEvent:(NSEvent*)event {
   DCHECK(base::mac::IsOSLionOrLater());
diff --git a/qt5/src/3rdparty/chromium/ui/base/cocoa/base_view.h b/qt5/src/3rdparty/chromium/ui/base/cocoa/base_view.h
index 0675cae..751f588 100644
--- a/qt5/src/3rdparty/chromium/ui/base/cocoa/base_view.h
+++ b/qt5/src/3rdparty/chromium/ui/base/cocoa/base_view.h
@@ -8,7 +8,9 @@
 #import <Cocoa/Cocoa.h>
 
 #include "base/mac/scoped_nsobject.h"
+#if !defined(QT_DISABLE_FORCE_TOUCH)
 #include "base/mac/sdk_forward_declarations.h"
+#endif
 #import "ui/base/cocoa/tracking_area.h"
 #include "ui/base/ui_base_export.h"
 #include "ui/gfx/geometry/rect.h"
@@ -29,7 +31,9 @@ UI_BASE_EXPORT
   ui::ScopedCrTrackingArea trackingArea_;
   BOOL dragging_;
   base::scoped_nsobject<NSEvent> pendingExitEvent_;
+#if !defined(QT_DISABLE_FORCE_TOUCH)
   NSInteger pressureEventStage_;
+#endif
 }
 
 // Override these methods (mouseEvent, keyEvent, forceTouchEvent) in a
@@ -40,7 +44,9 @@ UI_BASE_EXPORT
 // kEventNotHandled if it should be forwarded to BaseView's super class.
 - (EventHandled)keyEvent:(NSEvent *)theEvent;
 
+#if !defined(QT_DISABLE_FORCE_TOUCH)
 - (void)forceTouchEvent:(NSEvent*)theEvent;
+#endif
 
 // Useful rect conversions (doing coordinate flipping)
 - (gfx::Rect)flipNSRectToRect:(NSRect)rect;
diff --git a/qt5/src/3rdparty/chromium/ui/base/cocoa/base_view.mm b/qt5/src/3rdparty/chromium/ui/base/cocoa/base_view.mm
index 9642fbe..f1c3ca3 100644
--- a/qt5/src/3rdparty/chromium/ui/base/cocoa/base_view.mm
+++ b/qt5/src/3rdparty/chromium/ui/base/cocoa/base_view.mm
@@ -78,9 +78,11 @@ NSString* kSelectionDirection = @"Chromium.kSelectionDirection";
   return kEventNotHandled;
 }
 
+#if !defined(QT_DISABLE_FORCE_TOUCH)
 - (void)forceTouchEvent:(NSEvent*)theEvent {
   // This method left intentionally blank.
 }
+#endif
 
 - (void)mouseDown:(NSEvent*)theEvent {
   dragging_ = YES;
@@ -170,6 +172,7 @@ NSString* kSelectionDirection = @"Chromium.kSelectionDirection";
     [super keyUp:theEvent];
 }
 
+#if !defined(QT_DISABLE_FORCE_TOUCH)
 - (void)pressureChangeWithEvent:(NSEvent*)theEvent {
   NSInteger newStage = [theEvent stage];
   if (pressureEventStage_ == newStage)
@@ -182,6 +185,7 @@ NSString* kSelectionDirection = @"Chromium.kSelectionDirection";
   }
   pressureEventStage_ = newStage;
 }
+#endif
 
 - (void)flagsChanged:(NSEvent*)theEvent {
   if ([self keyEvent:theEvent] != kEventHandled)
-- 
2.7.4

From 9e65aaf4e0d0c5b5d927f2fbc5c8aa052bae24b8 Mon Sep 17 00:00:00 2001
From: Alexandru Croitor <alexandru.croitor@qt.io>
Date: Fri, 1 Jul 2016 14:14:41 +0200
Subject: [PATCH] Fix building on OS X 10.9 with 10.10 SDK

Previously building on OS X 10.9 was only allowed with a 10.10.3 SDK.
But there is no supported version of Xcode on 10.9 that would ship with
that SDK, which lead to the fact that there was no way to compile
WebEngine with an officialy provided toolchain.

This patch lowers the requirement of the SDK to 10.10, at the expense
of disabling usage of API that was added in the 10.10.3 SDK release
(Force Touch API).

The required minimum Xcode version is thus bumped to 6.1, and the
documentation is updated accordingly.

Task-number: QTBUG-54486
Change-Id: I025caa336ceac5b8ea76ef451eb5e6b78abfe0c9
Reviewed-by: Allan Sandfeld Jensen <allan.jensen@qt.io>
---
 src/3rdparty                                          |  2 +-
 src/core/config/mac_osx.pri                           |  5 +++++
 src/webengine/doc/src/qtwebengine-platform-notes.qdoc |  8 +++++++-
 tools/qmake/mkspecs/features/configure.prf            |  3 +++
 tools/qmake/mkspecs/features/functions.prf            | 10 ++++++----
 5 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/qt5/src/core/config/mac_osx.pri b/qt5/src/core/config/mac_osx.pri
index 83ddea2..c447add 100644
--- a/qt5/src/core/config/mac_osx.pri
+++ b/qt5/src/core/config/mac_osx.pri
@@ -1,4 +1,5 @@
 include(common.pri)
+load(functions)
 
 # Reuse the cached sdk version value from mac/sdk.prf if available
 # otherwise query for it.
@@ -26,5 +27,9 @@ GYP_CONFIG += \
     clang_use_chrome_plugins=0 \
     enable_widevine=1
 
+# Force touch API is used in 49-based Chromium, which is included starting with 10.10.3 SDK, so we
+# disable the API usage if the SDK version is lower.
+!isMinOSXSDKVersion(10, 10, 3): GYP_CONFIG += disable_force_touch=1
+
 QMAKE_MAC_SDK_PATH = "$$eval(QMAKE_MAC_SDK.$${QMAKE_MAC_SDK}.path)"
 exists($$QMAKE_MAC_SDK_PATH): GYP_CONFIG += mac_sdk_path=\"$${QMAKE_MAC_SDK_PATH}\"
diff --git a/qt5/src/webengine/doc/src/qtwebengine-platform-notes.qdoc b/qt5/src/webengine/doc/src/qtwebengine-platform-notes.qdoc
index ecec53b..989c69d 100644
--- a/qt5/src/webengine/doc/src/qtwebengine-platform-notes.qdoc
+++ b/qt5/src/webengine/doc/src/qtwebengine-platform-notes.qdoc
@@ -114,7 +114,13 @@
 
     \section2 OS X
 
-    On OS X, Xcode version 5.1 or later on OS X 10.9 or later is required.
+    On OS X, the following is required:
+
+    \list
+        \li OS X 10.9 or later
+        \li Xcode 6.1 or later
+        \li OS X 10.10 SDK or later
+    \endlist
 
     \note Qt WebEngine cannot be built for the 32-bit mode of OS X (using the
     \c macx-clang-32 \c mkspec).
diff --git a/qt5/tools/qmake/mkspecs/features/configure.prf b/qt5/tools/qmake/mkspecs/features/configure.prf
index 7ef4b85..cb6fb8f 100644
--- a/qt5/tools/qmake/mkspecs/features/configure.prf
+++ b/qt5/tools/qmake/mkspecs/features/configure.prf
@@ -128,6 +128,9 @@ defineTest(finalizeConfigure) {
         } else {
             log("AppStore Compliant ............... Not enabled         (Default, enable with WEBENGINE_CONFIG+=use_appstore_compliant_code)$${EOL}")
         }
+        !isMinOSXSDKVersion(10, 10, 3) {
+            log("Force Touch API usage ............ Not enabled         (Because the OS X SDK version to be used \"$${WEBENGINE_OSX_SDK_PRODUCT_VERSION}\" is lower than the required \"10.10.3\")$${EOL}")
+        }
     }
 }
 
diff --git a/qt5/tools/qmake/mkspecs/features/functions.prf b/qt5/tools/qmake/mkspecs/features/functions.prf
index 33bebb4..a5cf5ca 100644
--- a/qt5/tools/qmake/mkspecs/features/functions.prf
+++ b/qt5/tools/qmake/mkspecs/features/functions.prf
@@ -23,8 +23,8 @@ defineTest(isPlatformSupported) {
       skipBuild("Qt WebEngine on Windows must be built on a 64-bit machine.")
     }
   } else:osx {
-    lessThan(QMAKE_XCODE_VERSION, 5.1) {
-      skipBuild("Using XCode version $$QMAKE_XCODE_VERSION, but at least version 5.1 is required to build Qt WebEngine.")
+    lessThan(QMAKE_XCODE_VERSION, 6.1) {
+      skipBuild("Using XCode version $$QMAKE_XCODE_VERSION, but at least version 6.1 is required to build Qt WebEngine.")
       return(false)
     }
     # We require OS X 10.9 (darwin version 13.0.0) or newer
@@ -33,8 +33,8 @@ defineTest(isPlatformSupported) {
       skipBuild("Qt WebEngine requires OS X version 10.9 or newer.")
       return(false)
     }
-    !isMinOSXSDKVersion(10, 10, 3): {
-      skipBuild("Qt WebEngine requires an OS X SDK version 10.10.3 or newer. Current version is $${WEBENGINE_OSX_SDK_PRODUCT_VERSION}.")
+    !isMinOSXSDKVersion(10, 10): {
+      skipBuild("Qt WebEngine requires an OS X SDK version of 10.10 or newer. Current version is $${WEBENGINE_OSX_SDK_PRODUCT_VERSION}.")
       return(false)
     }
   } else {
@@ -101,6 +101,7 @@ defineTest(isMinOSXSDKVersion) {
     requested_major = $$1
     requested_minor = $$2
     requested_patch = $$3
+    isEmpty(requested_patch): requested_patch = 0
     WEBENGINE_OSX_SDK_PRODUCT_VERSION = $$system("/usr/bin/xcodebuild -sdk $$QMAKE_MAC_SDK -version ProductVersion 2>/dev/null")
     export(WEBENGINE_OSX_SDK_PRODUCT_VERSION)
     isEmpty(WEBENGINE_OSX_SDK_PRODUCT_VERSION) {
@@ -110,6 +111,7 @@ defineTest(isMinOSXSDKVersion) {
     major_version = $$section(WEBENGINE_OSX_SDK_PRODUCT_VERSION, ., 0, 0)
     minor_version = $$section(WEBENGINE_OSX_SDK_PRODUCT_VERSION, ., 1, 1)
     patch_version = $$section(WEBENGINE_OSX_SDK_PRODUCT_VERSION, ., 2, 2)
+    isEmpty(patch_version): patch_version = 0
 
     greaterThan(major_version, $$requested_major):return(true)
     equals(major_version, $$requested_major):greaterThan(minor_version, $$requested_minor):return(true)
-- 
2.7.4

From 1633f5a176320faa162c1a55df6c8bd66a9865d6 Mon Sep 17 00:00:00 2001
From: Alexandru Croitor <alexandru.croitor@qt.io>
Date: Tue, 21 Jun 2016 11:58:03 +0200
Subject: [PATCH] Fix build with Xcode 5.1.1.

Work around the ambiguous scoped_ptr assignment operator issue.
Fix static_cast<id>'s into __bridge statements.

Change-Id: I89c57e97e8d82f6fd479c27e4d5a6faf2a2bb46e
Task-number: QTBUG-54190
Reviewed-by: Allan Sandfeld Jensen <allan.jensen@qt.io>
---
 chromium/content/browser/compositor/software_output_device_mac.mm | 8 ++++----
 chromium/content/common/gpu/ca_layer_partial_damage_tree_mac.mm   | 2 +-
 chromium/content/common/gpu/ca_layer_tree_mac.mm                  | 2 +-
 chromium/device/bluetooth/bluetooth_socket_mac.mm                 | 7 +++----
 chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm      | 2 +-
 5 files changed, 10 insertions(+), 11 deletions(-)

diff --git a/qt5/src/3rdparty/chromium/content/browser/compositor/software_output_device_mac.mm b/qt5/src/3rdparty/chromium/content/browser/compositor/software_output_device_mac.mm
index e71f678..e266c74 100644
--- a/qt5/src/3rdparty/chromium/content/browser/compositor/software_output_device_mac.mm
+++ b/qt5/src/3rdparty/chromium/content/browser/compositor/software_output_device_mac.mm
@@ -89,10 +89,10 @@ bool SoftwareOutputDeviceMac::EnsureBuffersExist() {
       unsigned pixel_format = 'BGRA';
       unsigned bytes_per_element = 4;
       NSDictionary* options = @{
-        static_cast<id>(kIOSurfaceWidth) : @(pixel_size_.width()),
-        static_cast<id>(kIOSurfaceHeight) : @(pixel_size_.height()),
-        static_cast<id>(kIOSurfacePixelFormat) : @(pixel_format),
-        static_cast<id>(kIOSurfaceBytesPerElement) : @(bytes_per_element),
+        (__bridge id)(kIOSurfaceWidth) : @(pixel_size_.width()),
+        (__bridge id)(kIOSurfaceHeight) : @(pixel_size_.height()),
+        (__bridge id)(kIOSurfacePixelFormat) : @(pixel_format),
+        (__bridge id)(kIOSurfaceBytesPerElement) : @(bytes_per_element),
       };
       io_surfaces_[i].reset(IOSurfaceCreate(base::mac::NSToCFCast(options)));
     }
diff --git a/qt5/src/3rdparty/chromium/content/common/gpu/ca_layer_partial_damage_tree_mac.mm b/qt5/src/3rdparty/chromium/content/common/gpu/ca_layer_partial_damage_tree_mac.mm
index f427389..41e4d50 100644
--- a/qt5/src/3rdparty/chromium/content/common/gpu/ca_layer_partial_damage_tree_mac.mm
+++ b/qt5/src/3rdparty/chromium/content/common/gpu/ca_layer_partial_damage_tree_mac.mm
@@ -60,7 +60,7 @@ class CALayerPartialDamageTree::OverlayPlane {
     if (layer_needs_update) {
       [ca_layer setOpaque:YES];
 
-      id new_contents = static_cast<id>(io_surface.get());
+      id new_contents = (__bridge id)(io_surface.get());
       if ([ca_layer contents] == new_contents)
         [ca_layer setContentsChanged];
       else
diff --git a/qt5/src/3rdparty/chromium/content/common/gpu/ca_layer_tree_mac.mm b/qt5/src/3rdparty/chromium/content/common/gpu/ca_layer_tree_mac.mm
index 8c7d938..d89c05d 100644
--- a/qt5/src/3rdparty/chromium/content/common/gpu/ca_layer_tree_mac.mm
+++ b/qt5/src/3rdparty/chromium/content/common/gpu/ca_layer_tree_mac.mm
@@ -408,7 +408,7 @@ void CALayerTree::ContentLayer::CommitToCA(CALayer* superlayer,
                          update_ca_edge_aa_mask || update_opacity;
 
   if (update_contents) {
-    [ca_layer setContents:static_cast<id>(io_surface.get())];
+    [ca_layer setContents:(__bridge id)(io_surface.get())];
     if ([ca_layer respondsToSelector:(@selector(setContentsScale:))])
       [ca_layer setContentsScale:scale_factor];
   }
diff --git a/qt5/src/3rdparty/chromium/device/bluetooth/bluetooth_socket_mac.mm b/qt5/src/3rdparty/chromium/device/bluetooth/bluetooth_socket_mac.mm
index c82e5d2..d2789d1 100644
--- a/qt5/src/3rdparty/chromium/device/bluetooth/bluetooth_socket_mac.mm
+++ b/qt5/src/3rdparty/chromium/device/bluetooth/bluetooth_socket_mac.mm
@@ -600,12 +600,11 @@ void BluetoothSocketMac::OnSDPQueryComplete(
   connect_callbacks_->error_callback = error_callback;
 
   if (rfcomm_channel_id != kInvalidRfcommChannelId) {
-    channel_ = BluetoothRfcommChannelMac::OpenAsync(
-        this, device, rfcomm_channel_id, &status);
+    channel_.reset(BluetoothRfcommChannelMac::OpenAsync(
+        this, device, rfcomm_channel_id, &status).release());
   } else {
     DCHECK_NE(l2cap_psm, kInvalidL2capPsm);
-    channel_ =
-        BluetoothL2capChannelMac::OpenAsync(this, device, l2cap_psm, &status);
+    channel_.reset(BluetoothL2capChannelMac::OpenAsync(this, device, l2cap_psm, &status).release());
   }
   if (status != kIOReturnSuccess) {
     ReleaseChannel();
diff --git a/qt5/src/3rdparty/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm b/qt5/src/3rdparty/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm
index 135f64c..2c44acc 100644
--- a/qt5/src/3rdparty/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm
+++ b/qt5/src/3rdparty/chromium/ui/accelerated_widget_mac/accelerated_widget_mac.mm
@@ -194,7 +194,7 @@ void AcceleratedWidgetMac::GotIOSurfaceFrame(
   // If there is not a layer for local frames, create one.
   EnsureLocalLayer();
 
-  id new_contents = static_cast<id>(io_surface.get());
+  id new_contents = (__bridge id)(io_surface.get());
 
   if (new_contents && new_contents == [local_layer_ contents]) {
     [local_layer_ setContentsChanged];
-- 
2.7.4

