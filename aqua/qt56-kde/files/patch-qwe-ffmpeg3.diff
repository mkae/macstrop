From b6bfc88709e5abf7d6ad57757c30c51a9ba3df44 Mon Sep 17 00:00:00 2001
From: Allan Sandfeld Jensen <allan.jensen@theqtcompany.com>
Date: Wed, 20 Apr 2016 13:34:42 +0200
Subject: [PATCH] WIP: Build against FFMPEG 3

Updates a few names to match names in FFMPEG 3.

Is missing automatic detection and more testing.

Task-number: QTBUG-52716
Change-Id: I8d8015cc281010b0b1e05047d2b99bf6872c543e
---
 chromium/media/ffmpeg/ffmpeg_common.cc             | 24 +++++++++++-----------
 chromium/media/ffmpeg/ffmpeg_common.h              |  2 ++
 .../filters/ffmpeg_aac_bitstream_converter.cc      |  2 +-
 chromium/media/filters/ffmpeg_demuxer.cc           |  4 ++++
 4 files changed, 19 insertions(+), 13 deletions(-)

diff --git a/qtwebengine/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc b/qtwebengine/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc
index 8bb1aba..7ec9303 100644
--- a/qtwebengine/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc
+++ b/qtwebengine/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.cc
@@ -536,16 +536,16 @@ VideoFrame::Format PixelFormatToVideoFormat(PixelFormat pixel_format) {
   // The YUVJ alternatives are FFmpeg's (deprecated, but still in use) way to
   // specify a pixel format and full range color combination
   switch (pixel_format) {
-    case PIX_FMT_YUV422P:
-    case PIX_FMT_YUVJ422P:
+    case AV_PIX_FMT_YUV422P:
+    case AV_PIX_FMT_YUVJ422P:
       return VideoFrame::YV16;
-    case PIX_FMT_YUV444P:
-    case PIX_FMT_YUVJ444P:
+    case AV_PIX_FMT_YUV444P:
+    case AV_PIX_FMT_YUVJ444P:
       return VideoFrame::YV24;
-    case PIX_FMT_YUV420P:
-    case PIX_FMT_YUVJ420P:
+    case AV_PIX_FMT_YUV420P:
+    case AV_PIX_FMT_YUVJ420P:
       return VideoFrame::YV12;
-    case PIX_FMT_YUVA420P:
+    case AV_PIX_FMT_YUVA420P:
       return VideoFrame::YV12A;
     default:
       DVLOG(1) << "Unsupported PixelFormat: " << pixel_format;
@@ -556,17 +556,17 @@ VideoFrame::Format PixelFormatToVideoFormat(PixelFormat pixel_format) {
 PixelFormat VideoFormatToPixelFormat(VideoFrame::Format video_format) {
   switch (video_format) {
     case VideoFrame::YV16:
-      return PIX_FMT_YUV422P;
+      return AV_PIX_FMT_YUV422P;
     case VideoFrame::YV12:
-      return PIX_FMT_YUV420P;
+      return AV_PIX_FMT_YUV420P;
     case VideoFrame::YV12A:
-      return PIX_FMT_YUVA420P;
+      return AV_PIX_FMT_YUVA420P;
     case VideoFrame::YV24:
-      return PIX_FMT_YUV444P;
+      return AV_PIX_FMT_YUV444P;
     default:
       DVLOG(1) << "Unsupported VideoFrame::Format: " << video_format;
   }
-  return PIX_FMT_NONE;
+  return AV_PIX_FMT_NONE;
 }
 
 bool FFmpegUTCDateToTime(const char* date_utc, base::Time* out) {
diff --git a/qtwebengine/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.h b/qtwebengine/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.h
index f519823..35935be 100644
--- a/qtwebengine/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.h
+++ b/qtwebengine/src/3rdparty/chromium/media/ffmpeg/ffmpeg_common.h
@@ -46,6 +46,8 @@ MSVC_PUSH_DISABLE_WARNING(4244);
 MSVC_POP_WARNING();
 }  // extern "C"
 
+typedef AVPixelFormat PixelFormat;
+
 namespace media {
 
 class AudioDecoderConfig;
diff --git a/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_aac_bitstream_converter.cc b/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_aac_bitstream_converter.cc
index 6a55b6a..616cd1f 100644
--- a/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_aac_bitstream_converter.cc
+++ b/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_aac_bitstream_converter.cc
@@ -19,7 +19,7 @@ bool GenerateAdtsHeader(
     int private_stream, int channel_configuration, int originality, int home,
     int copyrighted_stream, int copyright_start, int frame_length,
     int buffer_fullness, int number_of_frames_minus_one, uint8* hdr) {
-  DCHECK_EQ(codec, CODEC_ID_AAC);
+  DCHECK_EQ(codec, AV_CODEC_ID_AAC);
 
   memset(reinterpret_cast<void *>(hdr), 0,
          FFmpegAACBitstreamConverter::kAdtsHeaderSize);
diff --git a/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc b/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
index ceeb6d5..7fd7f44 100644
--- a/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
+++ b/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
@@ -691,7 +691,11 @@ void FFmpegDemuxer::Initialize(DemuxerHost* host,
   // this does not increase the amount of data downloaded.  The default value
   // is 5 AV_TIME_BASE units (1 second each), which prevents some oddly muxed
   // streams from being detected properly; this value was chosen arbitrarily.
+#if FF_API_PROBESIZE_32
   format_context->max_analyze_duration2 = 60 * AV_TIME_BASE;
+#else
+  format_context->max_analyze_duration = 60 * AV_TIME_BASE;
+#endif
 
   // Open the AVFormatContext using our glue layer.
   CHECK(blocking_thread_.Start());
-- 
2.7.4

