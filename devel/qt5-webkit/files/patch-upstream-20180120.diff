diff --git a/Source/WebCore/CMakeLists.txt b/Source/WebCore/CMakeLists.txt
index 7d0ad0433ecb..df2f23580592 100644
--- a/Source/WebCore/CMakeLists.txt
+++ b/Source/WebCore/CMakeLists.txt
@@ -68,6 +68,7 @@ set(WebCore_INCLUDE_DIRECTORIES
     "${WEBCORE_DIR}/platform"
     "${WEBCORE_DIR}/platform/animation"
     "${WEBCORE_DIR}/platform/audio"
+    "${WEBCORE_DIR}/platform/crypto"
     "${WEBCORE_DIR}/platform/graphics"
     "${WEBCORE_DIR}/platform/graphics/cpu/arm"
     "${WEBCORE_DIR}/platform/graphics/cpu/arm/filters"
diff --git a/Source/WebCore/PlatformQt.cmake b/Source/WebCore/PlatformQt.cmake
index d237a83a6757..49c76a8de7cb 100644
--- a/Source/WebCore/PlatformQt.cmake
+++ b/Source/WebCore/PlatformQt.cmake
@@ -73,6 +73,8 @@ list(APPEND WebCore_SOURCES
 
     platform/audio/qt/AudioBusQt.cpp
 
+    platform/crypto/qt/CryptoDigestQt.cpp
+
     platform/graphics/ImageSource.cpp
     platform/graphics/PlatformDisplay.cpp
     platform/graphics/WOFFFileFormat.cpp
diff --git a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA1.cpp b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA1.cpp
index bc94aa3dea9c..54dcd03fbfb5 100644
--- a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA1.cpp
+++ b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA1.cpp
@@ -54,7 +54,7 @@ CryptoAlgorithmIdentifier CryptoAlgorithmSHA1::identifier() const
 
 void CryptoAlgorithmSHA1::digest(const CryptoAlgorithmParameters&, const CryptoOperationData& data, VectorCallback&& callback, VoidCallback&& failureCallback, ExceptionCode&)
 {
-    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoAlgorithmIdentifier::SHA_1);
+    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoDigest::Algorithm::SHA_1);
     if (!digest) {
         failureCallback();
         return;
diff --git a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA224.cpp b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA224.cpp
index 62cc5a8c2f9e..3878227d95d5 100644
--- a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA224.cpp
+++ b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA224.cpp
@@ -54,7 +54,7 @@ CryptoAlgorithmIdentifier CryptoAlgorithmSHA224::identifier() const
 
 void CryptoAlgorithmSHA224::digest(const CryptoAlgorithmParameters&, const CryptoOperationData& data, VectorCallback&& callback, VoidCallback&& failureCallback, ExceptionCode&)
 {
-    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoAlgorithmIdentifier::SHA_224);
+    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoDigest::Algorithm::SHA_224);
     if (!digest) {
         failureCallback();
         return;
diff --git a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA256.cpp b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA256.cpp
index 27fe8aa0ab73..0acaf0905028 100644
--- a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA256.cpp
+++ b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA256.cpp
@@ -54,7 +54,7 @@ CryptoAlgorithmIdentifier CryptoAlgorithmSHA256::identifier() const
 
 void CryptoAlgorithmSHA256::digest(const CryptoAlgorithmParameters&, const CryptoOperationData& data, VectorCallback&& callback, VoidCallback&& failureCallback, ExceptionCode&)
 {
-    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoAlgorithmIdentifier::SHA_256);
+    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoDigest::Algorithm::SHA_256);
     if (!digest) {
         failureCallback();
         return;
diff --git a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA384.cpp b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA384.cpp
index 6eba234f328a..b1bfbe157ab9 100644
--- a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA384.cpp
+++ b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA384.cpp
@@ -54,7 +54,7 @@ CryptoAlgorithmIdentifier CryptoAlgorithmSHA384::identifier() const
 
 void CryptoAlgorithmSHA384::digest(const CryptoAlgorithmParameters&, const CryptoOperationData& data, VectorCallback&& callback, VoidCallback&& failureCallback, ExceptionCode&)
 {
-    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoAlgorithmIdentifier::SHA_384);
+    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoDigest::Algorithm::SHA_384);
     if (!digest) {
         failureCallback();
         return;
diff --git a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA512.cpp b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA512.cpp
index 87d62d445b85..7ddf1d4d22ef 100644
--- a/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA512.cpp
+++ b/Source/WebCore/crypto/algorithms/CryptoAlgorithmSHA512.cpp
@@ -54,7 +54,7 @@ CryptoAlgorithmIdentifier CryptoAlgorithmSHA512::identifier() const
 
 void CryptoAlgorithmSHA512::digest(const CryptoAlgorithmParameters&, const CryptoOperationData& data, VectorCallback&& callback, VoidCallback&& failureCallback, ExceptionCode&)
 {
-    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoAlgorithmIdentifier::SHA_512);
+    std::unique_ptr<CryptoDigest> digest = CryptoDigest::create(CryptoDigest::Algorithm::SHA_512);
     if (!digest) {
         failureCallback();
         return;
diff --git a/Source/WebCore/crypto/CryptoDigest.h b/Source/WebCore/platform/crypto/CryptoDigest.h
similarity index 88%
rename from Source/WebCore/crypto/CryptoDigest.h
rename to Source/WebCore/platform/crypto/CryptoDigest.h
index 353b13e828dc..31f075aa37cb 100644
--- a/Source/WebCore/crypto/CryptoDigest.h
+++ b/Source/WebCore/platform/crypto/CryptoDigest.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013 Apple Inc. All rights reserved.
+ * Copyright (C) 2013, 2016 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
@@ -26,12 +26,9 @@
 #ifndef CryptoDigest_h
 #define CryptoDigest_h
 
-#include "CryptoAlgorithmIdentifier.h"
 #include <wtf/Noncopyable.h>
 #include <wtf/Vector.h>
 
-#if ENABLE(SUBTLE_CRYPTO)
-
 namespace WebCore {
 
 struct CryptoDigestContext;
@@ -39,7 +36,14 @@ struct CryptoDigestContext;
 class CryptoDigest {
     WTF_MAKE_NONCOPYABLE(CryptoDigest);
 public:
-    static std::unique_ptr<CryptoDigest> create(CryptoAlgorithmIdentifier);
+    enum class Algorithm {
+        SHA_1,
+        SHA_224,
+        SHA_256,
+        SHA_384,
+        SHA_512,
+    };
+    static std::unique_ptr<CryptoDigest> create(Algorithm);
     ~CryptoDigest();
 
     void addBytes(const void* input, size_t length);
@@ -53,5 +57,4 @@ class CryptoDigest {
 
 } // namespace WebCore
 
-#endif // ENABLE(SUBTLE_CRYPTO)
 #endif // CryptoDigest_h
diff --git a/Source/WebCore/platform/crypto/qt/CryptoDigestQt.cpp b/Source/WebCore/platform/crypto/qt/CryptoDigestQt.cpp
new file mode 100644
index 000000000000..1dcb8bf72e8b
--- /dev/null
+++ b/Source/WebCore/platform/crypto/qt/CryptoDigestQt.cpp
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2016 Konstantin Tokavev <annulen@yandex.ru>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "CryptoDigest.h"
+
+#include <QCryptographicHash>
+#include <QDebug>
+
+namespace WebCore {
+
+static QCryptographicHash::Algorithm toQtAlgorithm(CryptoDigest::Algorithm algorithm)
+{
+    switch (algorithm) {
+    case CryptoDigest::Algorithm::SHA_1:
+        return QCryptographicHash::Sha1;
+
+    case CryptoDigest::Algorithm::SHA_224:
+        return QCryptographicHash::Sha224;
+
+    case CryptoDigest::Algorithm::SHA_256:
+        return QCryptographicHash::Sha256;
+
+    case CryptoDigest::Algorithm::SHA_384:
+        return QCryptographicHash::Sha384;
+
+    case CryptoDigest::Algorithm::SHA_512:
+        return QCryptographicHash::Sha512;
+    }
+
+    ASSERT_NOT_REACHED();
+    return QCryptographicHash::Algorithm();
+}
+
+struct CryptoDigestContext {
+    CryptoDigestContext(QCryptographicHash::Algorithm algorithm)
+        : hash(algorithm)
+    {
+    }
+    QCryptographicHash hash;
+};
+
+CryptoDigest::CryptoDigest()
+{
+}
+
+CryptoDigest::~CryptoDigest()
+{
+}
+
+std::unique_ptr<CryptoDigest> CryptoDigest::create(CryptoDigest::Algorithm algorithm)
+{
+    std::unique_ptr<CryptoDigest> digest(new CryptoDigest);
+    digest->m_context.reset(new CryptoDigestContext(toQtAlgorithm(algorithm)));
+    return digest;
+}
+
+void CryptoDigest::addBytes(const void* input, size_t length)
+{
+    m_context->hash.addData(static_cast<const char*>(input), length);
+}
+
+Vector<uint8_t> CryptoDigest::computeHash()
+{
+    QByteArray digest = m_context->hash.result();
+    Vector<uint8_t> result(digest.size());
+    memcpy(result.data(), digest.constData(), digest.size());
+    return result;
+}
+
+} // namespace WebCore
diff --git a/Source/WebKit/CMakeLists.txt b/Source/WebKit/CMakeLists.txt
index 82dc1e662a57..04117d5633a3 100644
--- a/Source/WebKit/CMakeLists.txt
+++ b/Source/WebKit/CMakeLists.txt
@@ -70,11 +70,21 @@ if (${PORT} STREQUAL "Qt")
 
     if (MACOS_BUILD_FRAMEWORKS)
         set_target_properties(WebKit PROPERTIES
-            FRAMEWORK_VERSION 5
+            FRAMEWORK_VERSION ${PROJECT_VERSION_MAJOR}
+            SOVERSION ${MACOS_COMPATIBILITY_VERSION}
             MACOSX_FRAMEWORK_IDENTIFIER org.qt-project.QtWebKit
         )
     endif ()
 
+    if (USE_LINKER_VERSION_SCRIPT)
+        set(VERSION_SCRIPT "${CMAKE_BINARY_DIR}/QtWebKit.version")
+        add_custom_command(TARGET WebKit PRE_LINK
+            COMMAND ${PERL_EXECUTABLE} ${TOOLS_DIR}/qt/generate-version-script.pl ${Qt5_VERSION} > ${VERSION_SCRIPT}
+            VERBATIM
+        )
+        set_target_properties(WebKit PROPERTIES LINK_FLAGS -Wl,--version-script,${VERSION_SCRIPT})
+    endif ()
+
     if (ENABLE_WEBKIT2)
         add_dependencies(WebKit WebKit2)
     endif ()
diff --git a/Source/WebKit/PlatformQt.cmake b/Source/WebKit/PlatformQt.cmake
index 909efc00dba3..6fe440be800c 100644
--- a/Source/WebKit/PlatformQt.cmake
+++ b/Source/WebKit/PlatformQt.cmake
@@ -418,7 +418,7 @@ install(
     COMPONENT Data
 )
 
-file(GLOB WebKit_PRIVATE_HEADERS qt/Api/*_p.h ../WebKit2/UIProcess/API/qt/*_p.h)
+file(GLOB WebKit_PRIVATE_HEADERS qt/Api/*_p.h)
 install(
     FILES
         ${WebKit_PRIVATE_HEADERS}
@@ -861,7 +861,8 @@ endif ()
 
 if (MACOS_BUILD_FRAMEWORKS)
     set_target_properties(WebKitWidgets PROPERTIES
-        FRAMEWORK_VERSION 5
+        FRAMEWORK_VERSION ${PROJECT_VERSION_MAJOR}
+        SOVERSION ${MACOS_COMPATIBILITY_VERSION}
         MACOSX_FRAMEWORK_IDENTIFIER org.qt-project.QtWebKitWidgets
     )
 endif ()
diff --git a/Source/WebKit2/PlatformQt.cmake b/Source/WebKit2/PlatformQt.cmake
index 6bd0627f055f..5883096eb405 100644
--- a/Source/WebKit2/PlatformQt.cmake
+++ b/Source/WebKit2/PlatformQt.cmake
@@ -1,7 +1,7 @@
 set(WebKit2_WebProcess_OUTPUT_NAME QtWebProcess)
 set(WebKit2_NetworkProcess_OUTPUT_NAME QtWebNetworkProcess)
 set(WebKit2_PluginProcess_OUTPUT_NAME QtWebPluginProcess)
-set(WebKit2_DatabaseProcess_OUTPUT_NAME QtWebDatabaseProcess)
+set(WebKit2_DatabaseProcess_OUTPUT_NAME QtWebStorageProcess)
 
 file(MAKE_DIRECTORY ${DERIVED_SOURCES_WEBKIT2_DIR})
 
@@ -259,6 +259,7 @@ if (ENABLE_NETSCAPE_PLUGIN_API)
 endif ()
 
 list(APPEND WebKit2_SYSTEM_INCLUDE_DIRECTORIES
+    ${GLIB_INCLUDE_DIRS}
     ${GSTREAMER_INCLUDE_DIRS}
     ${Qt5Quick_INCLUDE_DIRS}
     ${Qt5Quick_PRIVATE_INCLUDE_DIRS}
@@ -328,3 +329,12 @@ WEBKIT_CREATE_FORWARDING_HEADERS(QtWebKit/private DIRECTORIES UIProcess/API/qt)
 if (ENABLE_API_TESTS)
     add_subdirectory(UIProcess/API/qt/tests)
 endif ()
+
+file(GLOB WebKit2_PRIVATE_HEADERS UIProcess/API/qt/*_p.h)
+install(
+    FILES
+       ${WebKit2_PRIVATE_HEADERS}
+    DESTINATION
+        ${KDE_INSTALL_INCLUDEDIR}/QtWebKit/${PROJECT_VERSION}/QtWebKit/private
+    COMPONENT Data
+)
diff --git a/Source/WebKit2/Shared/qt/ProcessExecutablePathQt.cpp b/Source/WebKit2/Shared/qt/ProcessExecutablePathQt.cpp
index c5f809d34f80..ae14ef13e196 100644
--- a/Source/WebKit2/Shared/qt/ProcessExecutablePathQt.cpp
+++ b/Source/WebKit2/Shared/qt/ProcessExecutablePathQt.cpp
@@ -65,4 +65,11 @@ String executablePathOfNetworkProcess()
     return executablePath(QStringLiteral("QtWebNetworkProcess"));
 }
 
+#if ENABLE(DATABASE_PROCESS)
+String executablePathOfDatabaseProcess()
+{
+    return executablePath(QStringLiteral("QtWebStorageProcess"));
+}
+#endif
+
 } // namespace WebKit
diff --git a/Source/WebKit2/UIProcess/API/qt/qquickwebview.cpp b/Source/WebKit2/UIProcess/API/qt/qquickwebview.cpp
index 3b84c6dbad16..b894d73387dd 100644
--- a/Source/WebKit2/UIProcess/API/qt/qquickwebview.cpp
+++ b/Source/WebKit2/UIProcess/API/qt/qquickwebview.cpp
@@ -407,6 +407,7 @@ void QQuickWebViewPrivate::initialize(WKPageConfigurationRef configurationRef)
     preferences.setMediaSourceEnabled(false);
     preferences.setWebGLEnabled(true);
     preferences.setForceCompositingMode(true);
+    preferences.setAllowFileAccessFromFileURLs(true);
 
     webPageProxy->setURLSchemeHandlerForScheme(QrcSchemeHandler::create(), ASCIILiteral("qrc"));
 
diff --git a/Source/WebKit2/UIProcess/Launcher/qt/ProcessLauncherQt.cpp b/Source/WebKit2/UIProcess/Launcher/qt/ProcessLauncherQt.cpp
index 53913fa560d8..51a3ffbba478 100644
--- a/Source/WebKit2/UIProcess/Launcher/qt/ProcessLauncherQt.cpp
+++ b/Source/WebKit2/UIProcess/Launcher/qt/ProcessLauncherQt.cpp
@@ -122,6 +122,12 @@ void ProcessLauncher::launchProcess()
         commandLine = QLatin1String("%1 \"%2\" %3 %4");
         QByteArray pluginProcessPrefix = qgetenv("QT_WEBKIT2_PP_CMD_PREFIX");
         commandLine = commandLine.arg(QLatin1String(pluginProcessPrefix.constData())).arg(QString(executablePathOfPluginProcess()));
+#endif
+#if ENABLE(DATABASE_PROCESS)
+    } else if (m_launchOptions.processType == ProcessType::Database) {
+        commandLine = QLatin1String("%1 \"%2\" %3 %4");
+        QByteArray processPrefix = qgetenv("QT_WEBKIT2_DP_CMD_PREFIX");
+        commandLine = commandLine.arg(QLatin1String(processPrefix.constData())).arg(QString(executablePathOfDatabaseProcess()));
 #endif
     } else {
         qDebug() << "Unsupported process type" << (int)m_launchOptions.processType;
diff --git a/Source/cmake/FindICU.cmake b/Source/cmake/FindICU.cmake
index c0de36338871..4e93286f322a 100644
--- a/Source/cmake/FindICU.cmake
+++ b/Source/cmake/FindICU.cmake
@@ -24,7 +24,7 @@ mark_as_advanced(ICU_INCLUDE_DIR)
 # Look for the library.
 find_library(
     ICU_LIBRARY
-    NAMES sicuuc icuuc cygicuuc cygicuuc32
+    NAMES icuuc cygicuuc cygicuuc32
     HINTS ${PC_ICU_LIBRARY_DIRS}
           ${PC_ICU_LIBDIR}
     DOC "Libraries to link against for the common parts of ICU")
@@ -49,7 +49,7 @@ if (ICU_INCLUDE_DIR AND ICU_LIBRARY)
     pkg_check_modules(PC_ICU_I18N icu-i18n)
     find_library(
         ICU_I18N_LIBRARY
-        NAMES sicui18n sicuin icui18n icuin cygicuin cygicuin32
+        NAMES icui18n icuin cygicuin cygicuin32
         HINTS ${PC_ICU_I18N_LIBRARY_DIRS}
               ${PC_ICU_I18N_LIBDIR}
         DOC "Libraries to link against for ICU internationalization")
diff --git a/Source/cmake/OptionsQt.cmake b/Source/cmake/OptionsQt.cmake
index 05d570f55e07..47dc9d05855b 100644
--- a/Source/cmake/OptionsQt.cmake
+++ b/Source/cmake/OptionsQt.cmake
@@ -1,3 +1,4 @@
+include(CheckCXXSourceCompiles)
 include(FeatureSummary)
 include(ECMEnableSanitizers)
 include(ECMPackageConfigHelpers)
@@ -53,6 +54,30 @@ macro(CONVERT_PRL_LIBS_TO_CMAKE _qt_component)
     endif ()
 endmacro()
 
+macro(CHECK_QT5_PRIVATE_INCLUDE_DIRS _qt_component _header)
+    set(INCLUDE_TEST_SOURCE
+    "
+        #include <${_header}>
+        int main() { return 0; }
+    "
+    )
+    set(CMAKE_REQUIRED_INCLUDES ${Qt5${_qt_component}_PRIVATE_INCLUDE_DIRS})
+    set(CMAKE_REQUIRED_LIBRARIES Qt5::${_qt_component})
+
+    # Avoid check_include_file_cxx() because it performs linking but doesn't support CMAKE_REQUIRED_LIBRARIES (doh!)
+    check_cxx_source_compiles("${INCLUDE_TEST_SOURCE}" Qt5${_qt_component}_PRIVATE_HEADER_FOUND)
+
+    unset(INCLUDE_TEST_SOURCE)
+    unset(CMAKE_REQUIRED_INCLUDES)
+    unset(CMAKE_REQUIRED_LIBRARIES)
+
+    if (NOT Qt5${_qt_component}_PRIVATE_HEADER_FOUND)
+        message(FATAL_ERROR "Header ${_header} is not found. Please make sure that:
+    1. Private headers of Qt5${_qt_component} are installed
+    2. Qt5${_qt_component}_PRIVATE_INCLUDE_DIRS is correctly defined in Qt5${_qt_component}Config.cmake")
+    endif ()
+endmacro()
+
 macro(QT_ADD_EXTRA_WEBKIT_TARGET_EXPORT target)
     if (QT_STATIC_BUILD OR SHARED_CORE)
         install(TARGETS ${target} EXPORT WebKitTargets
@@ -131,11 +156,13 @@ endif ()
 WEBKIT_OPTION_BEGIN()
 
 if (APPLE)
+    set(MACOS_COMPATIBILITY_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}" CACHE STRING "Compatibility version that macOS dylibs should have")
+
     option(MACOS_FORCE_SYSTEM_XML_LIBRARIES "Use system installation of libxml2 and libxslt on macOS" ON)
     option(MACOS_USE_SYSTEM_ICU "Use system installation of ICU on macOS" ON)
     option(USE_UNIX_DOMAIN_SOCKETS "Use Unix domain sockets instead of native IPC code on macOS" OFF)
     option(USE_APPSTORE_COMPLIANT_CODE "Avoid using private macOS APIs which are not allowed on App Store (experimental)" OFF)
-    set(MACOS_BUILD_FRAMEWORKS ON) # TODO: Make it an option
+    option(MACOS_BUILD_FRAMEWORKS "Build QtWebKit as framework bundles" ON)
 
     if (USE_APPSTORE_COMPLIANT_CODE)
         set(MACOS_USE_SYSTEM_ICU OFF)
@@ -480,10 +507,11 @@ else ()
     endif ()
 endif ()
 
-find_package(Fontconfig)
-
-if (FONTCONFIG_FOUND)
-    SET_AND_EXPOSE_TO_BUILD(HAVE_FONTCONFIG 1)
+if (ENABLE_TEST_SUPPORT)
+    find_package(Fontconfig)
+    if (FONTCONFIG_FOUND)
+        SET_AND_EXPOSE_TO_BUILD(HAVE_FONTCONFIG 1)
+    endif ()
 endif ()
 
 find_package(WebP)
@@ -521,6 +549,33 @@ if (ENABLE_DEVICE_ORIENTATION)
     SET_AND_EXPOSE_TO_BUILD(HAVE_QTSENSORS 1)
 endif ()
 
+if (ENABLE_OPENGL)
+    # Note: Gui module is already found
+    # Warning: quotes are sinificant here!
+    if (NOT DEFINED Qt5Gui_OPENGL_IMPLEMENTATION OR "${Qt5Gui_OPENGL_IMPLEMENTATION}" STREQUAL "")
+       message(FATAL_ERROR "Qt with OpenGL support is required for ENABLE_OPENGL")
+    endif ()
+
+    SET_AND_EXPOSE_TO_BUILD(USE_TEXTURE_MAPPER_GL TRUE)
+    SET_AND_EXPOSE_TO_BUILD(ENABLE_GRAPHICS_CONTEXT_3D TRUE)
+
+    if (WIN32)
+        include(CheckCXXSymbolExists)
+        set(CMAKE_REQUIRED_INCLUDES ${Qt5Gui_INCLUDE_DIRS})
+        set(CMAKE_REQUIRED_FLAGS ${Qt5Gui_EXECUTABLE_COMPILE_FLAGS})
+        check_cxx_symbol_exists(QT_OPENGL_DYNAMIC qopenglcontext.h HAVE_QT_OPENGL_DYNAMIC)
+        if (HAVE_QT_OPENGL_DYNAMIC)
+            set(Qt5Gui_OPENGL_IMPLEMENTATION DynamicGL)
+        endif ()
+        unset(CMAKE_REQUIRED_INCLUDES)
+        unset(CMAKE_REQUIRED_FLAGS)
+    endif ()
+
+    message(STATUS "Qt OpenGL implementation: ${Qt5Gui_OPENGL_IMPLEMENTATION}")
+    message(STATUS "Qt OpenGL libraries: ${Qt5Gui_OPENGL_LIBRARIES}")
+    message(STATUS "Qt EGL libraries: ${Qt5Gui_EGL_LIBRARIES}")
+endif ()
+
 if (ENABLE_PRINT_SUPPORT)
     list(APPEND QT_REQUIRED_COMPONENTS PrintSupport)
     SET_AND_EXPOSE_TO_BUILD(HAVE_QTPRINTSUPPORT 1)
@@ -553,6 +608,12 @@ if (ENABLE_QT_WEBCHANNEL)
 endif ()
 
 find_package(Qt5 ${REQUIRED_QT_VERSION} REQUIRED COMPONENTS ${QT_REQUIRED_COMPONENTS})
+
+CHECK_QT5_PRIVATE_INCLUDE_DIRS(Gui private/qhexstring_p.h)
+if (ENABLE_WEBKIT2)
+    CHECK_QT5_PRIVATE_INCLUDE_DIRS(Quick private/qsgrendernode_p.h)
+endif ()
+
 if (QT_STATIC_BUILD)
     foreach (qt_module ${QT_REQUIRED_COMPONENTS})
         CONVERT_PRL_LIBS_TO_CMAKE(${qt_module})
@@ -657,25 +718,6 @@ if (ENABLE_X11_TARGET)
     endif ()
 endif ()
 
-if (ENABLE_OPENGL)
-    SET_AND_EXPOSE_TO_BUILD(USE_TEXTURE_MAPPER_GL TRUE)
-    SET_AND_EXPOSE_TO_BUILD(ENABLE_GRAPHICS_CONTEXT_3D TRUE)
-
-    if (WIN32)
-        include(CheckCXXSymbolExists)
-        set(CMAKE_REQUIRED_INCLUDES ${Qt5Gui_INCLUDE_DIRS})
-        set(CMAKE_REQUIRED_FLAGS ${Qt5Gui_EXECUTABLE_COMPILE_FLAGS})
-        check_cxx_symbol_exists(QT_OPENGL_DYNAMIC qopenglcontext.h HAVE_QT_OPENGL_DYNAMIC)
-        if (HAVE_QT_OPENGL_DYNAMIC)
-            set(Qt5Gui_OPENGL_IMPLEMENTATION DynamicGL)
-        endif ()
-        unset(CMAKE_REQUIRED_INCLUDES)
-        unset(CMAKE_REQUIRED_FLAGS)
-    endif ()
-
-    message("Qt OpenGL implementation: ${Qt5Gui_OPENGL_IMPLEMENTATION}")
-endif ()
-
 if (NOT ENABLE_VIDEO)
     set(USE_MEDIA_FOUNDATION OFF)
     set(USE_QT_MULTIMEDIA OFF)
diff --git a/Source/cmake/WebKitMacros.cmake b/Source/cmake/WebKitMacros.cmake
index 4c54c1c5de1e..858e2e47d8d5 100644
--- a/Source/cmake/WebKitMacros.cmake
+++ b/Source/cmake/WebKitMacros.cmake
@@ -265,6 +265,8 @@ macro(WEBKIT_FRAMEWORK _target)
         ${${_target}_HEADERS}
         ${${_target}_SOURCES}
         ${${_target}_DERIVED_SOURCES}
+        ${${_target}_PRIVATE_HEADERS}
+        ${${_target}_PUBLIC_HEADERS}
     )
     target_link_libraries(${_target} ${${_target}_LIBRARIES})
     set_target_properties(${_target} PROPERTIES COMPILE_DEFINITIONS "BUILDING_${_target}")
diff --git a/Tools/qmake/projects/run_cmake.pro b/Tools/qmake/projects/run_cmake.pro
index fadfda0596ac..b9d0f08a2906 100644
--- a/Tools/qmake/projects/run_cmake.pro
+++ b/Tools/qmake/projects/run_cmake.pro
@@ -25,11 +25,10 @@ build_pass|!debug_and_release {
         USE_LIBHYPHEN=OFF
 
     !isEmpty(_QMAKE_SUPER_CACHE_) {
-        CMAKE_PREFIX_PATH=\"$$ROOT_QT_BUILD_DIR/qtbase;$$ROOT_QT_BUILD_DIR/qtlocation;$$ROOT_QT_BUILD_DIR/qtsensors;$$ROOT_QT_BUILD_DIR/qtdeclarative;$$ROOT_QT_BUILD_DIR/qtwebchannel\"
+        CMAKE_CONFIG += CMAKE_PREFIX_PATH=\"$$ROOT_QT_BUILD_DIR/qtbase;$$ROOT_QT_BUILD_DIR/qtlocation;$$ROOT_QT_BUILD_DIR/qtsensors;$$ROOT_QT_BUILD_DIR/qtdeclarative;$$ROOT_QT_BUILD_DIR/qtwebchannel\"
     } else {
-        CMAKE_PREFIX_PATH=\"$$[QT_INSTALL_PREFIX]\"
+        CMAKE_CONFIG += Qt5_DIR=\"$$[QT_INSTALL_LIBS]/cmake/Qt5\"
     }
-    CMAKE_CONFIG += CMAKE_PREFIX_PATH=$$CMAKE_PREFIX_PATH
 
     static: CMAKE_CONFIG += USE_THIN_ARCHIVES=OFF
 
@@ -84,6 +83,8 @@ build_pass|!debug_and_release {
         debug_and_release:build_all:CONFIG(debug, debug|release) {
             CMAKE_CONFIG += CMAKE_INSTALL_PREFIX=\"$$[QT_INSTALL_PREFIX]/debug\"
         }
+
+        !qt_framework: CMAKE_CONFIG += MACOS_BUILD_FRAMEWORKS=OFF
     }
 
     !isEmpty(use_ninja): cmake_args += "-G Ninja"
