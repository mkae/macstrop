diff --git a/.reviewboardrc b/.reviewboardrc
new file mode 100644
index 0000000..03d17ba
--- /dev/null
+++ b/.reviewboardrc
@@ -0,0 +1,4 @@
+REVIEWBOARD_URL = "https://git.reviewboard.kde.org"
+REPOSITORY = "git://anongit.kde.org/qtcurve"
+BRANCH = "master"
+TARGET_GROUPS = "qtcurve"
diff --git a/qt4/common/config_file.cpp b/qt4/common/config_file.cpp
index 7a0a6bc..1c0520c 100644
--- a/qt4/common/config_file.cpp
+++ b/qt4/common/config_file.cpp
@@ -1309,14 +1309,10 @@ bool qtcReadConfig(const QString &file, Options *opts, Options *defOpts, bool ch
             CFG_READ_ALIGN(titlebarAlignment);
             CFG_READ_EFFECT(titlebarEffect);
             CFG_READ_BOOL(centerTabText);
-#if defined CONFIG_DIALOG
             CFG_READ_INT(expanderHighlight);
             CFG_READ_BOOL(mapKdeIcons);
-#endif
             CFG_READ_BOOL(gtkButtonOrder);
-#if defined CONFIG_DIALOG
             CFG_READ_BOOL(reorderGtkButtons);
-#endif
             CFG_READ_APPEARANCE(titlebarAppearance, APP_ALLOW_NONE);
             CFG_READ_APPEARANCE(inactiveTitlebarAppearance, APP_ALLOW_NONE);
 
@@ -1341,10 +1337,8 @@ bool qtcReadConfig(const QString &file, Options *opts, Options *defOpts, bool ch
             CFG_READ_STRING_LIST(noBgndOpacityApps);
             CFG_READ_STRING_LIST(noMenuBgndOpacityApps);
             CFG_READ_STRING_LIST(noBgndImageApps);
-#ifdef CONFIG_DIALOG
             if(opts->version<qtcMakeVersion(1, 7, 2))
                 opts->noMenuBgndOpacityApps << "gtk";
-#endif
             CFG_READ_STRING_LIST(menubarApps);
             CFG_READ_STRING_LIST(statusbarApps);
             CFG_READ_STRING_LIST(useQtFileDialogApps);
@@ -1354,27 +1348,24 @@ bool qtcReadConfig(const QString &file, Options *opts, Options *defOpts, bool ch
             readDoubleList(cfg, "customShades", opts->customShades, QTC_NUM_STD_SHADES);
             readDoubleList(cfg, "customAlphas", opts->customAlphas, NUM_STD_ALPHAS);
 
-            if (opts->titlebarButtons & TITLEBAR_BUTTON_COLOR ||
-                opts->titlebarButtons & TITLEBAR_BUTTON_ICON_COLOR) {
-                QStringList cols(readStringEntry(cfg, "titlebarButtonColors").split(',', QString::SkipEmptyParts));
-                if(cols.count() && 0==(cols.count()%NUM_TITLEBAR_BUTTONS) && cols.count()<=(NUM_TITLEBAR_BUTTONS*3))
-                {
-                    QStringList::ConstIterator it(cols.begin()),
-                                               end(cols.end());
+            QStringList cols(readStringEntry(cfg, "titlebarButtonColors").split(',', QString::SkipEmptyParts));
+            if(cols.count() && 0==(cols.count()%NUM_TITLEBAR_BUTTONS) && cols.count()<=(NUM_TITLEBAR_BUTTONS*3))
+            {
+                QStringList::ConstIterator it(cols.begin()),
+                                           end(cols.end());
 
-                    for (int i = 0;it != end;++it, ++i) {
-                        QColor col;
-                        qtcSetRgb(&col, TO_LATIN1((*it)));
-                        opts->titlebarButtonColors[i]=col;
-                    }
-                    if(cols.count()<(NUM_TITLEBAR_BUTTONS+1))
-                        opts->titlebarButtons&=~TITLEBAR_BUTTON_ICON_COLOR;
+                for (int i = 0;it != end;++it, ++i) {
+                    QColor col;
+                    qtcSetRgb(&col, TO_LATIN1((*it)));
+                    opts->titlebarButtonColors[i]=col;
                 }
-                else
-                {
-                    opts->titlebarButtons&=~TITLEBAR_BUTTON_COLOR;
+                if(cols.count()<(NUM_TITLEBAR_BUTTONS+1))
                     opts->titlebarButtons&=~TITLEBAR_BUTTON_ICON_COLOR;
-                }
+            }
+            else
+            {
+                opts->titlebarButtons&=~TITLEBAR_BUTTON_COLOR;
+                opts->titlebarButtons&=~TITLEBAR_BUTTON_ICON_COLOR;
             }
 
             for(i=APPEARANCE_CUSTOM1; i<(APPEARANCE_CUSTOM1+NUM_CUSTOM_GRAD); ++i)
@@ -1476,9 +1467,7 @@ void qtcDefaultSettings(Options *opts)
     opts->round=ROUND_EXTRA;
     opts->gtkButtonOrder=false;
     opts->dwtAppearance=APPEARANCE_CUSTOM1;
-#if defined CONFIG_DIALOG
     opts->reorderGtkButtons=false;
-#endif
     opts->bgndImage.type=IMG_NONE;
     opts->bgndImage.width=opts->bgndImage.height=0;
     opts->bgndImage.onBorder=false;
@@ -1624,10 +1613,8 @@ void qtcDefaultSettings(Options *opts)
                             << "vmplayer";
     opts->noMenuStripeApps << "gtk" << "soffice.bin";
 
-#if defined CONFIG_DIALOG
     opts->mapKdeIcons=true;
     opts->expanderHighlight=DEFAULT_EXPANDER_HIGHLIGHT_FACTOR;
-#endif
     opts->titlebarAppearance=APPEARANCE_CUSTOM1;
     opts->inactiveTitlebarAppearance=APPEARANCE_CUSTOM1;
     opts->titlebarButtonAppearance=APPEARANCE_GRADIENT;
@@ -2326,9 +2313,7 @@ bool qtcWriteConfig(KConfig *cfg, const Options &opts, const Options &def, bool
         CFG_WRITE_ENTRY_NUM(titlebarButtons);
         CFG_WRITE_ENTRY(titlebarIcon);
 
-        if ((opts.titlebarButtons & TITLEBAR_BUTTON_COLOR ||
-             opts.titlebarButtons & TITLEBAR_BUTTON_ICON_COLOR) &&
-            opts.titlebarButtonColors.size() &&
+        if (opts.titlebarButtonColors.size() &&
             !(opts.titlebarButtonColors.size() % NUM_TITLEBAR_BUTTONS)) {
             QString val;
             QTextStream str(&val);
@@ -2357,9 +2342,7 @@ bool qtcWriteConfig(KConfig *cfg, const Options &opts, const Options &def, bool
         CFG_WRITE_ENTRY(gtkComboMenus);
         CFG_WRITE_ENTRY(doubleGtkComboArrow);
         CFG_WRITE_ENTRY(gtkButtonOrder);
-#if defined CONFIG_DIALOG
         CFG_WRITE_ENTRY(reorderGtkButtons);
-#endif
         CFG_WRITE_ENTRY(mapKdeIcons);
         CFG_WRITE_ENTRY(shading);
         CFG_WRITE_ENTRY(titlebarAlignment);
diff --git a/qt4/config/qtcurveconfig.cpp b/qt4/config/qtcurveconfig.cpp
index 740150f..60b1084 100644
--- a/qt4/config/qtcurveconfig.cpp
+++ b/qt4/config/qtcurveconfig.cpp
@@ -1319,7 +1319,8 @@ void QtCurveConfig::save()
     else
         removeInstalledThemeFile(BGND_FILE MENU_FILE);
 
-    qtcWriteConfig(nullptr, opts, presets[defaultText].opts);
+    // avoid surprises and always save the full config
+    qtcWriteConfig(nullptr, opts, presets[defaultText].opts, true);
 
     // This is only read by KDE3...
     KConfig      k3globals(kdeHome(true)+"/share/config/kdeglobals", KConfig::CascadeConfig);
@@ -3130,43 +3131,36 @@ void QtCurveConfig::setOptions(Options &opts)
         opts.customAlphas[0]=0;
 
     opts.titlebarButtons=getTitleBarButtonFlags();
-    opts.titlebarButtonColors.clear();
-    if(opts.titlebarButtons&TITLEBAR_BUTTON_COLOR || opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR)
-    {
-        opts.titlebarButtonColors[TITLEBAR_CLOSE]=titlebarButtons_colorClose->color();
-        opts.titlebarButtonColors[TITLEBAR_MIN]=titlebarButtons_colorMin->color();
-        opts.titlebarButtonColors[TITLEBAR_MAX]=titlebarButtons_colorMax->color();
-        opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE]=titlebarButtons_colorKeepAbove->color();
-        opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW]=titlebarButtons_colorKeepBelow->color();
-        opts.titlebarButtonColors[TITLEBAR_HELP]=titlebarButtons_colorHelp->color();
-        opts.titlebarButtonColors[TITLEBAR_MENU]=titlebarButtons_colorMenu->color();
-        opts.titlebarButtonColors[TITLEBAR_SHADE]=titlebarButtons_colorShade->color();
-        opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS]=titlebarButtons_colorAllDesktops->color();
-
-        if(opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR)
-        {
-            int offset=NUM_TITLEBAR_BUTTONS;
-            opts.titlebarButtonColors[TITLEBAR_CLOSE+offset]=titlebarButtons_colorCloseIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MIN+offset]=titlebarButtons_colorMinIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MAX+offset]=titlebarButtons_colorMaxIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE+offset]=titlebarButtons_colorKeepAboveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW+offset]=titlebarButtons_colorKeepBelowIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_HELP+offset]=titlebarButtons_colorHelpIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MENU+offset]=titlebarButtons_colorMenuIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_SHADE+offset]=titlebarButtons_colorShadeIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS+offset]=titlebarButtons_colorAllDesktopsIcon->color();
-            offset+=NUM_TITLEBAR_BUTTONS;
-            opts.titlebarButtonColors[TITLEBAR_CLOSE+offset]=titlebarButtons_colorCloseInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MIN+offset]=titlebarButtons_colorMinInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MAX+offset]=titlebarButtons_colorMaxInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE+offset]=titlebarButtons_colorKeepAboveInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW+offset]=titlebarButtons_colorKeepBelowInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_HELP+offset]=titlebarButtons_colorHelpInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MENU+offset]=titlebarButtons_colorMenuInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_SHADE+offset]=titlebarButtons_colorShadeInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS+offset]=titlebarButtons_colorAllDesktopsInactiveIcon->color();
-        }
-    }
+    opts.titlebarButtonColors[TITLEBAR_CLOSE]=titlebarButtons_colorClose->color();
+    opts.titlebarButtonColors[TITLEBAR_MIN]=titlebarButtons_colorMin->color();
+    opts.titlebarButtonColors[TITLEBAR_MAX]=titlebarButtons_colorMax->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE]=titlebarButtons_colorKeepAbove->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW]=titlebarButtons_colorKeepBelow->color();
+    opts.titlebarButtonColors[TITLEBAR_HELP]=titlebarButtons_colorHelp->color();
+    opts.titlebarButtonColors[TITLEBAR_MENU]=titlebarButtons_colorMenu->color();
+    opts.titlebarButtonColors[TITLEBAR_SHADE]=titlebarButtons_colorShade->color();
+    opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS]=titlebarButtons_colorAllDesktops->color();
+
+    int offset=NUM_TITLEBAR_BUTTONS;
+    opts.titlebarButtonColors[TITLEBAR_CLOSE+offset]=titlebarButtons_colorCloseIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MIN+offset]=titlebarButtons_colorMinIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MAX+offset]=titlebarButtons_colorMaxIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE+offset]=titlebarButtons_colorKeepAboveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW+offset]=titlebarButtons_colorKeepBelowIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_HELP+offset]=titlebarButtons_colorHelpIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MENU+offset]=titlebarButtons_colorMenuIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_SHADE+offset]=titlebarButtons_colorShadeIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS+offset]=titlebarButtons_colorAllDesktopsIcon->color();
+    offset+=NUM_TITLEBAR_BUTTONS;
+    opts.titlebarButtonColors[TITLEBAR_CLOSE+offset]=titlebarButtons_colorCloseInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MIN+offset]=titlebarButtons_colorMinInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MAX+offset]=titlebarButtons_colorMaxInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE+offset]=titlebarButtons_colorKeepAboveInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW+offset]=titlebarButtons_colorKeepBelowInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_HELP+offset]=titlebarButtons_colorHelpInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MENU+offset]=titlebarButtons_colorMenuInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_SHADE+offset]=titlebarButtons_colorShadeInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS+offset]=titlebarButtons_colorAllDesktopsInactiveIcon->color();
 
     opts.noBgndGradientApps=toSet(noBgndGradientApps->text());
     opts.noBgndOpacityApps=toSet(noBgndOpacityApps->text());
@@ -3429,78 +3423,66 @@ void QtCurveConfig::setWidgetOptions(const Options &opts)
     squareTooltips->setChecked(opts.square&SQUARE_TOOLTIPS);
     squarePopupMenus->setChecked(opts.square&SQUARE_POPUP_MENUS);
 
-    if(opts.titlebarButtons&TITLEBAR_BUTTON_COLOR)
-    {
-        titlebarButtons_colorClose->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE));
-        titlebarButtons_colorMin->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN));
-        titlebarButtons_colorMax->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX));
-        titlebarButtons_colorKeepAbove->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE));
-        titlebarButtons_colorKeepBelow->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW));
-        titlebarButtons_colorHelp->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP));
-        titlebarButtons_colorMenu->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU));
-        titlebarButtons_colorShade->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE));
-        titlebarButtons_colorAllDesktops->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS));
-    }
-    else
-    {
-        QColor col(palette().color(QPalette::Active, QPalette::Button));
-
-        titlebarButtons_colorClose->setColor(col);
-        titlebarButtons_colorMin->setColor(col);
-        titlebarButtons_colorMax->setColor(col);
-        titlebarButtons_colorKeepAbove->setColor(col);
-        titlebarButtons_colorKeepBelow->setColor(col);
-        titlebarButtons_colorHelp->setColor(col);
-        titlebarButtons_colorMenu->setColor(col);
-        titlebarButtons_colorShade->setColor(col);
-        titlebarButtons_colorAllDesktops->setColor(col);
-    }
-
-    if(opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR)
-    {
-        titlebarButtons_colorCloseIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE, 1));
-        titlebarButtons_colorMinIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN, 1));
-        titlebarButtons_colorMaxIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX, 1));
-        titlebarButtons_colorKeepAboveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE, 1));
-        titlebarButtons_colorKeepBelowIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW, 1));
-        titlebarButtons_colorHelpIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP, 1));
-        titlebarButtons_colorMenuIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU, 1));
-        titlebarButtons_colorShadeIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE, 1));
-        titlebarButtons_colorAllDesktopsIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS, 1));
-
-        titlebarButtons_colorCloseInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE, 2));
-        titlebarButtons_colorMinInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN, 2));
-        titlebarButtons_colorMaxInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX, 2));
-        titlebarButtons_colorKeepAboveInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE, 2));
-        titlebarButtons_colorKeepBelowInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW, 2));
-        titlebarButtons_colorHelpInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP, 2));
-        titlebarButtons_colorMenuInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU, 2));
-        titlebarButtons_colorShadeInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE, 2));
-        titlebarButtons_colorAllDesktopsInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS, 2));
-    }
-    else
-    {
-        QColor col=KGlobalSettings::activeTextColor();
-        titlebarButtons_colorCloseIcon->setColor(col);
-        titlebarButtons_colorMinIcon->setColor(col);
-        titlebarButtons_colorMaxIcon->setColor(col);
-        titlebarButtons_colorKeepAboveIcon->setColor(col);
-        titlebarButtons_colorKeepBelowIcon->setColor(col);
-        titlebarButtons_colorHelpIcon->setColor(col);
-        titlebarButtons_colorMenuIcon->setColor(col);
-        titlebarButtons_colorShadeIcon->setColor(col);
-        titlebarButtons_colorAllDesktopsIcon->setColor(col);
-
-        col=KGlobalSettings::inactiveTextColor();
-        titlebarButtons_colorCloseInactiveIcon->setColor(col);
-        titlebarButtons_colorMinInactiveIcon->setColor(col);
-        titlebarButtons_colorMaxInactiveIcon->setColor(col);
-        titlebarButtons_colorKeepAboveInactiveIcon->setColor(col);
-        titlebarButtons_colorKeepBelowInactiveIcon->setColor(col);
-        titlebarButtons_colorHelpInactiveIcon->setColor(col);
-        titlebarButtons_colorMenuInactiveIcon->setColor(col);
-        titlebarButtons_colorShadeInactiveIcon->setColor(col);
-        titlebarButtons_colorAllDesktopsInactiveIcon->setColor(col);
+    titlebarButtons_colorClose->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE));
+    titlebarButtons_colorMin->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN));
+    titlebarButtons_colorMax->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX));
+    titlebarButtons_colorKeepAbove->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE));
+    titlebarButtons_colorKeepBelow->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW));
+    titlebarButtons_colorHelp->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP));
+    titlebarButtons_colorMenu->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU));
+    titlebarButtons_colorShade->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE));
+    titlebarButtons_colorAllDesktops->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS));
+    if (!(opts.titlebarButtons&TITLEBAR_BUTTON_COLOR)) {
+        titlebarButtons_colorClose->setEnabled(false);
+        titlebarButtons_colorMin->setEnabled(false);
+        titlebarButtons_colorMax->setEnabled(false);
+        titlebarButtons_colorKeepAbove->setEnabled(false);
+        titlebarButtons_colorKeepBelow->setEnabled(false);
+        titlebarButtons_colorHelp->setEnabled(false);
+        titlebarButtons_colorMenu->setEnabled(false);
+        titlebarButtons_colorShade->setEnabled(false);
+        titlebarButtons_colorAllDesktops->setEnabled(false);
+    }
+
+    titlebarButtons_colorCloseIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE, 1));
+    titlebarButtons_colorMinIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN, 1));
+    titlebarButtons_colorMaxIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX, 1));
+    titlebarButtons_colorKeepAboveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE, 1));
+    titlebarButtons_colorKeepBelowIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW, 1));
+    titlebarButtons_colorHelpIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP, 1));
+    titlebarButtons_colorMenuIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU, 1));
+    titlebarButtons_colorShadeIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE, 1));
+    titlebarButtons_colorAllDesktopsIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS, 1));
+
+    titlebarButtons_colorCloseInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE, 2));
+    titlebarButtons_colorMinInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN, 2));
+    titlebarButtons_colorMaxInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX, 2));
+    titlebarButtons_colorKeepAboveInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE, 2));
+    titlebarButtons_colorKeepBelowInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW, 2));
+    titlebarButtons_colorHelpInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP, 2));
+    titlebarButtons_colorMenuInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU, 2));
+    titlebarButtons_colorShadeInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE, 2));
+    titlebarButtons_colorAllDesktopsInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS, 2));
+    if (!(opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR)) {
+        titlebarButtons_colorCloseIcon->setEnabled(false);
+        titlebarButtons_colorMinIcon->setEnabled(false);
+        titlebarButtons_colorMaxIcon->setEnabled(false);
+        titlebarButtons_colorKeepAboveIcon->setEnabled(false);
+        titlebarButtons_colorKeepBelowIcon->setEnabled(false);
+        titlebarButtons_colorHelpIcon->setEnabled(false);
+        titlebarButtons_colorMenuIcon->setEnabled(false);
+        titlebarButtons_colorShadeIcon->setEnabled(false);
+        titlebarButtons_colorAllDesktopsIcon->setEnabled(false);
+
+        titlebarButtons_colorCloseInactiveIcon->setEnabled(false);
+        titlebarButtons_colorMinInactiveIcon->setEnabled(false);
+        titlebarButtons_colorMaxInactiveIcon->setEnabled(false);
+        titlebarButtons_colorKeepAboveInactiveIcon->setEnabled(false);
+        titlebarButtons_colorKeepBelowInactiveIcon->setEnabled(false);
+        titlebarButtons_colorHelpInactiveIcon->setEnabled(false);
+        titlebarButtons_colorMenuInactiveIcon->setEnabled(false);
+        titlebarButtons_colorShadeInactiveIcon->setEnabled(false);
+        titlebarButtons_colorAllDesktopsInactiveIcon->setEnabled(false);
     }
 
     titlebarButtons_button->setChecked(opts.titlebarButtons&TITLEBAR_BUTTON_STD_COLOR);
diff --git a/qt4/style/qtcurve.cpp b/qt4/style/qtcurve.cpp
index 5447e07..315a507 100644
--- a/qt4/style/qtcurve.cpp
+++ b/qt4/style/qtcurve.cpp
@@ -13016,6 +13016,17 @@ void Style::readMdiPositions() const
 {
     if(0==m_mdiButtons[0].size() && 0==m_mdiButtons[1].size())
     {
+#ifdef Q_OS_MAC
+        // no control over where the system menu appears, so we have little choice
+        // but to keep it at its default position. The user can still override this.
+        m_mdiButtons[0].append(SC_TitleBarSysMenu);
+        m_mdiButtons[0].append(SC_TitleBarCloseButton);
+        m_mdiButtons[0].append(SC_TitleBarMinButton);
+        m_mdiButtons[0].append(SC_TitleBarMaxButton);
+
+        m_mdiButtons[1].append(SC_TitleBarShadeButton);
+        m_mdiButtons[1].append(SC_TitleBarContextHelpButton);
+#else
         // Set defaults...
         m_mdiButtons[0].append(SC_TitleBarSysMenu);
         m_mdiButtons[0].append(SC_TitleBarShadeButton);
@@ -13025,10 +13036,11 @@ void Style::readMdiPositions() const
         m_mdiButtons[1].append(SC_TitleBarMaxButton);
         m_mdiButtons[1].append(WINDOWTITLE_SPACER);
         m_mdiButtons[1].append(SC_TitleBarCloseButton);
+#endif
 
 #ifdef QTC_QT4_ENABLE_KDE
-        KConfig      cfg("kwinrc");
-        KConfigGroup grp(&cfg, "Style");
+        KSharedConfigPtr cfg = KSharedConfig::openConfig("kwinrc");
+        KConfigGroup grp = cfg->group("Style");
 
         if(grp.readEntry("CustomButtonPositions", false))
         {
@@ -13044,7 +13056,8 @@ void Style::readMdiPositions() const
             if(!right.isEmpty())
                 parseWindowLine(right, m_mdiButtons[1]);
 
-            // Designer uses shade buttons, not min/max - so if we dont have shade in our kwin config. then add this button near the max button...
+            // Designer uses shade buttons, not min/max - so if we don't have shade in our kwin config.
+            // then add this button near the max button...
             if(-1==m_mdiButtons[0].indexOf(SC_TitleBarShadeButton) && -1==m_mdiButtons[1].indexOf(SC_TitleBarShadeButton))
             {
                 int maxPos=m_mdiButtons[0].indexOf(SC_TitleBarMaxButton);
diff --git a/qt5/common/config_file.cpp b/qt5/common/config_file.cpp
index 7630f4e..2de6268 100644
--- a/qt5/common/config_file.cpp
+++ b/qt5/common/config_file.cpp
@@ -31,6 +31,14 @@
 #include <QTextStream>
 #include <QSvgRenderer>
 #include <QPainter>
+#include <QDebug>
+
+//
+// NB!
+// This file is built twice (for targets kstyle_qtcurve5_config and qtcurve-qt5),
+// and the CONFIG_WRITE and CONFIG_DIALOG tokens are likely to have different values
+// each time.
+//
 
 #define CONFIG_FILE "stylerc"
 #define OLD_CONFIG_FILE "qtcurvestylerc"
@@ -1306,14 +1314,14 @@ bool qtcReadConfig(const QString &file, Options *opts, Options *defOpts, bool ch
             CFG_READ_ALIGN(titlebarAlignment);
             CFG_READ_EFFECT(titlebarEffect);
             CFG_READ_BOOL(centerTabText);
-#if defined CONFIG_DIALOG
+// #if defined CONFIG_DIALOG
             CFG_READ_INT(expanderHighlight);
             CFG_READ_BOOL(mapKdeIcons);
-#endif
+// #endif
             CFG_READ_BOOL(gtkButtonOrder);
-#if defined CONFIG_DIALOG
+// #if defined CONFIG_DIALOG
             CFG_READ_BOOL(reorderGtkButtons);
-#endif
+// #endif
             CFG_READ_APPEARANCE(titlebarAppearance, APP_ALLOW_NONE);
             CFG_READ_APPEARANCE(inactiveTitlebarAppearance, APP_ALLOW_NONE);
 
@@ -1336,10 +1344,8 @@ bool qtcReadConfig(const QString &file, Options *opts, Options *defOpts, bool ch
             CFG_READ_STRING_LIST(noBgndOpacityApps);
             CFG_READ_STRING_LIST(noMenuBgndOpacityApps);
             CFG_READ_STRING_LIST(noBgndImageApps);
-#ifdef CONFIG_DIALOG
             if (opts->version < qtcMakeVersion(1, 7, 2))
                 opts->noMenuBgndOpacityApps << "gtk";
-#endif
             CFG_READ_STRING_LIST(menubarApps);
             CFG_READ_STRING_LIST(statusbarApps);
             CFG_READ_STRING_LIST(useQtFileDialogApps);
@@ -1349,28 +1355,27 @@ bool qtcReadConfig(const QString &file, Options *opts, Options *defOpts, bool ch
             readDoubleList(cfg, "customShades", opts->customShades, QTC_NUM_STD_SHADES);
             readDoubleList(cfg, "customAlphas", opts->customAlphas, NUM_STD_ALPHAS);
 
-            if (opts->titlebarButtons & TITLEBAR_BUTTON_COLOR ||
-                opts->titlebarButtons & TITLEBAR_BUTTON_ICON_COLOR) {
-                QStringList cols(readStringEntry(cfg, "titlebarButtonColors")
-                                 .split(',', QString::SkipEmptyParts));
-                if (cols.count() &&
-                    0 == (cols.count() % NUM_TITLEBAR_BUTTONS) &&
-                    cols.count() <= (NUM_TITLEBAR_BUTTONS * 3)) {
-                    QStringList::ConstIterator it(cols.begin());
-                    QStringList::ConstIterator end(cols.end());
-
-                    for (int i = 0;it != end;++it, ++i) {
-                        QColor col;
-                        qtcSetRgb(&col, TO_LATIN1((*it)));
-                        opts->titlebarButtonColors[i]=col;
-                    }
-                    if (cols.count() < (NUM_TITLEBAR_BUTTONS + 1)) {
-                        opts->titlebarButtons &= ~TITLEBAR_BUTTON_ICON_COLOR;
-                    }
-                } else {
-                    opts->titlebarButtons &= ~TITLEBAR_BUTTON_COLOR;
+            // as with saving, we should always read the titleButtonColor values
+            // so that they can be saved again without losing the information.
+            QStringList cols(readStringEntry(cfg, "titlebarButtonColors")
+                             .split(',', QString::SkipEmptyParts));
+            if (cols.count() &&
+                0 == (cols.count() % NUM_TITLEBAR_BUTTONS) &&
+                cols.count() <= (NUM_TITLEBAR_BUTTONS * 3)) {
+                QStringList::ConstIterator it(cols.begin());
+                QStringList::ConstIterator end(cols.end());
+
+                for (int i = 0;it != end;++it, ++i) {
+                    QColor col;
+                    qtcSetRgb(&col, TO_LATIN1((*it)));
+                    opts->titlebarButtonColors[i]=col;
+                }
+                if (cols.count() < (NUM_TITLEBAR_BUTTONS + 1)) {
                     opts->titlebarButtons &= ~TITLEBAR_BUTTON_ICON_COLOR;
                 }
+            } else {
+                opts->titlebarButtons &= ~TITLEBAR_BUTTON_COLOR;
+                opts->titlebarButtons &= ~TITLEBAR_BUTTON_ICON_COLOR;
             }
 
             for(i=APPEARANCE_CUSTOM1; i<(APPEARANCE_CUSTOM1+NUM_CUSTOM_GRAD); ++i)
@@ -1477,9 +1482,7 @@ void qtcDefaultSettings(Options *opts)
     opts->round=ROUND_EXTRA;
     opts->gtkButtonOrder=false;
     opts->dwtAppearance=APPEARANCE_CUSTOM1;
-#if defined CONFIG_DIALOG
     opts->reorderGtkButtons=false;
-#endif
     opts->bgndImage.type=IMG_NONE;
     opts->bgndImage.width=opts->bgndImage.height=0;
     opts->bgndImage.onBorder=false;
@@ -1619,10 +1622,8 @@ void qtcDefaultSettings(Options *opts)
                             << "vmplayer";
     opts->noMenuStripeApps << "gtk" << "soffice.bin";
 
-#if defined CONFIG_DIALOG
     opts->mapKdeIcons=true;
     opts->expanderHighlight=DEFAULT_EXPANDER_HIGHLIGHT_FACTOR;
-#endif
     opts->titlebarAppearance=APPEARANCE_CUSTOM1;
     opts->inactiveTitlebarAppearance=APPEARANCE_CUSTOM1;
     opts->titlebarButtonAppearance=APPEARANCE_GRADIENT;
@@ -2323,9 +2324,10 @@ bool qtcWriteConfig(KConfig *cfg, const Options &opts, const Options &def, bool
         CFG_WRITE_ENTRY_NUM(titlebarButtons);
         CFG_WRITE_ENTRY(titlebarIcon);
 
-        if((opts.titlebarButtons&TITLEBAR_BUTTON_COLOR || opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR) &&
-            opts.titlebarButtonColors.size() && 0==(opts.titlebarButtonColors.size()%NUM_TITLEBAR_BUTTONS))
-        {
+        // Why would we only write the button colours when the info is actually being used? This
+        // makes it impossible to deactivate the feature and then reactivate it without losing
+        // custom colours.
+        if (opts.titlebarButtonColors.size() && 0==(opts.titlebarButtonColors.size()%NUM_TITLEBAR_BUTTONS)) {
             QString     val;
             QTextStream str(&val);
             for(unsigned int i=0; i<opts.titlebarButtonColors.size(); ++i)
@@ -2354,9 +2356,7 @@ bool qtcWriteConfig(KConfig *cfg, const Options &opts, const Options &def, bool
         CFG_WRITE_ENTRY(gtkComboMenus);
         CFG_WRITE_ENTRY(doubleGtkComboArrow);
         CFG_WRITE_ENTRY(gtkButtonOrder);
-#if defined CONFIG_DIALOG
         CFG_WRITE_ENTRY(reorderGtkButtons);
-#endif
         CFG_WRITE_ENTRY(mapKdeIcons);
         CFG_WRITE_ENTRY(shading);
         CFG_WRITE_ENTRY(titlebarAlignment);
diff --git a/qt5/config/qtcurveconfig.cpp b/qt5/config/qtcurveconfig.cpp
index df8ce89..cce4883 100644
--- a/qt5/config/qtcurveconfig.cpp
+++ b/qt5/config/qtcurveconfig.cpp
@@ -1220,20 +1220,6 @@ QtCurveConfig::QtCurveConfig(QWidget *parent)
         titleLabel->setVisible(false);
         stackList->setVisible(false);
     }
-    // KMainWindow dereferences KGlobal when it closes. When KGlobal's refs get
-    // to 0 it quits! ...running kcmshell4 style does not seem to increase ref
-    // count of KGlobal - therefore we do it here - otherwse kcmshell4 would
-    // exit immediately after QtCurve's config dialog was closed :-(
-    if (QCoreApplication::applicationName() == QLatin1String("kcmshell")) {
-        static std::once_flag ref_flag;
-        std::call_once(ref_flag, [] {
-        // TODO figure out if it is still necessary
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
-                KGlobal::ref();
-#pragma GCC diagnostic pop
-            });
-    }
 }
 
 QtCurveConfig::~QtCurveConfig()
@@ -1287,7 +1273,8 @@ void QtCurveConfig::save()
     else
         removeInstalledThemeFile(BGND_FILE MENU_FILE);
 
-    qtcWriteConfig(nullptr, opts, presets[defaultText].opts);
+    // avoid surprises and always save the full config
+    qtcWriteConfig(nullptr, opts, presets[defaultText].opts, true);
 
     // This is only read by KDE3...
     KConfig      k3globals(kdeHome(true)+"/share/config/kdeglobals", KConfig::CascadeConfig);
@@ -3104,43 +3091,39 @@ void QtCurveConfig::setOptions(Options &opts)
         opts.customAlphas[0]=0;
 
     opts.titlebarButtons=getTitleBarButtonFlags();
-    opts.titlebarButtonColors.clear();
-    if(opts.titlebarButtons&TITLEBAR_BUTTON_COLOR || opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR)
-    {
-        opts.titlebarButtonColors[TITLEBAR_CLOSE]=titlebarButtons_colorClose->color();
-        opts.titlebarButtonColors[TITLEBAR_MIN]=titlebarButtons_colorMin->color();
-        opts.titlebarButtonColors[TITLEBAR_MAX]=titlebarButtons_colorMax->color();
-        opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE]=titlebarButtons_colorKeepAbove->color();
-        opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW]=titlebarButtons_colorKeepBelow->color();
-        opts.titlebarButtonColors[TITLEBAR_HELP]=titlebarButtons_colorHelp->color();
-        opts.titlebarButtonColors[TITLEBAR_MENU]=titlebarButtons_colorMenu->color();
-        opts.titlebarButtonColors[TITLEBAR_SHADE]=titlebarButtons_colorShade->color();
-        opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS]=titlebarButtons_colorAllDesktops->color();
-
-        if(opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR)
-        {
-            int offset=NUM_TITLEBAR_BUTTONS;
-            opts.titlebarButtonColors[TITLEBAR_CLOSE+offset]=titlebarButtons_colorCloseIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MIN+offset]=titlebarButtons_colorMinIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MAX+offset]=titlebarButtons_colorMaxIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE+offset]=titlebarButtons_colorKeepAboveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW+offset]=titlebarButtons_colorKeepBelowIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_HELP+offset]=titlebarButtons_colorHelpIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MENU+offset]=titlebarButtons_colorMenuIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_SHADE+offset]=titlebarButtons_colorShadeIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS+offset]=titlebarButtons_colorAllDesktopsIcon->color();
-            offset+=NUM_TITLEBAR_BUTTONS;
-            opts.titlebarButtonColors[TITLEBAR_CLOSE+offset]=titlebarButtons_colorCloseInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MIN+offset]=titlebarButtons_colorMinInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MAX+offset]=titlebarButtons_colorMaxInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE+offset]=titlebarButtons_colorKeepAboveInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW+offset]=titlebarButtons_colorKeepBelowInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_HELP+offset]=titlebarButtons_colorHelpInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_MENU+offset]=titlebarButtons_colorMenuInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_SHADE+offset]=titlebarButtons_colorShadeInactiveIcon->color();
-            opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS+offset]=titlebarButtons_colorAllDesktopsInactiveIcon->color();
-        }
-    }
+    // don't clear the options since we may not be setting all of them again
+    // for the same reason we always update opts.titlebarButtonColors; they may not be
+    // used but the colour info shouldn't be lost.
+    opts.titlebarButtonColors[TITLEBAR_CLOSE]=titlebarButtons_colorClose->color();
+    opts.titlebarButtonColors[TITLEBAR_MIN]=titlebarButtons_colorMin->color();
+    opts.titlebarButtonColors[TITLEBAR_MAX]=titlebarButtons_colorMax->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE]=titlebarButtons_colorKeepAbove->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW]=titlebarButtons_colorKeepBelow->color();
+    opts.titlebarButtonColors[TITLEBAR_HELP]=titlebarButtons_colorHelp->color();
+    opts.titlebarButtonColors[TITLEBAR_MENU]=titlebarButtons_colorMenu->color();
+    opts.titlebarButtonColors[TITLEBAR_SHADE]=titlebarButtons_colorShade->color();
+    opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS]=titlebarButtons_colorAllDesktops->color();
+
+    int offset=NUM_TITLEBAR_BUTTONS;
+    opts.titlebarButtonColors[TITLEBAR_CLOSE+offset]=titlebarButtons_colorCloseIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MIN+offset]=titlebarButtons_colorMinIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MAX+offset]=titlebarButtons_colorMaxIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE+offset]=titlebarButtons_colorKeepAboveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW+offset]=titlebarButtons_colorKeepBelowIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_HELP+offset]=titlebarButtons_colorHelpIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MENU+offset]=titlebarButtons_colorMenuIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_SHADE+offset]=titlebarButtons_colorShadeIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS+offset]=titlebarButtons_colorAllDesktopsIcon->color();
+    offset+=NUM_TITLEBAR_BUTTONS;
+    opts.titlebarButtonColors[TITLEBAR_CLOSE+offset]=titlebarButtons_colorCloseInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MIN+offset]=titlebarButtons_colorMinInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MAX+offset]=titlebarButtons_colorMaxInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_ABOVE+offset]=titlebarButtons_colorKeepAboveInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_KEEP_BELOW+offset]=titlebarButtons_colorKeepBelowInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_HELP+offset]=titlebarButtons_colorHelpInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_MENU+offset]=titlebarButtons_colorMenuInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_SHADE+offset]=titlebarButtons_colorShadeInactiveIcon->color();
+    opts.titlebarButtonColors[TITLEBAR_ALL_DESKTOPS+offset]=titlebarButtons_colorAllDesktopsInactiveIcon->color();
 
     opts.noBgndGradientApps=toSet(noBgndGradientApps->text());
     opts.noBgndOpacityApps=toSet(noBgndOpacityApps->text());
@@ -3402,78 +3385,68 @@ void QtCurveConfig::setWidgetOptions(const Options &opts)
     squareTooltips->setChecked(opts.square&SQUARE_TOOLTIPS);
     squarePopupMenus->setChecked(opts.square&SQUARE_POPUP_MENUS);
 
-    if(opts.titlebarButtons&TITLEBAR_BUTTON_COLOR)
-    {
-        titlebarButtons_colorClose->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE));
-        titlebarButtons_colorMin->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN));
-        titlebarButtons_colorMax->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX));
-        titlebarButtons_colorKeepAbove->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE));
-        titlebarButtons_colorKeepBelow->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW));
-        titlebarButtons_colorHelp->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP));
-        titlebarButtons_colorMenu->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU));
-        titlebarButtons_colorShade->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE));
-        titlebarButtons_colorAllDesktops->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS));
-    }
-    else
-    {
-        QColor col(palette().color(QPalette::Active, QPalette::Button));
-
-        titlebarButtons_colorClose->setColor(col);
-        titlebarButtons_colorMin->setColor(col);
-        titlebarButtons_colorMax->setColor(col);
-        titlebarButtons_colorKeepAbove->setColor(col);
-        titlebarButtons_colorKeepBelow->setColor(col);
-        titlebarButtons_colorHelp->setColor(col);
-        titlebarButtons_colorMenu->setColor(col);
-        titlebarButtons_colorShade->setColor(col);
-        titlebarButtons_colorAllDesktops->setColor(col);
-    }
-
-    if(opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR)
-    {
-        titlebarButtons_colorCloseIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE, 1));
-        titlebarButtons_colorMinIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN, 1));
-        titlebarButtons_colorMaxIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX, 1));
-        titlebarButtons_colorKeepAboveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE, 1));
-        titlebarButtons_colorKeepBelowIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW, 1));
-        titlebarButtons_colorHelpIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP, 1));
-        titlebarButtons_colorMenuIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU, 1));
-        titlebarButtons_colorShadeIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE, 1));
-        titlebarButtons_colorAllDesktopsIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS, 1));
-
-        titlebarButtons_colorCloseInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE, 2));
-        titlebarButtons_colorMinInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN, 2));
-        titlebarButtons_colorMaxInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX, 2));
-        titlebarButtons_colorKeepAboveInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE, 2));
-        titlebarButtons_colorKeepBelowInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW, 2));
-        titlebarButtons_colorHelpInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP, 2));
-        titlebarButtons_colorMenuInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU, 2));
-        titlebarButtons_colorShadeInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE, 2));
-        titlebarButtons_colorAllDesktopsInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS, 2));
-    } else {
-        QColor col = KColorScheme(QPalette::Active, KColorScheme::Window)
-            .foreground(KColorScheme::ActiveText).color();
-        titlebarButtons_colorCloseIcon->setColor(col);
-        titlebarButtons_colorMinIcon->setColor(col);
-        titlebarButtons_colorMaxIcon->setColor(col);
-        titlebarButtons_colorKeepAboveIcon->setColor(col);
-        titlebarButtons_colorKeepBelowIcon->setColor(col);
-        titlebarButtons_colorHelpIcon->setColor(col);
-        titlebarButtons_colorMenuIcon->setColor(col);
-        titlebarButtons_colorShadeIcon->setColor(col);
-        titlebarButtons_colorAllDesktopsIcon->setColor(col);
-
-        col = KColorScheme(QPalette::Inactive, KColorScheme::Window)
-            .foreground().color();
-        titlebarButtons_colorCloseInactiveIcon->setColor(col);
-        titlebarButtons_colorMinInactiveIcon->setColor(col);
-        titlebarButtons_colorMaxInactiveIcon->setColor(col);
-        titlebarButtons_colorKeepAboveInactiveIcon->setColor(col);
-        titlebarButtons_colorKeepBelowInactiveIcon->setColor(col);
-        titlebarButtons_colorHelpInactiveIcon->setColor(col);
-        titlebarButtons_colorMenuInactiveIcon->setColor(col);
-        titlebarButtons_colorShadeInactiveIcon->setColor(col);
-        titlebarButtons_colorAllDesktopsInactiveIcon->setColor(col);
+    // Always set all colours in the dialog, even if they're not used.
+    titlebarButtons_colorClose->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE));
+    titlebarButtons_colorMin->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN));
+    titlebarButtons_colorMax->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX));
+    titlebarButtons_colorKeepAbove->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE));
+    titlebarButtons_colorKeepBelow->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW));
+    titlebarButtons_colorHelp->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP));
+    titlebarButtons_colorMenu->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU));
+    titlebarButtons_colorShade->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE));
+    titlebarButtons_colorAllDesktops->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS));
+    // however, we can disable the widgets when their info isn't used.
+    if (!(opts.titlebarButtons&TITLEBAR_BUTTON_COLOR)) {
+        titlebarButtons_colorClose->setEnabled(false);
+        titlebarButtons_colorMin->setEnabled(false);
+        titlebarButtons_colorMax->setEnabled(false);
+        titlebarButtons_colorKeepAbove->setEnabled(false);
+        titlebarButtons_colorKeepBelow->setEnabled(false);
+        titlebarButtons_colorHelp->setEnabled(false);
+        titlebarButtons_colorMenu->setEnabled(false);
+        titlebarButtons_colorShade->setEnabled(false);
+        titlebarButtons_colorAllDesktops->setEnabled(false);
+    }
+
+    titlebarButtons_colorCloseIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE, 1));
+    titlebarButtons_colorMinIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN, 1));
+    titlebarButtons_colorMaxIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX, 1));
+    titlebarButtons_colorKeepAboveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE, 1));
+    titlebarButtons_colorKeepBelowIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW, 1));
+    titlebarButtons_colorHelpIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP, 1));
+    titlebarButtons_colorMenuIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU, 1));
+    titlebarButtons_colorShadeIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE, 1));
+    titlebarButtons_colorAllDesktopsIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS, 1));
+
+    titlebarButtons_colorCloseInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_CLOSE, 2));
+    titlebarButtons_colorMinInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MIN, 2));
+    titlebarButtons_colorMaxInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MAX, 2));
+    titlebarButtons_colorKeepAboveInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_ABOVE, 2));
+    titlebarButtons_colorKeepBelowInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_KEEP_BELOW, 2));
+    titlebarButtons_colorHelpInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_HELP, 2));
+    titlebarButtons_colorMenuInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_MENU, 2));
+    titlebarButtons_colorShadeInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_SHADE, 2));
+    titlebarButtons_colorAllDesktopsInactiveIcon->setColor(getColor(opts.titlebarButtonColors, TITLEBAR_ALL_DESKTOPS, 2));
+    if (!(opts.titlebarButtons&TITLEBAR_BUTTON_ICON_COLOR)) {
+        titlebarButtons_colorCloseIcon->setEnabled(false);
+        titlebarButtons_colorMinIcon->setEnabled(false);
+        titlebarButtons_colorMaxIcon->setEnabled(false);
+        titlebarButtons_colorKeepAboveIcon->setEnabled(false);
+        titlebarButtons_colorKeepBelowIcon->setEnabled(false);
+        titlebarButtons_colorHelpIcon->setEnabled(false);
+        titlebarButtons_colorMenuIcon->setEnabled(false);
+        titlebarButtons_colorShadeIcon->setEnabled(false);
+        titlebarButtons_colorAllDesktopsIcon->setEnabled(false);
+
+        titlebarButtons_colorCloseInactiveIcon->setEnabled(false);
+        titlebarButtons_colorMinInactiveIcon->setEnabled(false);
+        titlebarButtons_colorMaxInactiveIcon->setEnabled(false);
+        titlebarButtons_colorKeepAboveInactiveIcon->setEnabled(false);
+        titlebarButtons_colorKeepBelowInactiveIcon->setEnabled(false);
+        titlebarButtons_colorHelpInactiveIcon->setEnabled(false);
+        titlebarButtons_colorMenuInactiveIcon->setEnabled(false);
+        titlebarButtons_colorShadeInactiveIcon->setEnabled(false);
+        titlebarButtons_colorAllDesktopsInactiveIcon->setEnabled(false);
     }
 
     titlebarButtons_button->setChecked(opts.titlebarButtons&TITLEBAR_BUTTON_STD_COLOR);
diff --git a/qt5/style/qtcurve.cpp b/qt5/style/qtcurve.cpp
index b130a0e..1659d97 100644
--- a/qt5/style/qtcurve.cpp
+++ b/qt5/style/qtcurve.cpp
@@ -3919,6 +3919,17 @@ Style::getMdiColors(const QStyleOption *option, bool active) const
 void Style::readMdiPositions() const
 {
     if (0==m_mdiButtons[0].size() && 0==m_mdiButtons[1].size()) {
+#ifdef Q_OS_OSX
+        // no control over where the system menu appears, so we have little choice
+        // but to keep it at its default position. The user can still override this.
+        m_mdiButtons[0].append(SC_TitleBarSysMenu);
+        m_mdiButtons[0].append(SC_TitleBarCloseButton);
+        m_mdiButtons[0].append(SC_TitleBarMinButton);
+        m_mdiButtons[0].append(SC_TitleBarMaxButton);
+
+        m_mdiButtons[1].append(SC_TitleBarShadeButton);
+        m_mdiButtons[1].append(SC_TitleBarContextHelpButton);
+#else
         // Set defaults...
         m_mdiButtons[0].append(SC_TitleBarSysMenu);
         m_mdiButtons[0].append(SC_TitleBarShadeButton);
@@ -3928,45 +3939,43 @@ void Style::readMdiPositions() const
         m_mdiButtons[1].append(SC_TitleBarMaxButton);
         m_mdiButtons[1].append(WINDOWTITLE_SPACER);
         m_mdiButtons[1].append(SC_TitleBarCloseButton);
+#endif
 
 #ifdef QTC_QT5_ENABLE_KDE
-        KConfig      cfg("kwinrc");
-        KConfigGroup grp(&cfg, "Style");
+        KSharedConfigPtr cfg = KSharedConfig::openConfig("kwinrc");
+        KConfigGroup grp = cfg->group("org.kde.kdecoration2");
 
-        if(grp.readEntry("CustomButtonPositions", false))
-        {
-            QString left=grp.readEntry("ButtonsOnLeft"),
-                right=grp.readEntry("ButtonsOnRight");
+        QString left=grp.readEntry("ButtonsOnLeft", QString()),
+            right=grp.readEntry("ButtonsOnRight", QString());
 
-            if(!left.isEmpty() || !right.isEmpty())
-                m_mdiButtons[0].clear(), m_mdiButtons[1].clear();
+        if(!left.isEmpty() || !right.isEmpty())
+            m_mdiButtons[0].clear(), m_mdiButtons[1].clear();
 
-            if(!left.isEmpty())
-                parseWindowLine(left, m_mdiButtons[0]);
+        if(!left.isEmpty())
+            parseWindowLine(left, m_mdiButtons[0]);
 
-            if(!right.isEmpty())
-                parseWindowLine(right, m_mdiButtons[1]);
+        if(!right.isEmpty())
+            parseWindowLine(right, m_mdiButtons[1]);
 
-            // Designer uses shade buttons, not min/max - so if we dont have shade in our kwin config. then add this button near the max button...
-            if(-1==m_mdiButtons[0].indexOf(SC_TitleBarShadeButton) && -1==m_mdiButtons[1].indexOf(SC_TitleBarShadeButton))
-            {
-                int maxPos=m_mdiButtons[0].indexOf(SC_TitleBarMaxButton);
+        // Designer uses shade buttons, not min/max - so if we don't have shade in our kwin config. 
+        // then add this button near the max button...
+        if (-1==m_mdiButtons[0].indexOf(SC_TitleBarShadeButton) && -1==m_mdiButtons[1].indexOf(SC_TitleBarShadeButton)) {
+            int maxPos=m_mdiButtons[0].indexOf(SC_TitleBarMaxButton);
 
-                if(-1==maxPos) // Left doesnt have max button, assume right does and add shade there
-                {
-                    int minPos=m_mdiButtons[1].indexOf(SC_TitleBarMinButton);
-                    maxPos=m_mdiButtons[1].indexOf(SC_TitleBarMaxButton);
+            if(-1==maxPos) // Left doesnt have max button, assume right does and add shade there
+            {
+                int minPos=m_mdiButtons[1].indexOf(SC_TitleBarMinButton);
+                maxPos=m_mdiButtons[1].indexOf(SC_TitleBarMaxButton);
 
-                    m_mdiButtons[1].insert(minPos<maxPos ? (minPos==-1 ? 0 : minPos)
-                                            : (maxPos==-1 ? 0 : maxPos), SC_TitleBarShadeButton);
-                }
-                else // Add to left button
-                {
-                    int minPos=m_mdiButtons[0].indexOf(SC_TitleBarMinButton);
+                m_mdiButtons[1].insert(minPos<maxPos ? (minPos==-1 ? 0 : minPos)
+                                        : (maxPos==-1 ? 0 : maxPos), SC_TitleBarShadeButton);
+            }
+            else // Add to left button
+            {
+                int minPos=m_mdiButtons[0].indexOf(SC_TitleBarMinButton);
 
-                    m_mdiButtons[1].insert(minPos>maxPos ? (minPos==-1 ? 0 : minPos)
-                                            : (maxPos==-1 ? 0 : maxPos), SC_TitleBarShadeButton);
-                }
+                m_mdiButtons[1].insert(minPos>maxPos ? (minPos==-1 ? 0 : minPos)
+                                        : (maxPos==-1 ? 0 : maxPos), SC_TitleBarShadeButton);
             }
         }
 #endif
