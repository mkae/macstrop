diff --git cmake/KF5AuthMacros.cmake cmake/KF5AuthMacros.cmake
index 15f05c7..58a9951 100644
--- cmake/KF5AuthMacros.cmake
+++ cmake/KF5AuthMacros.cmake
@@ -55,9 +55,10 @@ endfunction()
 # the install phase
 function(KAUTH_INSTALL_ACTIONS HELPER_ID ACTIONS_FILE)
 
-  if(KAUTH_BACKEND_NAME STREQUAL "APPLE")
+  if(KAUTH_BACKEND_NAME STREQUAL "APPLE" OR KAUTH_BACKEND_NAME STREQUAL "OSX")
     get_target_property(kauth_policy_gen KF5::kauth-policy-gen LOCATION)
     install(CODE "execute_process(COMMAND ${kauth_policy_gen} ${ACTIONS_FILE} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})")
+    message(STATUS "installation will execute ${kauth_policy_gen} ${ACTIONS_FILE} in ${CMAKE_CURRENT_SOURCE_DIR}")
   elseif(KAUTH_BACKEND_NAME STREQUAL "POLKITQT" OR KAUTH_BACKEND_NAME STREQUAL "POLKITQT5-1")
     set(_output ${CMAKE_CURRENT_BINARY_DIR}/${HELPER_ID}.policy)
     get_filename_component(_input ${ACTIONS_FILE} ABSOLUTE)
diff --git src/CMakeLists.txt src/CMakeLists.txt
index 1b6930d..684a86c 100644
--- src/CMakeLists.txt
+++ src/CMakeLists.txt
@@ -57,6 +57,10 @@ if (NOT "${KAUTH_BACKEND_NAME}" STREQUAL "FAKE")
     # KAUTH_POLICY_GEN_SRCS has been generated from ConfigureChecks.cmake
     add_executable(kauth-policy-gen ${KAUTH_POLICY_GEN_SRCS})
     add_executable(KF5::kauth-policy-gen ALIAS kauth-policy-gen)
+    if (APPLE)
+        include(ECMMarkNonGuiExecutable)
+        ecm_mark_nongui_executable(kauth-policy-gen)
+    endif ()
 
     # KAUTH_POLICY_GEN_LIBRARIES has been generated from ConfigureChecks.cmake
     target_link_libraries( kauth-policy-gen PRIVATE ${KAUTH_POLICY_GEN_LIBRARIES} )
diff --git src/backends/dbus/DBusHelperProxy.cpp src/backends/dbus/DBusHelperProxy.cpp
index decc267..fed8ba9 100644
--- src/backends/dbus/DBusHelperProxy.cpp
+++ src/backends/dbus/DBusHelperProxy.cpp
@@ -93,7 +93,10 @@
     //if already connected reply will be false but we won't have an error or a reason to fail
     if (!connected && m_busConnection.lastError().isValid()) {
         ActionReply errorReply = ActionReply::DBusErrorReply();
-        errorReply.setErrorDescription(tr("DBus Backend error: connection to helper failed. %1").arg(m_busConnection.lastError().message()));
+        errorReply.setErrorDescription(tr("DBus Backend error: connection to helper failed. %1\n(application: %2 helper: %3)").arg(
+                m_busConnection.lastError().message(),
+                qApp->applicationName(),
+                helperID));
         emit actionPerformed(action, errorReply);
         return;
     }
@@ -166,12 +169,12 @@
     new Kf5authAdaptor(this);
 
     if (!m_busConnection.registerService(name)) {
-        qDebug() << "couldn't register service" << m_busConnection.lastError();
+        qCWarning(KAUTH) << "Error registering helper DBus service" << name << m_busConnection.lastError().message();
         return false;
     }
 
     if (!m_busConnection.registerObject(QLatin1String("/"), this)) {
-        qDebug() << "couldn't register object" << m_busConnection.lastError();
+        qCWarning(KAUTH) << "Error registering helper DBus object:" << m_busConnection.lastError().message();
         return false;
     }
 
diff --git src/backends/mac/AuthServicesBackend.cpp src/backends/mac/AuthServicesBackend.cpp
index e832bfe..e326a51 100644
--- src/backends/mac/AuthServicesBackend.cpp
+++ src/backends/mac/AuthServicesBackend.cpp
@@ -1,5 +1,6 @@
 /*
 *   Copyright (C) 2008 Nicola Gigante <nicola.gigante@gmail.com>
+*   Copyright (C) 2014,2016 Ren√© Bertin <rjvbertin@gmail.com>
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published by
@@ -18,17 +19,25 @@
 */
 
 #include "AuthServicesBackend.h"
-#include <Security/Security.h>
 
 #include <QtCore/qplugin.h>
 
+#include <QLoggingCategory>
+#include <QDebug>
+
+Q_DECLARE_LOGGING_CATEGORY(KAUTH_OSX)
+#if QT_VERSION >= QT_VERSION_CHECK(5, 4, 0)
+// logging category for this backend, default: log stuff >= warning
+Q_LOGGING_CATEGORY(KAUTH_OSX, "kf5.kauth.apple", QtWarningMsg)
+#else
+Q_LOGGING_CATEGORY(KAUTH_OSX, "kf5.kauth.apple")
+#endif
+
 namespace KAuth
 {
 
 static AuthorizationRef s_authRef = NULL;
 
-AuthorizationRef authRef();
-
 AuthorizationRef authRef()
 {
     if (!s_authRef) {
@@ -38,10 +47,55 @@ AuthorizationRef authRef()
     return s_authRef;
 }
 
+// GetActionRights return codes:
+//     errAuthorizationSuccess                 = 0,
+//     errAuthorizationInvalidSet              = -60001, /* The authorization rights are invalid. */
+//     errAuthorizationInvalidRef              = -60002, /* The authorization reference is invalid. */
+//     errAuthorizationInvalidTag              = -60003, /* The authorization tag is invalid. */
+//     errAuthorizationInvalidPointer          = -60004, /* The returned authorization is invalid. */
+//     errAuthorizationDenied                  = -60005, /* The authorization was denied. */
+//     errAuthorizationCanceled                = -60006, /* The authorization was cancelled by the user. */
+//     errAuthorizationInteractionNotAllowed   = -60007, /* The authorization was denied since no user interaction was possible. */
+//     errAuthorizationInternal                = -60008, /* Unable to obtain authorization for this operation. */
+//     errAuthorizationExternalizeNotAllowed	= -60009, /* The authorization is not allowed to be converted to an external format. */
+//     errAuthorizationInternalizeNotAllowed	= -60010, /* The authorization is not allowed to be created from an external format. */
+//     errAuthorizationInvalidFlags            = -60011, /* The provided option flag(s) are invalid for this authorization operation. */
+//     errAuthorizationToolExecuteFailure      = -60031, /* The specified program could not be executed. */
+//     errAuthorizationToolEnvironmentError    = -60032, /* An invalid status was returned during execution of a privileged tool. */
+//     errAuthorizationBadAddress              = -60033, /* The requested socket address is invalid (must be 0-1023 inclusive). */
+static OSStatus GetActionRights(const QString &action, AuthorizationFlags flags, AuthorizationRef auth)
+{
+    AuthorizationItem item;
+    item.name = action.toUtf8().constData();
+    item.valueLength = 0;
+    item.value = NULL;
+    item.flags = 0;
+
+    AuthorizationRights rights;
+    rights.count = 1;
+    rights.items = &item;
+
+    OSStatus result = AuthorizationCopyRights(auth,
+                                              &rights,
+                                              kAuthorizationEmptyEnvironment,
+                                              flags, NULL);
+    return result;
+}
+
+// On OS X we avoid using a helper but grab privilege from here, the client.
 AuthServicesBackend::AuthServicesBackend()
     : AuthBackend()
 {
-    setCapabilities(AuthorizeFromHelperCapability | CheckActionExistenceCapability);
+    setCapabilities(AuthorizeFromClientCapability | CheckActionExistenceCapability);
+}
+
+AuthServicesBackend::~AuthServicesBackend()
+{
+    if (s_authRef) {
+        OSStatus err = AuthorizationFree(s_authRef, kAuthorizationFlagDefaults);
+        qCDebug(KAUTH_OSX) << "AuthorizationFree(" << s_authRef << ") returned" << err;
+        s_authRef = NULL;
+    }
 }
 
 void AuthServicesBackend::setupAction(const QString &)
@@ -49,48 +103,67 @@ void AuthServicesBackend::setupAction(const QString &)
     // Nothing to do here...
 }
 
-// On OS X, the suggestion is to make the helper grant the actual privilege. The app does instead a
-// "pre-authorization", that's equivalent to look at isCallerAuthorized() in policykit.
 Action::AuthStatus AuthServicesBackend::authorizeAction(const QString &action)
 {
-    return actionStatus(action);
+    Action::AuthStatus retval;
+    OSStatus result = GetActionRights(action, kAuthorizationFlagExtendRights | kAuthorizationFlagInteractionAllowed, authRef());
+    qCDebug(KAUTH_OSX) << "AuthServicesBackend::authorizeAction(" << action << ") AuthorizationCopyRights returned" << result;
+    switch (result) {
+        case errAuthorizationSuccess:
+            retval = Action::AuthorizedStatus;
+            break;
+        case errAuthorizationCanceled:
+            retval = Action::UserCancelledStatus;
+            break;
+        case errAuthorizationInteractionNotAllowed:
+        case errAuthorizationDenied:
+            retval = Action::DeniedStatus;
+            break;
+        case errAuthorizationInternal:
+            // does this make sense?
+            retval = Action::AuthRequiredStatus;
+            break;
+        case errAuthorizationExternalizeNotAllowed:
+        case errAuthorizationInternalizeNotAllowed:
+        case errAuthorizationToolExecuteFailure:
+        case errAuthorizationToolEnvironmentError:
+        case errAuthorizationBadAddress:
+            retval = Action::ErrorStatus;
+            break;
+        default:
+            retval = Action::InvalidStatus;
+            break;
+    }
+    return retval;
 }
 
 Action::AuthStatus AuthServicesBackend::actionStatus(const QString &action)
 {
-    const QByteArray actionName = action.toUtf8();
-
-    AuthorizationItem item;
-    item.name = actionName.constData();
-    item.valueLength = 0;
-    item.value = NULL;
-    item.flags = 0;
-
-    AuthorizationRights rights;
-    rights.count = 1;
-    rights.items = &item;
-
-    OSStatus result = AuthorizationCopyRights(authRef(),
-                      &rights,
-                      kAuthorizationEmptyEnvironment,
-                      kAuthorizationFlagExtendRights | kAuthorizationFlagPreAuthorize,
-                      NULL);
-
+    Action::AuthStatus retval;
+    OSStatus result = GetActionRights(action, kAuthorizationFlagExtendRights | kAuthorizationFlagPreAuthorize, authRef());
+    qCDebug(KAUTH_OSX) << "AuthServicesBackend::actionStatus(" << action << ") AuthorizationCopyRights returned" << result;
+    // this function has a simpler return code parser:
     switch (result) {
-    case errAuthorizationSuccess:
-        return Action::AuthorizedStatus;
-    case errAuthorizationInteractionNotAllowed:
-        return Action::AuthRequiredStatus;
-    default:
-        return Action::DeniedStatus;
+        case errAuthorizationSuccess:
+            retval = Action::AuthorizedStatus;
+            break;
+        case errAuthorizationCanceled:
+            retval = Action::UserCancelledStatus;
+            break;
+        case errAuthorizationInteractionNotAllowed:
+            retval = Action::AuthRequiredStatus;
+            break;
+        default:
+            retval = Action::DeniedStatus;
+            break;
     }
+    return retval;
 }
 
 QByteArray AuthServicesBackend::callerID() const
 {
     AuthorizationExternalForm ext;
     AuthorizationMakeExternalForm(authRef(), &ext);
-
     QByteArray id((const char *)&ext, sizeof(ext));
 
     return id;
@@ -104,37 +177,24 @@ bool AuthServicesBackend::isCallerAuthorized(const QString &action, QByteArray c
     AuthorizationRef auth;
 
     if (AuthorizationCreateFromExternalForm(&ext, &auth) != noErr) {
+        qCWarning(KAUTH_OSX()) << "AuthorizationCreateFromExternalForm(" << action << "," << callerID.constData() << ") failed";
         return false;
     }
 
-    const QByteArray actionName = action.toUtf8();
-
-    AuthorizationItem item;
-    item.name = actionName.constData();
-    item.valueLength = 0;
-    item.value = NULL;
-    item.flags = 0;
-
-    AuthorizationRights rights;
-    rights.count = 1;
-    rights.items = &item;
-
-    OSStatus result = AuthorizationCopyRights(auth,
-                      &rights,
-                      kAuthorizationEmptyEnvironment,
-                      kAuthorizationFlagExtendRights | kAuthorizationFlagInteractionAllowed,
-                      NULL);
+    OSStatus result = GetActionRights( action, kAuthorizationFlagExtendRights | kAuthorizationFlagInteractionAllowed,
+                      auth);
 
     AuthorizationFree(auth, kAuthorizationFlagDefaults);
+    qCDebug(KAUTH_OSX) << "AuthServicesBackend::isCallerAuthorized(" << action << "," << callerID.constData() << ") AuthorizationCopyRights returned" << result;
 
     return result == errAuthorizationSuccess;
 }
 
-bool AuthServicesBackend::actionExists(const QString &action)
+// OS X doesn't distinguish between "action doesn't exist" and "action not allowed". So the
+// best thing we can do is return true and hope that the action will be created if it didn't exist...
+bool AuthServicesBackend::actionExists(const QString &)
 {
-    OSStatus exists = AuthorizationRightGet(action.toUtf8().constData(), NULL);
-
-    return exists == errAuthorizationSuccess;
+    return true;
 }
 
 }; // namespace KAuth
diff --git src/backends/mac/AuthServicesBackend.h src/backends/mac/AuthServicesBackend.h
index 8f51eba..9eb656a 100644
--- src/backends/mac/AuthServicesBackend.h
+++ src/backends/mac/AuthServicesBackend.h
@@ -21,6 +21,7 @@
 #define AUTHSERVICES_BACKEND_H
 
 #include "AuthBackend.h"
+#include <Security/Security.h>
 
 namespace KAuth
 {
@@ -33,6 +34,7 @@ class AuthServicesBackend : public AuthBackend
 
 public:
     AuthServicesBackend();
+    virtual ~AuthServicesBackend();
     virtual void setupAction(const QString &);
     virtual Action::AuthStatus authorizeAction(const QString &);
     virtual Action::AuthStatus actionStatus(const QString &);
@@ -41,6 +43,7 @@ public:
     virtual bool actionExists(const QString &action);
 };
 
+
 } // namespace KAuth
 
 #endif
diff --git src/backends/mac/kauth-policy-gen-mac.cpp src/backends/mac/kauth-policy-gen-mac.cpp
index b51d217..e146c46 100644
--- src/backends/mac/kauth-policy-gen-mac.cpp
+++ src/backends/mac/kauth-policy-gen-mac.cpp
@@ -22,12 +22,14 @@
 #include <iostream>
 #include <Security/Security.h>
 
+#include <QDebug>
+
 using namespace std;
 
 void output(QList<Action> actions, QMap<QString, QString> domain)
 {
     AuthorizationRef auth;
-    AuthorizationCreate(NULL, NULL, kAuthorizationFlagDefaults, &auth);
+    AuthorizationCreate(NULL, kAuthorizationEmptyEnvironment, kAuthorizationFlagDefaults, &auth);
 
     OSStatus err;
 
@@ -35,7 +37,7 @@ void output(QList<Action> actions, QMap<QString, QString> domain)
 
         err = AuthorizationRightGet(action.name.toLatin1().constData(), NULL);
 
-        if (err == errAuthorizationDenied) {
+        if (err != errAuthorizationSuccess) {
 
             QString rule;
 
@@ -56,6 +58,8 @@ void output(QList<Action> actions, QMap<QString, QString> domain)
             if (err != noErr) {
                 cerr << "You don't have the right to edit the security database (try to run cmake with sudo): " << err << endl;
                 exit(1);
+            } else {
+                qInfo() << "Created or updated rule" << rule << "for right entry" << action.name << "policy" << action.policy << "; domain=" << domain;
             }
         }
     }
diff --git src/kauthhelpersupport.cpp src/kauthhelpersupport.cpp
index 318d3a0..80d8e5a 100644
--- src/kauthhelpersupport.cpp
+++ src/kauthhelpersupport.cpp
@@ -78,7 +78,13 @@ int HelperSupport::helperMain(int argc, char **argv, const char *id, QObject *re
     fixEnvironment();
 #endif
 
+#ifdef Q_OS_OSX
+    openlog(id, LOG_CONS|LOG_PID, LOG_USER);
+    int logLevel = LOG_WARNING;
+#else
     openlog(id, 0, LOG_USER);
+    int logLevel = LOG_DEBUG;
+#endif
     qInstallMessageHandler(&HelperSupport::helperDebugHandler);
 
     // NOTE: The helper proxy might use dbus, and we should have the qapp
@@ -86,7 +92,7 @@ int HelperSupport::helperMain(int argc, char **argv, const char *id, QObject *re
     QCoreApplication app(argc, argv);
 
     if (!BackendsManager::helperProxy()->initHelper(QString::fromLatin1(id))) {
-        syslog(LOG_DEBUG, "Helper initialization failed");
+        syslog(logLevel, "Helper initialization failed");
         return -1;
     }
 
