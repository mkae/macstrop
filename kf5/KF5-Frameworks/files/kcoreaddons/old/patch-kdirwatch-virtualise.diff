diff --git src/lib/io/kdirwatch.h src/lib/io/kdirwatch.h
index 2270387..d3871de 100644
--- src/lib/io/kdirwatch.h
+++ src/lib/io/kdirwatch.h
@@ -93,7 +93,7 @@ public:
      *
      * Stops scanning and cleans up.
      */
-    ~KDirWatch();
+    virtual ~KDirWatch();
 
     /**
      * Adds a directory to be watched.
@@ -114,21 +114,21 @@ public:
      *
      * @sa  KDirWatch::WatchMode
      */
-    void addDir(const QString &path, WatchModes watchModes = WatchDirOnly);
+    virtual void addDir(const QString &path, WatchModes watchModes = WatchDirOnly);
 
     /**
      * Adds a file to be watched.
      * If it's a symlink to a directory, it watches the symlink itself.
      * @param file the file to watch
      */
-    void addFile(const QString &file);
+    virtual void addFile(const QString &file);
 
     /**
      * Returns the time the directory/file was last changed.
      * @param path the file to check
      * @return the date of the last modification
      */
-    QDateTime ctime(const QString &path) const;
+    virtual QDateTime ctime(const QString &path) const;
 
     /**
      * Removes a directory from the list of scanned directories.
@@ -136,7 +136,7 @@ public:
      * If specified path is not in the list this does nothing.
      * @param path the path of the dir to be removed from the list
      */
-    void removeDir(const QString &path);
+    virtual void removeDir(const QString &path);
 
     /**
      * Removes a file from the list of watched files.
@@ -144,7 +144,7 @@ public:
      * If specified path is not in the list this does nothing.
      * @param file the file to be removed from the list
      */
-    void removeFile(const QString &file);
+    virtual void removeFile(const QString &file);
 
     /**
      * Stops scanning the specified path.
@@ -158,7 +158,7 @@ public:
      * @return true if the @p path is being watched, otherwise false
      * @see restartDirScan()
      */
-    bool stopDirScan(const QString &path);
+    virtual bool stopDirScan(const QString &path);
 
     /**
      * Restarts scanning for specified path.
@@ -173,7 +173,7 @@ public:
      * @return true if the @p path is being watched, otherwise false
      * @see stopDirScan()
      */
-    bool restartDirScan(const QString &path);
+    virtual bool restartDirScan(const QString &path);
 
     /**
      * Starts scanning of all dirs in list.
@@ -191,28 +191,28 @@ public:
      * for change. Otherwise, stopped directories will continue to be
      * unnotified.
      */
-    void startScan(bool notify = false, bool skippedToo = false);
+    virtual void startScan(bool notify = false, bool skippedToo = false);
 
     /**
      * Stops scanning of all directories in internal list.
      *
      * The timer is stopped, but the list is not cleared.
      */
-    void stopScan();
+    virtual void stopScan();
 
     /**
      * Is scanning stopped?
      * After creation of a KDirWatch instance, this is false.
      * @return true when scanning stopped
      */
-    bool isStopped();
+    virtual bool isStopped();
 
     /**
      * Check if a directory is being watched by this KDirWatch instance
      * @param path the directory to check
      * @return true if the directory is being watched
      */
-    bool contains(const QString &path) const;
+    virtual bool contains(const QString &path) const;
 
     void deleteQFSWatcher(); // KF6 TODO: remove from public API
 
@@ -255,19 +255,19 @@ public Q_SLOTS:
      * Emits created().
      * @param path the path of the file or directory
      */
-    void setCreated(const QString &path);
+    virtual void setCreated(const QString &path);
 
     /**
      * Emits dirty().
      * @param path the path of the file or directory
      */
-    void setDirty(const QString &path);
+    virtual void setDirty(const QString &path);
 
     /**
      * Emits deleted().
      * @param path the path of the file or directory
      */
-    void setDeleted(const QString &path);
+    virtual void setDeleted(const QString &path);
 
 Q_SIGNALS:
 
