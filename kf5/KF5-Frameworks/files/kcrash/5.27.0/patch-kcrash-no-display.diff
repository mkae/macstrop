diff --git src/kcrash.cpp src/kcrash.cpp
index 7d3b8a2..96b3e6b 100644
--- src/kcrash.cpp
+++ src/kcrash.cpp
@@ -255,42 +255,44 @@ bool KCrash::isDrKonqiEnabled()
     return s_launchDrKonqi == 1;
 }
 
-// The following function copy&pasted from kinit/wrapper.cpp :
-static char *getDisplay()
+// The following functions copy&pasted from kinit/wrapper.cpp :
+// (which copied it from kdeinit/kinit.cpp)
+static const char* displayEnvVarName_c()
 {
-    const char *display;
-    char *result;
-    char *screen;
-    char *colon;
-    char *i;
-#if defined(NO_DISPLAY) || defined(Q_OS_WIN)
-    display = "NODISPLAY";
-#else
-    display = getenv("DISPLAY");
+    // Can't use QGuiApplication::platformName() here, there is no app instance.
+#if HAVE_X11
+    return "DISPLAY";
+#elif defined(Q_OS_OSX)
+    return "MAC_DISPLAY";
+#elif defined(Q_OS_WIN)
+    return "WIN_DISPLAY";
 #endif
-    if (!display || !*display) {
-        display = ":0";
-    }
-    result = (char *)malloc(strlen(display) + 1);
-    if (result == NULL) {
-        return NULL;
-    }
+}
 
-    strcpy(result, display);
-    screen = strrchr(result, '.');
-    colon = strrchr(result, ':');
-    if (screen && (screen > colon)) {
-        *screen = '\0';
-    }
-    while ((i = strchr(result, ':'))) {
-        *i = '_';
-    }
+// adapted from kdeinit/kinit.cpp
+// WARNING, if you change the socket name, adjust kinit.cpp too
+static const QString generate_socket_file_name()
+{
+
+    QByteArray display = qgetenv(displayEnvVarName_c());
+    if (display.isEmpty()) {
+#if HAVE_X11
+        fprintf(stderr, "Error: could not determine $%s.\n", displayEnvVarName_c());
+        return QString();
+    } else {
+#endif
+        int i;
+        if ((i = display.lastIndexOf('.')) > display.lastIndexOf(':') && i >= 0) {
+            display.truncate(i);
+        }
+
+        display.replace(':', '_');
 #ifdef __APPLE__
-    while ((i = strchr(result, '/'))) {
-        *i = '_';
-    }
+        display.replace('/', '_');
 #endif
-    return result;
+    }
+    const QString socketFileName = QString::fromLatin1("kdeinit5_%1").arg(QLatin1String(display));
+    return socketFileName;
 }
 
 void
@@ -298,9 +300,7 @@ KCrash::setCrashHandler(HandlerType handler)
 {
     if (!s_kdeinit_socket_file) {
         // Prepare this now to avoid mallocs in the crash handler.
-        char *display = getDisplay();
-        const QString socketFileName = QStringLiteral("kdeinit5_%1").arg(QLatin1String(display));
-        free(display);
+        const QString socketFileName = generate_socket_file_name();
         QByteArray socketName = QFile::encodeName(QStandardPaths::writableLocation(QStandardPaths::RuntimeLocation) +
                                 QLatin1Char('/') + socketFileName);
         s_kdeinit_socket_file = qstrdup(socketName.constData());
@@ -608,6 +608,7 @@ void KCrash::startProcess(int argc, const char *argv[], bool waitAndExit)
 {
     bool startDirectly = true;
 
+#ifndef Q_OS_OSX
     // First try to start the app via kdeinit, if the AlwaysDirectly flag hasn't been specified.
     // This is done because it is dangerous to use fork() in the crash handler
     // (there can be functions registered to be performed before fork(), for example handling
@@ -615,6 +616,7 @@ void KCrash::startProcess(int argc, const char *argv[], bool waitAndExit)
     if (!(s_flags & AlwaysDirectly)) {
         startDirectly = !startProcessInternal(argc, argv, waitAndExit, false);
     }
+#endif
 
     // If we can't reach kdeinit, we can still at least try to fork()
     if (startDirectly) {
