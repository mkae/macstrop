--- src/orig.kiconloader.cpp	2017-06-03 12:08:59.000000000 +0200
+++ src/kiconloader.cpp	2017-06-20 22:20:01.000000000 +0200
@@ -790,6 +790,7 @@
                 || *it == QLatin1String("default.kde4")) {
             continue;
         }
+        qCDebug(KICONTHEMES) << Q_FUNC_INFO << "adding theme" << *it;
         addThemeByName(*it, QLatin1String(""));
     }
 
@@ -1036,6 +1037,7 @@
     }
 
     const QString genericIcon = s_globalData()->genericIconFor(name);
+    qCWarning(KICONTHEMES) << Q_FUNC_INFO << "generic icon for" << name << ":" << genericIcon;
     if (!genericIcon.isEmpty()) {
         path = findMatchingIcon(genericIcon, size);
     }
@@ -1064,6 +1066,7 @@
     foreach (KIconThemeNode *themeNode, links) {
         const QString path = themeNode->theme->iconPathByName(name, size, KIconLoader::MatchBest);
         if (!path.isEmpty()) {
+            qCWarning(KICONTHEMES) << Q_FUNC_INFO << "found" << name << "size" << size << "@" << path;
             return path;
         }
     }
@@ -1114,6 +1117,8 @@
             //qCDebug(KICONTHEMES) << "Looking up" << currentName;
             path = themeNode->theme->iconPathByName(currentName, size, KIconLoader::MatchBest);
             if (!path.isEmpty()) {
+                qCWarning(KICONTHEMES) << Q_FUNC_INFO << "found" << currentName << "for" << name << "size" << size
+                    << "@" << path;
                 return path;
             }
         }
@@ -1223,6 +1228,7 @@
         iconName[slashindex] = QLatin1Char('-');
     }
 
+    qCWarning(KICONTHEMES) << Q_FUNC_INFO << "looking for" << _iconName << "size" << size;
     if (!d->extraDesktopIconsLoaded) {
         const QPixmap pixmap = loadIcon(iconName, group, size, state, overlays, path_store, true);
         if (!pixmap.isNull()) {
@@ -1278,6 +1284,8 @@
     // May modify group, size, or state. This function puts them into sane
     // states.
     d->normalizeIconMetadata(group, size, state);
+    qCWarning(KICONTHEMES) << Q_FUNC_INFO << "looking for icon" << _name << "group" << group
+        << "size" << size << "state" << state << "overlays=" << overlays;
 
     // See if the image is already cached.
     QString key = d->makeCacheKey(name, group, overlays, size, state);
@@ -1286,6 +1294,7 @@
     QString path;
 
     if (d->findCachedPixmapWithPath(key, pix, path)) {
+        qCWarning(KICONTHEMES) << "found cached key" << key << "at path" << path << "pix=" << pix;
         if (path_store) {
             *path_store = path;
         }
@@ -1303,6 +1312,7 @@
 
     // Image is not cached... go find it and apply effects.
     if (!d->initIconThemes()) {
+        qCWarning(KICONTHEMES) << "initIconThemes() failed, returning empty icon";
         return QPixmap();
     }
 
@@ -1334,6 +1344,7 @@
     QImage img;
     if (!path.isEmpty()) {
         img = d->createIconImage(path, size, (KIconLoader::States)state);
+        qCWarning(KICONTHEMES) << "icon" << path << "size" << size << "->" << img;
     }
 
     if (group >= 0) {
