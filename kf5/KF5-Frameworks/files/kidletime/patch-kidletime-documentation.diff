diff --git src/kidletime.h src/kidletime.h
index 6d61a08..fa2c7a3 100644
--- src/kidletime.h
+++ src/kidletime.h
@@ -27,10 +27,23 @@ class KIdleTimePrivate;
 /**
  * @class KIdleTime kidletime.h KIdleTime
  *
- * KIdleTime is a singleton reporting information on idle time. It is useful not
+ * KIdleTime is a singleton reporting information on idle time, more exactly. the time since
+ * the last user input event. It is useful not
  * only for finding out about the current idle time of the PC, but also for getting
- * notified upon idle time events, such as custom timeouts, or user activity.
+ * notified upon idle time events, such as custom timeouts ("the system has not had a user
+ * input event for X milliseconds"), or user activity (resuming from idle because of a
+ * user event).
  *
+ * @note This class and documentation draw an analogy between "absence of user input events"
+ * and "idle time" (of the system, even). It only measures and reports if there has been an
+ * absence of user input events (mouse movement or clicks, keyboard presses, etc) and if so
+ * for how long. How long such a situation has to persist before the system is considered idle
+ * is of course up to the caller to decide, and is in no way an indication of CPU idling.
+ * 
+ * @note The actual implementation is system dependent and can rely on polling mechanisms. Polling
+ * can introduce a non-negligible CPU overhead, and care should thus be taken not to let this
+ * class remain active when it is not being used: @see removeAllIdleTimeouts.
+ * 
  * @note All the intervals and times in this library are in milliseconds, unless
  *       specified otherwise
  *
@@ -58,7 +71,7 @@ public:
     virtual ~KIdleTime();
 
     /**
-     * Retrieves the idle time of the system, in milliseconds
+     * Retrieves the time since the last user input event, in milliseconds
      *
      * @returns the idle time of the system
      */
@@ -86,9 +99,9 @@ public:
 public Q_SLOTS:
     /**
      * Adds a new timeout to catch. When calling this method, after the system will be idle for
-     * \c msec milliseconds, the signal \c timeoutReached will be triggered. Please note that until you will
+     * \c msec milliseconds, the signal \c timeoutReached will be triggered. Please note that until you
      * call \c removeIdleTimeout or \c removeAllIdleTimeouts, the signal will be triggered every
-     * time the system will be idle for \c msec milliseconds. This function also returns an unique
+     * time the system has been idle for \c msec milliseconds. This function also returns an unique
      * token for the timeout just added to allow easier identification.
      *
      * @param msec the time, in milliseconds, after which the signal will be triggered
@@ -104,7 +117,7 @@ public Q_SLOTS:
 
     /**
      * Stops catching the idle timeout identified by the token \c identifier,
-     * if it was registered earlier with addIdleTimeout.
+     * that was returned by an earlier call to addIdleTimeout.
      * Otherwise does nothing.
      *
      * @param identifier the token returned from addIdleTimeout of the timeout you want to stop listening to
@@ -113,7 +126,8 @@ public Q_SLOTS:
 
     /**
      * Stops catching every set timeout (if any). This means that after calling this method, the signal
-     * \link timeoutReached \endlink won't be called again until you will add another timeout
+     * \link timeoutReached \endlink won't be called again until you add another timeout. The OS X backend will
+     * also stop polling after the last timeout has been removed, to avoid creating unnecessary overhead.
      *
      * @see timeoutReached
      * @see addIdleTimeout
@@ -121,7 +135,7 @@ public Q_SLOTS:
     void removeAllIdleTimeouts();
 
     /**
-     * Catches the next resume from idle event. This means that whenever user activity will be registered, or
+     * Catch the next resume from idle event. This means that whenever user activity is detected, or
      * \link simulateUserActivity \endlink is called, the signal \link resumingFromIdle \endlink will be triggered.
      * <p>
      * Please note that this method will trigger the signal just for the very first resume event after the call:
@@ -140,8 +154,8 @@ public Q_SLOTS:
     void catchNextResumeEvent();
 
     /**
-     * Stops listening for resume event. This function serves for canceling \c catchNextResumeEvent, as it
-     * will have effect just when \c catchNextResumeEvent has been called and \c resumingFromIdle not
+     * Stops listening for resume events. This function serves for canceling \c catchNextResumeEvent, and
+     * will have effect only after \c catchNextResumeEvent has been called and \c resumingFromIdle not
      * yet triggered
      *
      * @see resumingFromIdle
@@ -153,7 +167,8 @@ public Q_SLOTS:
 Q_SIGNALS:
     /**
      * Triggered, if KIdleTime is catching resume events, when the system resumes from an idle state. This means
-     * that either \link simulateUserActivity \endlink was called or the user sent an input to the system.
+     * that either \link simulateUserActivity \endlink was called or the user used the keyboard, mouse or any other device
+     * that creates inputs to the system.
      *
      * @see catchNextResumeEvent
      */
@@ -163,10 +178,11 @@ Q_SIGNALS:
      * Triggered when the system has been idle for x milliseconds, identified by the previously set
      * timeout.
      * <p>
-     * This signal is triggered whenever each timeout previously registered with \link addIdleTimeout \endlink
-     * is reached.
+     * This signal is triggered whenever there has been an absence of input events corresponding to a
+     * timeout previously registered with \link addIdleTimeout \endlink.
      *
-     * @param identifier the identifier of the timeout the system has reached
+     * @param identifier a token returned by an earlier registration of a timeout value, corresponding to
+     * the current time since the last input event.
      *
      * @see addIdleTimeout
      * @see removeIdleTimeout
@@ -174,10 +190,13 @@ Q_SIGNALS:
     void timeoutReached(int identifier);
 
     /**
-     * Overload. Streams the duration as well. It is guaranteed that \c msec will exactly
-     * correspond to the timeout registered with \link addIdleTimeout \endlink
+     * Overload. Streams the duration as well. It is guaranteed that \c msec will
+     * correspond to the timeout registered with \link addIdleTimeout \endlink, with a margin
+     * of error that is platform specific.
      *
-     * @param msec the time, in milliseconds, the system has been idle for
+     * @param identifier a token returned by an earlier registration of a timeout value, corresponding to
+     * the current time since the last input event.
+     * @param msec the time since the last input event, in milliseconds
      *
      * @see addIdleTimeout
      * @see removeIdleTimeout
