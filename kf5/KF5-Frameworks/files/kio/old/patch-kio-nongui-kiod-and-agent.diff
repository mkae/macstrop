diff --git src/kiod/CMakeLists.txt src/kiod/CMakeLists.txt
index 51d7f23eb00b8428b7dc30b05e3c8e6d681e2217..a65da0c1a04bfaff683558952962cd4ac8c78c47 100644
--- src/kiod/CMakeLists.txt
+++ src/kiod/CMakeLists.txt
@@ -1,4 +1,9 @@
+include(ECMMarkNonGuiExecutable)
+
 set(kiod_SRCS kiod_main.cpp)
+if (APPLE)
+    set(kiod_SRCS ${kiod_SRCS} kiod_agent.mm)
+endif()
 
 add_executable(kiod5 ${kiod_SRCS})
 
@@ -11,6 +16,13 @@ target_link_libraries(kiod5
    Qt5::Widgets     # QApplication
 )
 
+if (APPLE)
+    target_link_libraries(kiod5 "-framework AppKit -framework CoreFoundation")
+
+    # Mark it as non-gui so we won't create an app bundle on Mac OS X
+    ecm_mark_nongui_executable(kiod5)
+endif ()
+
 install(TARGETS kiod5 DESTINATION ${KDE_INSTALL_LIBEXECDIR_KF5})
 
 configure_file(org.kde.kiod5.service.in
diff --git src/kiod/kiod_agent.mm src/kiod/kiod_agent.mm
new file mode 100644
index 0000000000000000000000000000000000000000..bb913b23437eaf54483246cb1d228ed06aa0e6cf
--- /dev/null
+++ src/kiod/kiod_agent.mm
@@ -0,0 +1,43 @@
+/* This file is part of the KDE libraries
+    Copyright (C) 2017 Ren√© J.V. Bertin
+
+    This library is free software; you can redistribute it and/or modify
+    it under the terms of the GNU Lesser General Public License as published by
+    the Free Software Foundation; either version 2 of the License or (at
+    your option) version 3 or, at the discretion of KDE e.V. (which shall
+    act as a proxy as in section 14 of the GPLv3), any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#import <CoreFoundation/CoreFoundation.h>
+#import <AppKit/AppKit.h>
+
+void makeAgentApplication()
+{
+    CFBundleRef mainBundle = CFBundleGetMainBundle();
+    if (mainBundle) {
+        // get the application's Info Dictionary. For app bundles this would live in the bundle's Info.plist,
+        // for regular executables it is obtained in another way.
+        CFMutableDictionaryRef infoDict = (CFMutableDictionaryRef) CFBundleGetInfoDictionary(mainBundle);
+        if (infoDict) {
+            // Add or set the "LSUIElement" key with/to value "1". This can simply be a CFString.
+            CFDictionarySetValue(infoDict, CFSTR("LSUIElement"), CFSTR("1"));
+            // That's it. We're now considered as an "agent" by the window server, and thus will have
+            // neither menubar nor presence in the Dock or App Switcher.
+        }
+    }
+}
+
+void setAgentActivationPolicy()
+{
+    [NSApp setActivationPolicy:NSApplicationActivationPolicyAccessory];
+}
diff --git src/kiod/kiod_main.cpp src/kiod/kiod_main.cpp
index 79d4cd2dac6be34b24b59c2b8ec2087428f8629a..fb5a2727dd209eb082598acde55b7fd3fbe8e243 100644
--- src/kiod/kiod_main.cpp
+++ src/kiod/kiod_main.cpp
@@ -94,6 +94,12 @@ extern Q_DBUS_EXPORT void qDBusAddSpyHook(void (*)(const QDBusMessage&));
 
 int main(int argc, char *argv[])
 {
+#ifdef Q_OS_MACOS
+    // do the "early" step to make this an "agent" application:
+    // set the LSUIElement InfoDict key programmatically.
+    extern void makeAgentApplication();
+    makeAgentApplication();
+#endif
     qunsetenv("SESSION_MANAGER"); // disable session management
 
     QApplication app(argc, argv); // GUI needed for kpasswdserver's dialogs
@@ -120,6 +126,14 @@ int main(int argc, char *argv[])
     self(); // create it in this thread
     qDBusAddSpyHook(messageFilter);
 
+#ifdef Q_OS_MACOS
+    // In the case of kiod5 we need to confirm the agent nature,
+    // possibly because of how things have been set up after creating
+    // the QApplication instance. Failure to do this will disable
+    // text input into dialogs we may post.
+    extern void setAgentActivationPolicy();
+    setAgentActivationPolicy();
+#endif
     return app.exec();
 }
 
diff --git src/kpasswdserver/kpasswdserver.cpp src/kpasswdserver/kpasswdserver.cpp
--- src/kpasswdserver/kpasswdserver.cpp
+++ src/kpasswdserver/kpasswdserver.cpp
@@ -894,11 +894,15 @@
     if (info.getExtraField(AUTHINFO_EXTRAFIELD_ANONYMOUS).isValid () && password.isEmpty() && username.isEmpty())
         dlg->setAnonymousMode(info.getExtraField(AUTHINFO_EXTRAFIELD_ANONYMOUS).toBool());
 
+#ifndef Q_OS_MACOS
 #ifndef Q_WS_WIN
     KWindowSystem::setMainWindow(dlg, request->windowId);
 #else
     KWindowSystem::setMainWindow(dlg, (HWND)request->windowId);
 #endif
+#else
+    KWindowSystem::forceActiveWindow(dlg->winId(), 0);
+#endif
 
     qCDebug(category) << "Showing password dialog" << dlg << ", window-id=" << request->windowId;
     m_authInProgress.insert(dlg, request);
