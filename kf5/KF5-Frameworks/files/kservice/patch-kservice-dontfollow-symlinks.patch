diff --git autotests/ksycocatest.cpp autotests/ksycocatest.cpp
index 4564ee6750a80a109492c197c83944e129dcabac..aa7979c29f77ae6576e519b999d823f308f88e34 100644
--- autotests/ksycocatest.cpp
+++ autotests/ksycocatest.cpp
@@ -88,6 +88,7 @@ private Q_SLOTS:
     void testDeletingSycoca();
     void testGlobalSycoca();
     void testNonReadableSycoca();
+    void recursiveCheckShouldIgnoreLinksGoingUp();
 
 private:
     void createGlobalServiceType()
@@ -100,9 +101,10 @@ private:
         file.sync();
         qDebug() << "created" << serviceTypesDir() + "/fakeGlobalServiceType.desktop";
     }
-    QString servicesDir() { return QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation) + "/kservices5"; }
-    QString serviceTypesDir() { return QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation) + "/kservicetypes5"; }
-    QString menusDir() { return QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + "/menus"; }
+    QString servicesDir() const { return QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation) + "/kservices5"; }
+    QString serviceTypesDir() const { return QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation) + "/kservicetypes5"; }
+    QString menusDir() const { return QStandardPaths::writableLocation(QStandardPaths::GenericConfigLocation) + "/menus"; }
+    QString appsDir() const { return QStandardPaths::writableLocation(QStandardPaths::ApplicationsLocation) + QLatin1Char('/'); }
 
     static void runKBuildSycoca(const QProcessEnvironment &environment, bool global = false);
 
@@ -219,6 +221,44 @@ void KSycocaTest::dirTimestampShouldBeCheckedRecursively()
     QDir(path).removeRecursively();
 }
 
+void KSycocaTest::recursiveCheckShouldIgnoreLinksGoingUp()
+{
+#ifndef Q_OS_UNIX
+    QSKIP("This test requires symlinks and utime");
+#endif
+    ksycoca_ms_between_checks = 0;
+    const QString link = menusDir() + QLatin1String("/linkGoingUp");
+    QVERIFY(QFile::link("..", link));
+    QTest::qWait(1000); // remove this once lastModified includes ms
+    KSycoca::self()->ensureCacheValid();
+    const QDateTime oldTimestamp = QFileInfo(KSycoca::absoluteFilePath()).lastModified();
+
+    const QString path = QFileInfo(menusDir()).absolutePath(); // the parent of the menus dir
+
+    // ### use QFile::setFileTime when it lands in Qt...
+#ifdef Q_OS_UNIX
+    struct timeval tp;
+    gettimeofday(&tp, 0);
+    struct utimbuf utbuf;
+    utbuf.actime = tp.tv_sec;
+    utbuf.modtime = tp.tv_sec + 60; // 60 second in the future
+    QCOMPARE(utime(QFile::encodeName(path).constData(), &utbuf), 0);
+    qDebug("Time changed for %s", qPrintable(path));
+    qDebug() << QDateTime::currentDateTime() << QFileInfo(path).lastModified();
+#endif
+
+    ksycoca_ms_between_checks = 0;
+    QTest::qWait(1000); // remove this once lastModified includes ms
+
+    qDebug() << "Waited 1s, calling ensureCacheValid (should not rebuild)";
+    KSycoca::self()->ensureCacheValid();
+    const QDateTime againTimestamp = QFileInfo(KSycoca::absoluteFilePath()).lastModified();
+    QCOMPARE(againTimestamp, oldTimestamp); // same mtime, it didn't get rebuilt
+
+    // Ensure we don't pollute the other tests
+    QFile(link).remove();
+}
+
 
 void KSycocaTest::runKBuildSycoca(const QProcessEnvironment &environment, bool global)
 {
diff --git src/sycoca/ksycocautils_p.h src/sycoca/ksycocautils_p.h
index f144a80ea6d845ed5eaff41689756b30f17d9391..d6fc85f89226101935199cdedd8733db57aaa5a0 100644
--- src/sycoca/ksycocautils_p.h
+++ src/sycoca/ksycocautils_p.h
@@ -38,14 +38,13 @@ bool visitResourceDirectoryHelper(const QString &dirname, Visitor visitor)
     QDir dir(dirname);
     const QFileInfoList list = dir.entryInfoList(QDir::NoDotAndDotDot | QDir::Dirs, QDir::Unsorted);
     foreach (const QFileInfo &fi, list) {
-        if (!fi.isDir()) {
-            continue;
-        }
-        if (!visitor(fi)) {
-            return false;
-        }
-        if (!visitResourceDirectoryHelper(fi.filePath(), visitor)) {
-            return false;
+        if (fi.isDir() && !fi.isSymLink() && !fi.isBundle()) { // same check as in vfolder_menu.cpp
+            if (!visitor(fi)) {
+                return false;
+            }
+            if (!visitResourceDirectoryHelper(fi.filePath(), visitor)) {
+                return false;
+            }
         }
     }
     return true;
diff --git src/sycoca/vfolder_menu.cpp src/sycoca/vfolder_menu.cpp
index 5acbf8ac21a1a0170cee4aa96882bd97eb2a4f2a..1b923f63bdb623f1b2d218125e6a919157f8536c 100644
--- src/sycoca/vfolder_menu.cpp
+++ src/sycoca/vfolder_menu.cpp
@@ -931,7 +931,7 @@ VFolderMenu::loadApplications(const QString &dir, const QString &prefix)
         it.next();
         const QFileInfo fi = it.fileInfo();
         const QString fn = fi.fileName();
-        if (fi.isDir() && !fi.isBundle()) {
+        if (fi.isDir() && !fi.isSymLink() && !fi.isBundle()) {
             if (fn == QLatin1String(".") || fn == QLatin1String("..")) {
                 continue;
             }
