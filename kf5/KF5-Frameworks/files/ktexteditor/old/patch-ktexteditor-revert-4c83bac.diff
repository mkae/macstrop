From 4c83bac52716a08a549dca50a76be8aa47c11ca3 Mon Sep 17 00:00:00 2001
From: Christoph Cullmann <cullmann@kde.org>
Date: Thu, 8 Sep 2016 16:02:56 +0200
Subject: [PATCH 1/1] implement better rendering to allow e.g. _ to span into
 the next line

REVERTS:
CHANGELOG: Fix rendering of characters spanning into next line, e.g. underlines are no longer cut off with some fonts/font-sizes

BUG: 335079

Differential Revision: https://phabricator.kde.org/D2706
---
 src/render/katerenderer.cpp   | 28 ++++-----------------------
 src/view/kateviewinternal.cpp | 45 ++++++++++++++++++++++++-------------------
 2 files changed, 29 insertions(+), 44 deletions(-)

diff --git src/render/katerenderer.cpp src/render/katerenderer.cpp
index 17efac0..1b25369 100644
--- src/render/katerenderer.cpp
+++ src/render/katerenderer.cpp
@@ -803,7 +803,9 @@ void KateRenderer::paintTextLine(QPainter &paint, KateLineLayoutPtr range, int x
                 }
             }
 
+            // Clip the caret - Qt's caret has a habit of intruding onto other lines.
             paint.save();
+            paint.setClipRect(0, line.lineNumber() * lineHeight(), xEnd - xStart, lineHeight());
             switch (style) {
             case Line :
                 paint.setPen(QPen(color, caretWidth));
@@ -814,10 +816,12 @@ void KateRenderer::paintTextLine(QPainter &paint, KateLineLayoutPtr range, int x
                 paint.setPen(QPen(color, caretWidth));
                 break;
             case Underline :
+                paint.setClipRect(0, lineHeight() - lineWidth, xEnd - xStart, lineWidth);
                 break;
             case Half :
                 color.setAlpha(128);
                 paint.setPen(QPen(color, caretWidth));
+                paint.setClipRect(0, lineHeight() / 2, xEnd - xStart, lineHeight() / 2);
                 break;
             }
 
@@ -938,10 +942,26 @@ void KateRenderer::updateConfig()
 
 void KateRenderer::updateFontHeight()
 {
-    // use height of font + round down, ensure we have at least one pixel
-    // we round down to avoid artifacts: line height too large vs. qt background rendering of text attributes
-    const qreal height = config()->fontMetrics().height();
-    m_fontHeight = qMax(1, qFloor(height));
+    // first: get normal line spacing
+    qreal height = config()->fontMetrics().lineSpacing();
+
+    // Sometimes the height of italic fonts is larger than for the non-italic
+    // font. Since all our lines are of same/fixed height, use the maximum of
+    // both heights (bug #302748)
+    QFont italicFont = config()->font();
+    italicFont.setItalic(true);
+    height = qMax(height, QFontMetricsF(italicFont).lineSpacing());
+
+    // same for bold font
+    QFont boldFont = config()->font();
+    boldFont.setBold(true);
+    height = qMax(height, QFontMetricsF(boldFont).lineSpacing());
+
+    // hack: add bit more spacing, just to be sure ;=)
+    // bug 335079
+    // this is no proper fix but works around the issues in many cases
+    // line height per line would fix it for real but needs complete rewrite of rendering/scrolling/...
+    m_fontHeight = qMax(1, qCeil(1.1f * height));
 }
 
 qreal KateRenderer::spaceWidth() const
diff --git src/view/kateviewinternal.cpp src/view/kateviewinternal.cpp
index 35545cc..4c0b5c8 100644
--- src/view/kateviewinternal.cpp
+++ src/view/kateviewinternal.cpp
@@ -2096,12 +2096,6 @@ bool KateViewInternal::tagLine(const KTextEditor::Cursor &virtualCursor)
     int viewLine = cache()->displayViewLine(virtualCursor, true);
     if (viewLine >= 0 && viewLine < cache()->viewCacheLineCount()) {
         cache()->viewLine(viewLine).setDirty();
-
-        // tag one line more because of overlapping things like _, bug 335079
-        if (viewLine+1 < cache()->viewCacheLineCount()) {
-            cache()->viewLine(viewLine+1).setDirty();
-        }
-
         m_leftBorder->update(0, lineToY(viewLine), m_leftBorder->width(), renderer()->lineHeight());
         return true;
     }
@@ -2938,7 +2932,6 @@ void KateViewInternal::paintEvent(QPaintEvent *e)
     uint startz = (unionRect.y() / h);
     uint endz = startz + 1 + (unionRect.height() / h);
     uint lineRangesSize = cache()->viewCacheLineCount();
-    const KTextEditor::Cursor pos = m_cursor;
 
     QPainter paint(this);
     paint.setRenderHints(QPainter::Antialiasing);
@@ -2953,8 +2946,6 @@ void KateViewInternal::paintEvent(QPaintEvent *e)
     paint.translate(unionRect.x(), startz * h);
 
     for (uint z = startz; z <= endz; z++) {
-        paint.save();
-
         if ((z >= lineRangesSize) || (cache()->viewLine(z).line() == -1)) {
             if (!(z >= lineRangesSize)) {
                 cache()->viewLine(z).setDirty(false);
@@ -2974,30 +2965,34 @@ void KateViewInternal::paintEvent(QPaintEvent *e)
                be painted -- when no previous calls to paintTextLine were made.
             */
             if (!thisLine.viewLine() || z == startz) {
-                //qDebug() << "paint text: line: " << thisLine.line() << " viewLine " << thisLine.viewLine() << " x: " << unionRect.x() << " y: " << unionRect.y() << " width: " << xEnd-xStart << " height: " << h << endl;
+                // Don't bother if we're not in the requested update region
+                if (!e->region().contains(QRect(unionRect.x(), startz * h, unionRect.width(), h))) {
+                    continue;
+                }
 
-                // first: paint our line
-                paint.translate(QPoint(0, h * - thisLine.viewLine()));
-                paint.setClipRect(QRect(0, 0, unionRect.width(), h * thisLine.kateLineLayout()->viewLineCount()));
+                //qCDebug(LOG_KTE) << "paint text: line: " << thisLine.line() << " viewLine " << thisLine.viewLine() << " x: " << unionRect.x() << " y: " << sy
+                //  << " width: " << xEnd-xStart << " height: " << h << endl;
+
+                if (thisLine.viewLine()) {
+                    paint.translate(QPoint(0, h * - thisLine.viewLine()));
+                }
+
+                // The paintTextLine function should be well behaved, but if not, this clipping may be needed
+                //paint.setClipRect(QRect(xStart, 0, xEnd - xStart, h * (thisLine.kateLineLayout()->viewLineCount())));
+
+                KTextEditor::Cursor pos = m_cursor;
                 renderer()->paintTextLine(paint, thisLine.kateLineLayout(), xStart, xEnd, &pos);
-                paint.translate(0, h * thisLine.viewLine());
-
-                // second: paint previous line elements, that span into our line like _, bug 335079
-                if (z > 0) {
-                    KateTextLayout &previousLine = cache()->viewLine(z-1);
-                    paint.translate(QPoint(0, h * - (previousLine.viewLine() + 1)));
-                    renderer()->paintTextLine(paint, previousLine.kateLineLayout(), xStart, xEnd, &pos);
-                    paint.translate(0, h * (previousLine.viewLine() + 1));
+
+                //paint.setClipping(false);
+
+                if (thisLine.viewLine()) {
+                    paint.translate(0, h * thisLine.viewLine());
                 }
 
-                /**
-                 * line painted, reset and state + mark line as non-dirty
-                 */
                 thisLine.setDirty(false);
             }
         }
 
-        paint.restore();
         paint.translate(0, h);
         sy += h;
     }
