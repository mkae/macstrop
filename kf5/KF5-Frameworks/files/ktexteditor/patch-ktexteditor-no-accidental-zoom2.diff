diff --git src/view/kateviewinternal.cpp src/view/kateviewinternal.cpp
index 377bf9a2042d4df2e55f023c0f23fd7588cee859..d76b36e74653fd32359aa0f0389608a1906dc328 100644
--- src/view/kateviewinternal.cpp
+++ src/view/kateviewinternal.cpp
@@ -63,6 +63,65 @@
 
 static const bool debugPainting = false;
 
+class ZoomEventFilter
+{
+public:
+    ZoomEventFilter(KateViewInternal *vi)
+        : m_vi(vi)
+        , m_ignoreZoom(false)
+        , m_lastWheelEventUnmodified(false)
+    {
+    }
+
+    bool detectZoomingEvent(QWheelEvent *e, Qt::KeyboardModifiers modifier=Qt::ControlModifier)
+    {
+        Qt::KeyboardModifiers modState = e->modifiers();
+        if (modState == modifier) {
+            if (m_lastWheelEvent.isValid()) {
+                const qint64 deltaT = m_lastWheelEvent.elapsed();
+                // Pressing the specified modifier key within 200ms of the previous "unmodified" 
+                // wheelevent is not allowed to toggle on text zooming
+                if (m_lastWheelEventUnmodified && deltaT < 200) {
+                        m_ignoreZoom = true;
+                }
+                else {
+                    // the protection is kept active for 1s after the last wheel event
+                    // TODO: this value should be tuned, preferrably by someone using
+                    // Ctrl+Wheel zooming frequently.
+                    if (deltaT > 1000) {
+                        m_ignoreZoom = false;
+                    }
+                }
+            } else {
+                // we can't say anything and have to assume there's nothing
+                // accidental to the modifier being pressed.
+                m_ignoreZoom = false;
+            }
+            m_lastWheelEventUnmodified = false;
+            if (m_ignoreZoom) {
+                // unset the modifier so the view scrollbars can handle the scroll
+                // event and produce normal, not accelerated scrolling
+                modState &= ~modifier;
+                e->setModifiers(modState);
+            }
+        } else {
+            // state is reset after any wheel event without the zoom modifier
+            m_lastWheelEventUnmodified = true;
+            m_ignoreZoom = false;
+        }
+        m_lastWheelEvent.start();
+
+        // inform the caller whether this event is allowed to trigger text zooming.
+        return !m_ignoreZoom && modState == modifier;
+    }
+
+protected:
+    KateViewInternal *m_vi;
+    QElapsedTimer m_lastWheelEvent;
+    bool m_ignoreZoom;
+    bool m_lastWheelEventUnmodified;
+};
+
 KateViewInternal::KateViewInternal(KTextEditor::ViewPrivate *view)
     : QWidget(view)
     , editSessionNumber(0)
@@ -187,6 +246,7 @@ KateViewInternal::KateViewInternal(KTextEditor::ViewPrivate *view)
 
     setAcceptDrops(true);
 
+    m_zoomEventFilter = new ZoomEventFilter(this);
     // event filter
     installEventFilter(this);
 
@@ -245,6 +305,8 @@ KateViewInternal::~KateViewInternal()
     delete m_bm;
     delete m_bmStart;
     delete m_bmEnd;
+
+    delete m_zoomEventFilter;
 }
 
 void KateViewInternal::prepareForDynWrapChange()
@@ -3295,8 +3357,9 @@ void KateViewInternal::clear()
 
 void KateViewInternal::wheelEvent(QWheelEvent *e)
 {
-    // ctrl pressed -> change font size (only if angle is reported)
-    if (e->modifiers() == Qt::ControlModifier) {
+    // check if this event should change the font size (Ctrl pressed, angle reported and not accidentally so)
+    // Note: if detectZoomingEvent() doesn't unset the ControlModifier we'll get accelerated scrolling.
+    if (m_zoomEventFilter->detectZoomingEvent(e)) {
         if (e->angleDelta().y() > 0) {
             slotIncFontSizes();
         } else if (e->angleDelta().y() < 0) {
diff --git src/view/kateviewinternal.h src/view/kateviewinternal.h
index 94a21177135fd0f60d98d63d3129de6db4e3c140..a72b0acfe3477f6c52afae22229e173183095892 100644
--- src/view/kateviewinternal.h
+++ src/view/kateviewinternal.h
@@ -54,6 +54,7 @@ class KateScrollBar;
 class KateTextLayout;
 class KateTextAnimation;
 class KateAbstractInputMode;
+class ZoomEventFilter;
 
 class QScrollBar;
 
@@ -286,6 +287,8 @@ private:
     int m_scrollX;
     int m_scrollY;
 
+    ZoomEventFilter *m_zoomEventFilter;
+
     Qt::CursorShape m_mouseCursor;
 
     Kate::TextCursor m_cursor;
