commit fc510adaecf1dc83416eaf4392925ee4f3c5a1e0
Author: Dominik Haumann <dhaumann@kde.org>
Date:   Sat Aug 26 19:39:05 2017 +0200

    Port Document/View scripting API to QJSValue-based solution
    
    Differential Revision: https://phabricator.kde.org/D7337

diff --git src/script/katescriptdocument.cpp src/script/katescriptdocument.cpp
index c41ceea..3637408 100644
--- src/script/katescriptdocument.cpp
+++ src/script/katescriptdocument.cpp
@@ -52,83 +52,111 @@ int KateScriptDocument::defStyleNum(int line, int column)
     return m_document->defStyleNum(line, column);
 }
 
-int KateScriptDocument::defStyleNum(const QJSValue &jscursor)
+int KateScriptDocument::defStyleNum(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return defStyleNum(cursor.line(), cursor.column());
 }
 
+int KateScriptDocument::defStyleNum(const QJSValue &jscursor)
+{
+    return defStyleNum(cursorFromScriptValue(jscursor));
+}
+
 bool KateScriptDocument::isCode(int line, int column)
 {
     const int defaultStyle = defStyleNum(line, column);
     return _isCode(defaultStyle);
 }
 
-bool KateScriptDocument::isCode(const QJSValue &jscursor)
+bool KateScriptDocument::isCode(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return isCode(cursor.line(), cursor.column());
 }
 
+bool KateScriptDocument::isCode(const QJSValue &jscursor)
+{
+    return isCode(cursorFromScriptValue(jscursor));
+}
+
 bool KateScriptDocument::isComment(int line, int column)
 {
     return m_document->isComment(line, column);
 }
 
-bool KateScriptDocument::isComment(const QJSValue &jscursor)
+bool KateScriptDocument::isComment(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return isComment(cursor.line(), cursor.column());
 }
 
+bool KateScriptDocument::isComment(const QJSValue &jscursor)
+{
+    return isComment(cursorFromScriptValue(jscursor));
+}
+
 bool KateScriptDocument::isString(int line, int column)
 {
     const int defaultStyle = defStyleNum(line, column);
     return defaultStyle == KTextEditor::dsString;
 }
 
-bool KateScriptDocument::isString(const QJSValue &jscursor)
+bool KateScriptDocument::isString(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return isString(cursor.line(), cursor.column());
 }
 
+bool KateScriptDocument::isString(const QJSValue &jscursor)
+{
+    return isString(cursorFromScriptValue(jscursor));
+}
+
 bool KateScriptDocument::isRegionMarker(int line, int column)
 {
     const int defaultStyle = defStyleNum(line, column);
     return defaultStyle == KTextEditor::dsRegionMarker;
 }
 
-bool KateScriptDocument::isRegionMarker(const QJSValue &jscursor)
+bool KateScriptDocument::isRegionMarker(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return isRegionMarker(cursor.line(), cursor.column());
 }
 
+bool KateScriptDocument::isRegionMarker(const QJSValue &jscursor)
+{
+    return isRegionMarker(cursorFromScriptValue(jscursor));
+}
+
 bool KateScriptDocument::isChar(int line, int column)
 {
     const int defaultStyle = defStyleNum(line, column);
     return defaultStyle == KTextEditor::dsChar;
 }
 
-bool KateScriptDocument::isChar(const QJSValue &jscursor)
+bool KateScriptDocument::isChar(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return isChar(cursor.line(), cursor.column());
 }
 
+bool KateScriptDocument::isChar(const QJSValue &jscursor)
+{
+    return isChar(cursorFromScriptValue(jscursor));
+}
+
 bool KateScriptDocument::isOthers(int line, int column)
 {
     const int defaultStyle = defStyleNum(line, column);
     return defaultStyle == KTextEditor::dsOthers;
 }
 
-bool KateScriptDocument::isOthers(const QJSValue &jscursor)
+bool KateScriptDocument::isOthers(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return isOthers(cursor.line(), cursor.column());
 }
 
+bool KateScriptDocument::isOthers(const QJSValue &jscursor)
+{
+    return isOthers(cursorFromScriptValue(jscursor));
+}
+
 int KateScriptDocument::firstVirtualColumn(int line)
 {
     const int tabWidth = m_document->config()->tabWidth();
@@ -161,22 +189,20 @@ int KateScriptDocument::toVirtualColumn(int line, int column)
     return textLine->toVirtualColumn(column, tabWidth);
 }
 
-int KateScriptDocument::toVirtualColumn(const QJSValue &jscursor)
+int KateScriptDocument::toVirtualColumn(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return toVirtualColumn(cursor.line(), cursor.column());
 }
 
-QJSValue KateScriptDocument::toVirtualCursor(int line, int column)
+int KateScriptDocument::toVirtualColumn(const QJSValue &jscursor)
 {
-    const KTextEditor::Cursor cursor(line, toVirtualColumn(line, column));
-    return cursorToScriptValue(m_engine, cursor);
+    return toVirtualColumn(cursorFromScriptValue(jscursor));
 }
 
-QJSValue KateScriptDocument::toVirtualCursor(const QJSValue &jscursor)
+KTextEditor::Cursor KateScriptDocument::toVirtualCursor(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    return toVirtualCursor(cursor.line(), cursor.column());
+    return KTextEditor::Cursor(cursor.line(),
+                               toVirtualColumn(cursor.line(), cursor.column()));
 }
 
 int KateScriptDocument::fromVirtualColumn(int line, int virtualColumn)
@@ -189,22 +215,15 @@ int KateScriptDocument::fromVirtualColumn(int line, int virtualColumn)
     return textLine->fromVirtualColumn(virtualColumn, tabWidth);
 }
 
-int KateScriptDocument::fromVirtualColumn(const QJSValue &jscursor)
+int KateScriptDocument::fromVirtualColumn(const KTextEditor::Cursor &virtualCursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    return fromVirtualColumn(cursor.line(), cursor.column());
+    return fromVirtualColumn(virtualCursor.line(), virtualCursor.column());
 }
 
-QJSValue KateScriptDocument::fromVirtualCursor(int line, int column)
+KTextEditor::Cursor KateScriptDocument::fromVirtualCursor(const KTextEditor::Cursor &virtualCursor)
 {
-    const KTextEditor::Cursor cursor(line, fromVirtualColumn(line, column));
-    return cursorToScriptValue(m_engine, cursor);
-}
-
-QJSValue KateScriptDocument::fromVirtualCursor(const QJSValue &jscursor)
-{
-    const auto cursor = cursorFromScriptValue(jscursor);
-    return fromVirtualCursor(cursor.line(), cursor.column());
+    return KTextEditor::Cursor(virtualCursor.line(),
+                               fromVirtualColumn(virtualCursor.line(), virtualCursor.column()));
 }
 
 KTextEditor::Cursor KateScriptDocument::rfindInternal(int line, int column, const QString &text, int attribute)
@@ -361,6 +380,8 @@ bool KateScriptDocument::endsWith(int line, const QString &pattern, bool skipWhi
     return textLine->endsWith(pattern);
 }
 
+//BEGIN Automatically generated
+
 QString KateScriptDocument::fileName()
 {
     return m_document->documentName();
@@ -408,21 +429,22 @@ QString KateScriptDocument::text()
 
 QString KateScriptDocument::text(int fromLine, int fromColumn, int toLine, int toColumn)
 {
-    const KTextEditor::Range range(fromLine, fromColumn, toLine, toColumn);
-    return m_document->text(range);
+    return text(KTextEditor::Range(fromLine, fromColumn, toLine, toColumn));
 }
 
-QString KateScriptDocument::text(const QJSValue &jsfrom, const QJSValue &jsto)
+QString KateScriptDocument::text(const KTextEditor::Cursor &from, const KTextEditor::Cursor &to)
 {
-    const KTextEditor::Cursor from = cursorFromScriptValue(jsfrom);
-    const KTextEditor::Cursor to = cursorFromScriptValue(jsto);
-    return text(from.line(), from.column(), to.line(), to.column());
+    return text(KTextEditor::Range(from, to));
+}
+
+QString KateScriptDocument::text(const KTextEditor::Range &range)
+{
+    return m_document->text(range);
 }
 
 QString KateScriptDocument::text(const QJSValue &jsrange)
 {
-    const auto range = rangeFromScriptValue(jsrange);
-    return text(range.start().line(), range.start().column(), range.end().line(), range.end().column());
+    return text(rangeFromScriptValue(jsrange));
 }
 
 QString KateScriptDocument::line(int line)
@@ -432,39 +454,38 @@ QString KateScriptDocument::line(int line)
 
 QString KateScriptDocument::wordAt(int line, int column)
 {
-    const KTextEditor::Cursor cursor(line, column);
-    return m_document->wordAt(cursor);
+    return wordAt(KTextEditor::Cursor(line, column));
 }
 
-QString KateScriptDocument::wordAt(const QJSValue &jscursor)
+QString KateScriptDocument::wordAt(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    return wordAt(cursor.line(), cursor.column());
+    return m_document->wordAt(cursor);
 }
 
 QJSValue KateScriptDocument::wordRangeAt(int line, int column)
 {
-    const KTextEditor::Cursor cursor(line, column);
-    return rangeToScriptValue(m_engine, m_document->wordRangeAt(cursor));
+    return wordRangeAt(KTextEditor::Cursor(line, column));
 }
 
-QJSValue KateScriptDocument::wordRangeAt(const QJSValue &jscursor)
+QJSValue KateScriptDocument::wordRangeAt(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    return wordRangeAt(cursor.line(), cursor.column());
+    return rangeToScriptValue(m_engine, m_document->wordRangeAt(cursor));
 }
 
 QString KateScriptDocument::charAt(int line, int column)
 {
-    const KTextEditor::Cursor cursor(line, column);
+    return charAt(KTextEditor::Cursor(line, column));
+}
+
+QString KateScriptDocument::charAt(const KTextEditor::Cursor &cursor)
+{
     const QChar c = m_document->characterAt(cursor);
     return c.isNull() ? QString() : QString(c);
 }
 
 QString KateScriptDocument::charAt(const QJSValue &jscursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    return charAt(cursor.line(), cursor.column());
+    return charAt(cursorFromScriptValue(jscursor));
 }
 
 QString KateScriptDocument::firstChar(int line)
@@ -491,14 +512,17 @@ QString KateScriptDocument::lastChar(int line)
 
 bool KateScriptDocument::isSpace(int line, int column)
 {
-    const KTextEditor::Cursor cursor(line, column);
+    return isSpace(KTextEditor::Cursor(line, column));
+}
+
+bool KateScriptDocument::isSpace(const KTextEditor::Cursor &cursor)
+{
     return m_document->characterAt(cursor).isSpace();
 }
 
 bool KateScriptDocument::isSpace(const QJSValue &jscursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    return isSpace(cursor.line(), cursor.column());
+    return isSpace(cursorFromScriptValue(jscursor));
 }
 
 bool KateScriptDocument::matchesAt(int line, int column, const QString &s)
@@ -507,12 +531,19 @@ bool KateScriptDocument::matchesAt(int line, int column, const QString &s)
     return textLine ? textLine->matchesAt(column, s) : false;
 }
 
-bool KateScriptDocument::matchesAt(const QJSValue &jscursor, const QString &s)
+bool KateScriptDocument::matchesAt(const KTextEditor::Cursor &cursor, const QString &s)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
+
     return matchesAt(cursor.line(), cursor.column(), s);
 }
 
+bool KateScriptDocument::matchesAt(const QJSValue &jscursor, const QString &s)
+{
+
+    KTextEditor::Cursor cursor = cursorFromScriptValue(jscursor);
+    return matchesAt(cursor, s);
+}
+
 bool KateScriptDocument::setText(const QString &s)
 {
     return m_document->setText(s);
@@ -530,44 +561,55 @@ bool KateScriptDocument::truncate(int line, int column)
         return false;
     }
 
-    return removeText(line, column, line, textLine->text().size() - column);
+    KTextEditor::Cursor from(line, column), to(line, textLine->text().size() - column);
+    return removeText(KTextEditor::Range(from, to));
 }
 
-bool KateScriptDocument::truncate(const QJSValue &jscursor)
+bool KateScriptDocument::truncate(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return truncate(cursor.line(), cursor.column());
 }
 
+bool KateScriptDocument::truncate(const QJSValue &cursor)
+{
+    return truncate(cursorFromScriptValue(cursor));
+}
+
 bool KateScriptDocument::insertText(int line, int column, const QString &s)
 {
-    KTextEditor::Cursor cursor(line, column);
+    return insertText(KTextEditor::Cursor(line, column), s);
+}
+
+bool KateScriptDocument::insertText(const KTextEditor::Cursor &cursor, const QString &s)
+{
     return m_document->insertText(cursor, s);
 }
 
 bool KateScriptDocument::insertText(const QJSValue &jscursor, const QString &s)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    return insertText(cursor.line(), cursor.column(), s);
+    KTextEditor::Cursor cursor = cursorFromScriptValue(jscursor);
+    return insertText(cursor, s);
 }
 
 bool KateScriptDocument::removeText(int fromLine, int fromColumn, int toLine, int toColumn)
 {
-    const KTextEditor::Range range(fromLine, fromColumn, toLine, toColumn);
-    return m_document->removeText(range);
+    return removeText(KTextEditor::Range(fromLine, fromColumn, toLine, toColumn));
 }
 
-bool KateScriptDocument::removeText(const QJSValue &jsfrom, const QJSValue &jsto)
+bool KateScriptDocument::removeText(const KTextEditor::Cursor &from, const KTextEditor::Cursor &to)
 {
-    const KTextEditor::Cursor from = cursorFromScriptValue(jsfrom);
-    const KTextEditor::Cursor to = cursorFromScriptValue(jsto);
-    return removeText(from.line(), from.column(), to.line(), to.column());
+    return removeText(KTextEditor::Range(from, to));
+}
+
+bool KateScriptDocument::removeText(const KTextEditor::Range &range)
+{
+    return m_document->removeText(range);
 }
 
 bool KateScriptDocument::removeText(const QJSValue &jsrange)
 {
-    const auto range = rangeFromScriptValue(jsrange);
-    return removeText(range.start().line(), range.start().column(), range.end().line(), range.end().column());
+    KTextEditor::Range range = rangeFromScriptValue(jsrange);
+    return removeText(range);
 }
 
 bool KateScriptDocument::insertLine(int line, const QString &s)
@@ -585,12 +627,16 @@ bool KateScriptDocument::wrapLine(int line, int column)
     return m_document->editWrapLine(line, column);
 }
 
-bool KateScriptDocument::wrapLine(const QJSValue &jscursor)
+bool KateScriptDocument::wrapLine(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return wrapLine(cursor.line(), cursor.column());
 }
 
+bool KateScriptDocument::wrapLine(const QJSValue &jscursor)
+{
+    return wrapLine(cursorFromScriptValue(jscursor));
+}
+
 void KateScriptDocument::joinLines(int startLine, int endLine)
 {
     m_document->joinLines(startLine, endLine);
@@ -646,6 +692,11 @@ bool KateScriptDocument::isValidTextPosition(int line, int column)
     return m_document->isValidTextPosition(KTextEditor::Cursor(line, column));
 }
 
+bool KateScriptDocument::isValidTextPosition(const KTextEditor::Cursor& cursor)
+{
+    return m_document->isValidTextPosition(cursor);
+}
+
 bool KateScriptDocument::isValidTextPosition(const QJSValue& cursor)
 {
     return m_document->isValidTextPosition(cursorFromScriptValue(cursor));
@@ -672,12 +723,16 @@ int KateScriptDocument::prevNonSpaceColumn(int line, int column)
     return textLine->previousNonSpaceChar(column);
 }
 
-int KateScriptDocument::prevNonSpaceColumn(const QJSValue &jscursor)
+int KateScriptDocument::prevNonSpaceColumn(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return prevNonSpaceColumn(cursor.line(), cursor.column());
 }
 
+int KateScriptDocument::prevNonSpaceColumn(const QJSValue &cursor)
+{
+    return prevNonSpaceColumn(cursorFromScriptValue(cursor));
+}
+
 int KateScriptDocument::nextNonSpaceColumn(int line, int column)
 {
     Kate::TextLine textLine = m_document->plainKateTextLine(line);
@@ -687,12 +742,16 @@ int KateScriptDocument::nextNonSpaceColumn(int line, int column)
     return textLine->nextNonSpaceChar(column);
 }
 
-int KateScriptDocument::nextNonSpaceColumn(const QJSValue &jscursor)
+int KateScriptDocument::nextNonSpaceColumn(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return nextNonSpaceColumn(cursor.line(), cursor.column());
 }
 
+int KateScriptDocument::nextNonSpaceColumn(const QJSValue &cursor)
+{
+    return nextNonSpaceColumn(cursorFromScriptValue(cursor));
+}
+
 int KateScriptDocument::prevNonEmptyLine(int line)
 {
     const int startLine = line;
@@ -772,9 +831,8 @@ int KateScriptDocument::attribute(int line, int column)
     return textLine->attribute(column);
 }
 
-int KateScriptDocument::attribute(const QJSValue &jscursor)
+int KateScriptDocument::attribute(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return attribute(cursor.line(), cursor.column());
 }
 
@@ -783,9 +841,8 @@ bool KateScriptDocument::isAttribute(int line, int column, int attr)
     return attr == attribute(line, column);
 }
 
-bool KateScriptDocument::isAttribute(const QJSValue &jscursor, int attr)
+bool KateScriptDocument::isAttribute(const KTextEditor::Cursor &cursor, int attr)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return isAttribute(cursor.line(), cursor.column(), attr);
 }
 
@@ -797,23 +854,32 @@ QString KateScriptDocument::attributeName(int line, int column)
     return a->name();
 }
 
-QString KateScriptDocument::attributeName(const QJSValue &jscursor)
+QString KateScriptDocument::attributeName(const KTextEditor::Cursor &cursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return attributeName(cursor.line(), cursor.column());
 }
 
+QString KateScriptDocument::attributeName(const QJSValue &jscursor)
+{
+    return attributeName(cursorFromScriptValue(jscursor));
+}
+
 bool KateScriptDocument::isAttributeName(int line, int column, const QString &name)
 {
     return name == attributeName(line, column);
 }
 
-bool KateScriptDocument::isAttributeName(const QJSValue &jscursor, const QString &name)
+bool KateScriptDocument::isAttributeName(const KTextEditor::Cursor &cursor, const QString &name)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
     return isAttributeName(cursor.line(), cursor.column(), name);
 }
 
+bool KateScriptDocument::isAttributeName(const QJSValue &jscursor, const QString &name)
+{
+    KTextEditor::Cursor cursor = cursorFromScriptValue(jscursor);
+    return isAttributeName(cursor, name);
+}
+
 QString KateScriptDocument::variable(const QString &s)
 {
     return m_document->variable(s);
@@ -824,6 +890,8 @@ void KateScriptDocument::setVariable(const QString &s, const QString &v)
     m_document->setVariable(s, v);
 }
 
+//END
+
 bool KateScriptDocument::_isCode(int defaultStyle)
 {
     return (defaultStyle != KTextEditor::dsComment
@@ -833,8 +901,13 @@ bool KateScriptDocument::_isCode(int defaultStyle)
             && defaultStyle != KTextEditor::dsOthers);
 }
 
-void KateScriptDocument::indent(const QJSValue &jsrange, int change)
+void KateScriptDocument::indent(KTextEditor::Range range, int change)
 {
-    const auto range = rangeFromScriptValue(jsrange);
     m_document->indent(range, change);
 }
+
+void KateScriptDocument::indent(const QJSValue &jsrange, int change)
+{
+    KTextEditor::Range range = rangeFromScriptValue(jsrange);
+    indent(range, change);
+}
diff --git src/script/katescriptdocument.h src/script/katescriptdocument.h
index d4801b5..ad42274 100644
--- src/script/katescriptdocument.h
+++ src/script/katescriptdocument.h
@@ -60,33 +60,41 @@ public:
     Q_INVOKABLE bool isModified();
     Q_INVOKABLE QString text();
     Q_INVOKABLE QString text(int fromLine, int fromColumn, int toLine, int toColumn);
-    Q_INVOKABLE QString text(const QJSValue &jsfrom, const QJSValue &jsto);
+    QString text(const KTextEditor::Cursor &from, const KTextEditor::Cursor &to);
+    QString text(const KTextEditor::Range &range);
     Q_INVOKABLE QString text(const QJSValue &jsrange);
     Q_INVOKABLE QString line(int line);
     Q_INVOKABLE QString wordAt(int line, int column);
-    Q_INVOKABLE QString wordAt(const QJSValue &jscursor);
+    QString wordAt(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE QJSValue wordRangeAt(int line, int column);
-    Q_INVOKABLE QJSValue wordRangeAt(const QJSValue &jscursor);
+    QJSValue wordRangeAt(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE QString charAt(int line, int column);
-    Q_INVOKABLE QString charAt(const QJSValue &jscursor);
+    QString charAt(const KTextEditor::Cursor &cursor);
+    Q_INVOKABLE QString charAt(const QJSValue &cursor);
     Q_INVOKABLE QString firstChar(int line);
     Q_INVOKABLE QString lastChar(int line);
     Q_INVOKABLE bool isSpace(int line, int column);
+    bool isSpace(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE bool isSpace(const QJSValue &jscursor);
     Q_INVOKABLE bool matchesAt(int line, int column, const QString &s);
+    bool matchesAt(const KTextEditor::Cursor &cursor, const QString &s);
     Q_INVOKABLE bool matchesAt(const QJSValue &cursor, const QString &s);
     Q_INVOKABLE bool setText(const QString &s);
     Q_INVOKABLE bool clear();
     Q_INVOKABLE bool truncate(int line, int column);
-    Q_INVOKABLE bool truncate(const QJSValue &jscursor);
+    bool truncate(const KTextEditor::Cursor &cursor);
+    Q_INVOKABLE bool truncate(const QJSValue &cursor);
     Q_INVOKABLE bool insertText(int line, int column, const QString &s);
+    bool insertText(const KTextEditor::Cursor &cursor, const QString &s);
     Q_INVOKABLE bool insertText(const QJSValue &jscursor, const QString &s);
     Q_INVOKABLE bool removeText(int fromLine, int fromColumn, int toLine, int toColumn);
+    bool removeText(const KTextEditor::Cursor &from, const KTextEditor::Cursor &to);
+    bool removeText(const KTextEditor::Range &range);
     Q_INVOKABLE bool removeText(const QJSValue &range);
-    Q_INVOKABLE bool removeText(const QJSValue &jsfrom, const QJSValue &jsto);
     Q_INVOKABLE bool insertLine(int line, const QString &s);
     Q_INVOKABLE bool removeLine(int line);
     Q_INVOKABLE bool wrapLine(int line, int column);
+    bool wrapLine(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE bool wrapLine(const QJSValue &cursor);
     Q_INVOKABLE void joinLines(int startLine, int endLine);
     Q_INVOKABLE int lines();
@@ -101,9 +109,11 @@ public:
     Q_INVOKABLE int firstColumn(int line);
     Q_INVOKABLE int lastColumn(int line);
     Q_INVOKABLE int prevNonSpaceColumn(int line, int column);
-    Q_INVOKABLE int prevNonSpaceColumn(const QJSValue &jscursor);
+    int prevNonSpaceColumn(const KTextEditor::Cursor &cursor);
+    Q_INVOKABLE int prevNonSpaceColumn(const QJSValue &cursor);
     Q_INVOKABLE int nextNonSpaceColumn(int line, int column);
-    Q_INVOKABLE int nextNonSpaceColumn(const QJSValue &jscursor);
+    int nextNonSpaceColumn(const KTextEditor::Cursor &cursor);
+    Q_INVOKABLE int nextNonSpaceColumn(const QJSValue &cursor);
     Q_INVOKABLE int prevNonEmptyLine(int line);
     Q_INVOKABLE int nextNonEmptyLine(int line);
     Q_INVOKABLE bool isInWord(const QString &character, int attribute);
@@ -116,30 +126,33 @@ public:
     Q_INVOKABLE QJSValue documentRange();
     Q_INVOKABLE QJSValue documentEnd();
     Q_INVOKABLE bool isValidTextPosition(int line, int column);
+    bool isValidTextPosition(const KTextEditor::Cursor& cursor);
     Q_INVOKABLE bool isValidTextPosition(const QJSValue& cursor);
 
     /**
      * Get the syntax highlighting attribute at a given position in the document.
      */
     Q_INVOKABLE int attribute(int line, int column);
-    Q_INVOKABLE int attribute(const QJSValue &jscursor);
+    int attribute(const KTextEditor::Cursor &cursor);
 
     /**
      * Return true if the highlight attribute equals @p attr.
      */
     Q_INVOKABLE bool isAttribute(int line, int column, int attr);
-    Q_INVOKABLE bool isAttribute(const QJSValue &jscursor, int attr);
+    bool isAttribute(const KTextEditor::Cursor &cursor, int attr);
 
     /**
      * Get the name of the syntax highlighting attribute at the given position.
      */
     Q_INVOKABLE QString attributeName(int line, int column);
+    QString attributeName(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE QString attributeName(const QJSValue &jscursor);
 
     /**
      * Return true is the name of the syntax attribute equals @p name.
      */
     Q_INVOKABLE bool isAttributeName(int line, int column, const QString &name);
+    bool isAttributeName(const KTextEditor::Cursor &cursor, const QString &name);
     Q_INVOKABLE bool isAttributeName(const QJSValue &cursor, const QString &name);
 
     Q_INVOKABLE QString variable(const QString &s);
@@ -149,13 +162,12 @@ public:
     Q_INVOKABLE int firstVirtualColumn(int line);
     Q_INVOKABLE int lastVirtualColumn(int line);
     Q_INVOKABLE int toVirtualColumn(int line, int column);
+    int toVirtualColumn(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE int toVirtualColumn(const QJSValue &cursor);
-    Q_INVOKABLE QJSValue toVirtualCursor(int line, int column);
-    Q_INVOKABLE QJSValue toVirtualCursor(const QJSValue &jscursor);
+    KTextEditor::Cursor toVirtualCursor(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE int fromVirtualColumn(int line, int virtualColumn);
-    Q_INVOKABLE int fromVirtualColumn(const QJSValue &jscursor);
-    Q_INVOKABLE QJSValue fromVirtualCursor(int line, int column);
-    Q_INVOKABLE QJSValue fromVirtualCursor(const QJSValue &jscursor);
+    int fromVirtualColumn(const KTextEditor::Cursor &virtualCursor);
+    KTextEditor::Cursor fromVirtualCursor(const KTextEditor::Cursor &virtualCursor);
 
     KTextEditor::Cursor anchorInternal(int line, int column, QChar character);
     KTextEditor::Cursor anchor(const KTextEditor::Cursor &cursor, QChar character);
@@ -167,23 +179,31 @@ public:
     Q_INVOKABLE QJSValue rfind(const QJSValue &cursor, const QString &text, int attribute = -1);
 
     Q_INVOKABLE int defStyleNum(int line, int column);
+    int defStyleNum(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE int defStyleNum(const QJSValue &cursor);
     Q_INVOKABLE bool isCode(int line, int column);
+    bool isCode(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE bool isCode(const QJSValue &cursor);
     Q_INVOKABLE bool isComment(int line, int column);
+    bool isComment(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE bool isComment(const QJSValue &cursor);
     Q_INVOKABLE bool isString(int line, int column);
+    bool isString(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE bool isString(const QJSValue &cursor);
     Q_INVOKABLE bool isRegionMarker(int line, int column);
+    bool isRegionMarker(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE bool isRegionMarker(const QJSValue &cursor);
     Q_INVOKABLE bool isChar(int line, int column);
+    bool isChar(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE bool isChar(const QJSValue &cursor);
     Q_INVOKABLE bool isOthers(int line, int column);
+    bool isOthers(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE bool isOthers(const QJSValue &cursor);
 
     Q_INVOKABLE bool startsWith(int line, const QString &pattern, bool skipWhiteSpaces);
     Q_INVOKABLE bool endsWith(int line, const QString &pattern, bool skipWhiteSpaces);
 
+    void indent(KTextEditor::Range range, int change);
     Q_INVOKABLE void indent(const QJSValue &jsrange, int change);
 
 private:
diff --git src/script/katescriptview.cpp src/script/katescriptview.cpp
index 8bcff63..1334205 100644
--- src/script/katescriptview.cpp
+++ src/script/katescriptview.cpp
@@ -50,14 +50,18 @@ QJSValue KateScriptView::cursorPosition()
 
 void KateScriptView::setCursorPosition(int line, int column)
 {
-    const KTextEditor::Cursor cursor(line, column);
+    KTextEditor::Cursor c(line, column);
+    m_view->setCursorPosition(c);
+}
+
+void KateScriptView::setCursorPosition(const KTextEditor::Cursor &cursor)
+{
     m_view->setCursorPosition(cursor);
 }
 
 void KateScriptView::setCursorPosition(const QJSValue &jscursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    m_view->setCursorPosition(cursor);
+    setCursorPosition(cursorFromScriptValue(jscursor));
 }
 
 QJSValue KateScriptView::virtualCursorPosition()
@@ -67,14 +71,17 @@ QJSValue KateScriptView::virtualCursorPosition()
 
 void KateScriptView::setVirtualCursorPosition(int line, int column)
 {
-    const KTextEditor::Cursor cursor(line, column);
+    setVirtualCursorPosition(KTextEditor::Cursor(line, column));
+}
+
+void KateScriptView::setVirtualCursorPosition(const KTextEditor::Cursor &cursor)
+{
     m_view->setCursorPositionVisual(cursor);
 }
 
 void KateScriptView::setVirtualCursorPosition(const QJSValue &jscursor)
 {
-    const auto cursor = cursorFromScriptValue(jscursor);
-    setVirtualCursorPosition(cursor.line(), cursor.column());
+    setVirtualCursorPosition(cursorFromScriptValue(jscursor));
 }
 
 QString KateScriptView::selectedText()
@@ -114,6 +121,6 @@ void KateScriptView::clearSelection()
 
 void KateScriptView::align(const QJSValue &jsrange)
 {
-    const auto range = rangeFromScriptValue(jsrange);
+    KTextEditor::Range range = rangeFromScriptValue(jsrange);
     m_view->doc()->align (m_view, range);
 }
diff --git src/script/katescriptview.h src/script/katescriptview.h
index 8009630..c68679c 100644
--- src/script/katescriptview.h
+++ src/script/katescriptview.h
@@ -53,10 +53,12 @@ public:
      * @since 4.4
      */
     Q_INVOKABLE void setCursorPosition(int line, int column);
+     void setCursorPosition(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE void setCursorPosition(const QJSValue &cursor);
 
     Q_INVOKABLE QJSValue virtualCursorPosition();
     Q_INVOKABLE void setVirtualCursorPosition(int line, int column);
+    void setVirtualCursorPosition(const KTextEditor::Cursor &cursor);
     Q_INVOKABLE void setVirtualCursorPosition(const QJSValue &cursor);
 
     Q_INVOKABLE QString selectedText();
@@ -68,7 +70,7 @@ public:
     Q_INVOKABLE void clearSelection();
 
     Q_INVOKABLE void align(const QJSValue &range);
-
+    
 private:
     KTextEditor::ViewPrivate *m_view;
     QJSEngine *m_engine;
