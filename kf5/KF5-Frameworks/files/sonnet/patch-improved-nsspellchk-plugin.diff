diff --git a/src/plugins/nsspellchecker/CMakeLists.txt b/src/plugins/nsspellchecker/CMakeLists.txt
index 5e80a10..f79f745 100644
--- a/src/plugins/nsspellchecker/CMakeLists.txt
+++ b/src/plugins/nsspellchecker/CMakeLists.txt
@@ -2,10 +2,14 @@ set(sonnet_nsspellchecker_PART_SRCS
     nsspellcheckerclient.mm
     nsspellcheckerdict.mm
 )
+ecm_qt_declare_logging_category(sonnet_nsspellchecker_PART_SRCS
+    HEADER nsspellcheckerdebug.h
+    IDENTIFIER SONNET_NSSPELLCHECKER
+    CATEGORY_NAME sonnet.plugins.nsspellchecker)
 
 add_library(sonnet_nsspellchecker MODULE ${sonnet_nsspellchecker_PART_SRCS})
 
-target_link_libraries(sonnet_nsspellchecker PRIVATE KF5::SonnetCore "-framework Cocoa")
+target_link_libraries(sonnet_nsspellchecker PRIVATE KF5::SonnetCore "-framework AppKit")
 
 install(TARGETS sonnet_nsspellchecker  DESTINATION ${KDE_INSTALL_PLUGINDIR}/kf5/sonnet/)
 
diff --git a/src/plugins/nsspellchecker/nsspellcheckerclient.h b/src/plugins/nsspellchecker/nsspellcheckerclient.h
index 01068b5..7580eab 100644
--- a/src/plugins/nsspellchecker/nsspellcheckerclient.h
+++ b/src/plugins/nsspellchecker/nsspellcheckerclient.h
@@ -37,10 +37,7 @@ public:
     explicit NSSpellCheckerClient(QObject *parent = nullptr);
     ~NSSpellCheckerClient();
 
-    int reliability() const
-    {
-        return 30;
-    }
+    int reliability() const;
 
     SpellerPlugin *createSpeller(const QString &language);
     QStringList languages() const;
diff --git a/src/plugins/nsspellchecker/nsspellcheckerclient.mm b/src/plugins/nsspellchecker/nsspellcheckerclient.mm
index 27af911..e9911ac 100644
--- a/src/plugins/nsspellchecker/nsspellcheckerclient.mm
+++ b/src/plugins/nsspellchecker/nsspellcheckerclient.mm
@@ -21,7 +21,7 @@
 #include "nsspellcheckerclient.h"
 #include "nsspellcheckerdict.h"
 
-#import <Cocoa/Cocoa.h>
+#import <AppKit/AppKit.h>
 
 using namespace Sonnet;
 
@@ -34,6 +34,11 @@ NSSpellCheckerClient::~NSSpellCheckerClient()
 {
 }
 
+int NSSpellCheckerClient::reliability() const
+{
+    return qEnvironmentVariableIsSet("SONNET_PREFER_NSSPELLCHECKER") ? 9999 : 30;
+}
+
 SpellerPlugin *NSSpellCheckerClient::createSpeller(const QString &language)
 {
     return new NSSpellCheckerDict(language);
diff --git a/src/plugins/nsspellchecker/nsspellcheckerdict.h b/src/plugins/nsspellchecker/nsspellcheckerdict.h
index 5b5bf28..28c8bfc 100644
--- a/src/plugins/nsspellchecker/nsspellcheckerdict.h
+++ b/src/plugins/nsspellchecker/nsspellcheckerdict.h
@@ -37,7 +37,11 @@ public:
     virtual bool addToPersonal(const QString &word);
     virtual bool addToSession(const QString &word);
 private:
+#ifdef __OBJC__
+    NSString *m_langCode;
+#else
     void *m_langCode;
+#endif
 };
 
 #endif
diff --git a/src/plugins/nsspellchecker/nsspellcheckerdict.mm b/src/plugins/nsspellchecker/nsspellcheckerdict.mm
index 04a9a45..5dd4608 100644
--- a/src/plugins/nsspellchecker/nsspellcheckerdict.mm
+++ b/src/plugins/nsspellchecker/nsspellcheckerdict.mm
@@ -19,45 +19,95 @@
  * 02110-1301  USA
  */
 #include "nsspellcheckerdict.h"
+#include "nsspellcheckerdebug.h"
 
-#import <Cocoa/Cocoa.h>
+#import <AppKit/AppKit.h>
 
 using namespace Sonnet;
 
 NSSpellCheckerDict::NSSpellCheckerDict(const QString &lang)
     : SpellerPlugin(lang)
-    , m_langCode(lang.toNSString())
+    , m_langCode([lang.toNSString() retain])
 {
+    NSSpellChecker *checker = [NSSpellChecker sharedSpellChecker];
+    if ([checker setLanguage:m_langCode]) {
+        qCDebug(SONNET_NSSPELLCHECKER) << "Loading dictionary for" << lang;
+        [checker updatePanels];
+    } else {
+        qCWarning(SONNET_NSSPELLCHECKER) << "Loading dictionary for unsupported language" << lang;
+    }
 }
 
 NSSpellCheckerDict::~NSSpellCheckerDict()
 {
+    [m_langCode release];
 }
 
 bool NSSpellCheckerDict::isCorrect(const QString &word) const
 {
-    NSRange range = [[NSSpellChecker sharedSpellChecker] checkSpellingOfString:word.toNSString() startingAt:0 language:reinterpret_cast<NSString*>(m_langCode) wrap:NO inSpellDocumentWithTag:0 wordCount:0];
-    return range.length==0;
+    NSString *nsWord = word.toNSString();
+    NSSpellChecker *checker = [NSSpellChecker sharedSpellChecker];
+    NSRange range = [checker checkSpellingOfString:nsWord
+        startingAt:0 language:m_langCode
+        wrap:NO inSpellDocumentWithTag:0 wordCount:nullptr];
+    if (range.length == 0) {
+        // Check if the user configured a replacement text for this string. Sadly
+        // we can only signal an error if that's the case, Sonnet has no other way
+        // to take such substitutions into account.
+        if (NSDictionary *replacements = [checker userReplacementsDictionary]) {
+            return [replacements objectForKey:nsWord] == nil;
+        } else {
+            return true;
+        }
+    }
+    return false;
 }
 
 QStringList NSSpellCheckerDict::suggest(const QString &word) const
 {
-    NSString* correction = [[NSSpellChecker sharedSpellChecker] correctionForWordRange:NSMakeRange(0, word.length()) inString:word.toNSString() language:reinterpret_cast<NSString*>(m_langCode) inSpellDocumentWithTag:0];
-    return QStringList(QString::fromNSString(correction));
+    NSString *nsWord = word.toNSString();
+    NSSpellChecker *checker = [NSSpellChecker sharedSpellChecker];
+    NSArray *suggestions = [checker guessesForWordRange:NSMakeRange(0, word.length())
+        inString:nsWord language:m_langCode inSpellDocumentWithTag:0];
+    QStringList lst;
+    NSDictionary *replacements = [checker userReplacementsDictionary];
+    QString replacement;
+    if ([replacements objectForKey:nsWord]) {
+        // return the replacement text from the userReplacementsDictionary first.
+        replacement = QString::fromNSString([replacements valueForKey:nsWord]);
+        lst << replacement;
+    }
+    for (NSString *suggestion in suggestions) {
+        // the replacement text from the userReplacementsDictionary will be in
+        // the suggestions list; don't add it again.
+        QString str = QString::fromNSString(suggestion);
+        if (str != replacement) {
+            lst << str;
+        }
+    }
+    return lst;
 }
 
 bool NSSpellCheckerDict::storeReplacement(const QString &bad,
                                     const QString &good)
 {
+    qCDebug(SONNET_NSSPELLCHECKER) << "Not storing replacement" << good << "for" << bad;
     return false;
 }
 
 bool NSSpellCheckerDict::addToPersonal(const QString &word)
 {
-    return false;
+    NSString *nsWord = word.toNSString();
+    NSSpellChecker *checker = [NSSpellChecker sharedSpellChecker];
+    if (![checker hasLearnedWord:nsWord]) {
+        [checker learnWord:nsWord];
+        [checker updatePanels];
+    }
+    return true;
 }
 
 bool NSSpellCheckerDict::addToSession(const QString &word)
 {
+    qCDebug(SONNET_NSSPELLCHECKER) << "Not storing" << word << "in the session dictionary";
     return false;
 }
