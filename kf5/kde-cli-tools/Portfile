# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$
# Copyright (c) 2015, 2016 R.J.V. Bertin

PortSystem          1.0

# store the cpp flags as the pre-configure phase will move them into
# configure.cflags and configure.cxxflags, and we want them in our post-destroot
# We register this pre-configure block before including any portgroups so we're
# to be called first.
pre-configure {
    if {${configure.cppflags} ne ""} {
        ui_debug "Saving CPPFLAGS=${configure.cppflags}"
        set fp [open "${workpath}/.cppflags" "w"]
        set cppflags [join ${configure.cppflags}]
        puts ${fp} "export CFLAGS=\"\$\{CFLAGS\} ${cppflags}\""
        puts ${fp} "export CXXFLAGS=\"\$\{CXXFLAGS\} ${cppflags}\"\n"
        close ${fp}
    } else {
        file delete -force ${workpath}/.cppflags
    }
}

set kf5.project     kde-cli-tools
set kf5.virtualPath plasma
set kf5.no_configure_log yes
PortGroup           kf5 1.1
# kf5.use_latest      plasma
name                kf5-cli-tools

maintainers         gmail.com:rjvbertin openmaintainer

installs_libs       no

description         KF5 CLI utilities
long_description    KF5 command line interface utilities.
# 5.11.1
checksums           rmd160  73494bd6639215d9281594756f6edc78e124d019 \
                    sha256  4c205e6a9cff7283ca727d12827c983d456f49948b82089bba8fa806fdf52736

patchfiles-append \
                    patch-preserve-window-icon.diff

kf5.depends_qt5_components \
                    qtsvg
kf5.depends_frameworks \
                    kcmutils kconfig kdoctools ki18n \
                    kiconthemes kinit kio kservice kwindowsystem
# these are optional:
kf5.depends_frameworks \
                    kdesu

# Qt documentation for this package makes no sense
kf5.allow_apidocs_generation no

platform linux {
    # this is only to get qt_libs_dir into the rpath in the cmake-kf5-mp wrapper
    cmake.install_rpath-prepend \
                    ${qt_libs_dir}
}

platform darwin {
    patchfiles-append \
                    patch-no-x11.diff \
                    patch-nongui-execs.diff
    kf5.kde4compat -port kde4-runtime {
        post-destroot {
            file delete -force ${destroot}${prefix}/share/doc/HTML
            file delete -force ${destroot}${prefix}/share/locale
            file delete -force ${destroot}${prefix}/share/man
        }
    }
    post-destroot {
        kf5.add_app_wrapper kcmshell5
    }
}

post-destroot {

    set cmakewrappername "${destroot}${prefix}/bin/cmake-kf5-mp"
    set fp [open ${cmakewrappername} "w"]
    puts ${fp} "#!/bin/sh\n"
    puts ${fp} "# This script wraps cmake with the arguments for building KF5 software in MacPorts style\n"
    puts ${fp} "if \[ \"\$\{CC\}\" = \"\" \] \;then"
    puts ${fp} "    export CC=${configure.cc}"
    puts ${fp} "fi"
    puts ${fp} "if \[ \"\$\{CXX\}\" = \"\" \] \;then"
    puts ${fp} "    export CXX=${configure.cxx}"
    puts ${fp} "fi\n"
    if {[file exists ${workpath}/.cppflags]} {
        close ${fp}
        system "cat ${workpath}/.cppflags >> ${cmakewrappername}"
        set fp [open ${cmakewrappername} "a"]
    }

    puts ${fp} "if \[ \"\$\{1\}\" = \"-E\" \] \;then"
        puts ${fp} "    case \$2 in"
        puts ${fp} "        server|capabilities)"
        puts ${fp} "            if \[ \"\$2\" = \"server\" -a \"`basename \$0`\" = \"cmake-kf5-mp_noserver\" \] \;then"
        puts ${fp} "                # emulate the error message from an older CMake version"
        puts ${fp} "                (   echo \"CMake Error: cmake version 3.0.1 (faked to avoid server mode)\""
        puts ${fp} "                    echo \"Usage: /opt/local/bin/cmake -E \[command\] \[arguments ...\]\""
        puts ${fp} "                ) 1>&2"
        puts ${fp} "                exit 1"
        puts ${fp} "            fi"
        puts ${fp} "            exec ${configure.cmd} \"\$@\""
        puts ${fp} "            \;\;"
        puts ${fp} "        *)"
        puts -nonewline ${fp} "            exec ${configure.cmd} \"\$@\""
        if {[info exists configure.pre_args]} {
            puts -nonewline ${fp} " [join ${configure.pre_args}]"
        }
        if {[info exists configure.args]} {
            puts -nonewline ${fp} " [join ${configure.args}]"
        }
        if {[info exists configure.post_args]} {
            puts -nonewline ${fp} " [string map [list ${worksrcpath} ""] [join ${configure.post_args}]]"
        }
        puts ${fp} ""
        puts ${fp} "    esac"
    puts ${fp} "else"
        puts -nonewline ${fp} "    exec ${configure.cmd}"
        if {[info exists configure.pre_args]} {
            puts -nonewline ${fp} " [join ${configure.pre_args}]"
        }
        if {[info exists configure.args]} {
            puts -nonewline ${fp} " [join ${configure.args}]"
        }
        if {[info exists configure.post_args]} {
            puts -nonewline ${fp} " [string map [list ${worksrcpath} ""] [join ${configure.post_args}]]"
        }
        puts ${fp} "\"\$@\""
    puts ${fp} "fi"
    close ${fp}
    system "chmod 755 ${cmakewrappername}"
    ln -s [file tail ${cmakewrappername}] ${cmakewrappername}_noserver
}

livecheck.type      regex
livecheck.url       http://download.kde.org/stable/plasma/
livecheck.regex     (5+(\\.\\d+)+)
