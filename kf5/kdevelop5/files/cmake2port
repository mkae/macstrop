#!/bin/bash

print_usage () {
    cat <<- ENDUSAGE
    #> cmake2port [cmake options] [port options] [--] [port options]
    cmake2-port options (NB no '=' between option and argument!):
        --port portName
        --variants variant(s)
        --configure.optflags "compiler options"
        --rewind : force a repeat of the port configure phase
    A wrapper that takes a CMake commandline and tries to convert it to a MacPorts port call
    Known CMake options are filtered out until a lone '--' option is encountered
    The port name has to be specified with "--port foo"
    Variant(s) can be specified with the --variants option.
    The CMake arguments --build <dir> and --target <foo> are supported.
ENDUSAGE
}

case $1 in
    --version)
        exec @PREFIX@bin/cmake "$@"
        ;;
    --help)
        print_usage
        exec @PREFIX@bin/cmake "$@"
        ;;
    -G)
        if [ $# = 1 ] ;then
            exec @PREFIX@bin/cmake -G
        fi
        ;;
esac

PORTOPTIONS=""
PORTOTHEROPTIONS=""
PORT=""
VARIANTS=""
REWIND=0
NOMORECMAKEOPTIONS=0
ECHO=""
OPTFLAGS=""

DOBUILD=0
BUILDDIR=""
BUILDTARGET=""

OPTSHIFT=0
parse_portOptions () {
    OPTSHIFT=0
    case $1 in
        --rewind)
            REWIND=1
            ;;
        --port)
            PORT="$2"
            OPTSHIFT=1
            ;;
        --variants)
            VARIANTS="${VARIANTS}$2"
            OPTSHIFT=1
            ;;
        --configure.optflags)
            if [ "${OPTFLAGS}" != "" ] ;then
                OPTFLAGS="${OPTFLAGS} ${2}"
            else
                OPTFLAGS="${2}"
            fi
            OPTSHIFT=1
            ;;
        -*)
            PORTOPTIONS="${PORTOPTIONS} $1"
            ;;
        configure.*)
            PORTOTHEROPTIONS="${PORTOTHEROPTIONS} $1"
            ;;
        *)
            PORTOTHEROPTIONS="${PORTOTHEROPTIONS} \"$1\""
            ;;
    esac
}

while [ $# != 0 ] ;do
    if [ ${NOMORECMAKEOPTIONS} = 0 ] ;then
        case $1 in
            -E)
                if [ "${2}" != "server" -a -z "${PWD##*kf5*}" ] ;then
                     # invoked in the build.dir of a kf5 port
                     exec @PREFIX@/bin/cmake-kf5-mp "$@"
                else
                     exec @PREFIX@/bin/cmake "$@"
                fi
                ;;
            --dryrun)
                ECHO="echo"
                ;;
            -D|-C|-U|-G|-T|-P|--system-information)
                # cmake options taking an argument
                shift
                ;;
            -Wno-dev|-Wdev|-L*|-N|--find-package|--graphviz*|--help*)
                ;;
            -D*|-G*)
                # cmake option setting a variable (e.g. -DCMAKE_BUILD_TYPE=foo)
                # or a fused generator argument
                ;;
            --build)
                if [ -d "${2}" ] ;then
                    DOBUILD=1
                    BUILDDIR="$2"
                    shift
                else
                    echo "Ignoring --build option; ${2} is not a directory seen from `pwd`" 1>&2
                fi
                ;;
            --target)
                if [ ${DOBUILD} = 1 ] ;then
                    BUILDTARGET="${2}"
                    shift
                else
                    echo "Ignoring --target without preceding --build option" 1>&2
                fi
                ;;
            --)
                NOMORECMAKEOPTIONS=1
                ;;
            *)
                if [ ! -d "${1}" ] ;then
                    parse_portOptions "$@"
                    shift ${OPTSHIFT}
                else
                    echo "Skipping \"${1}\"; probably pointing cmake to the source or build directory" 1>&2
                fi
                ;;
        esac
    else
        parse_portOptions "$@"
        shift ${OPTSHIFT}
    fi
    shift
done

if [ "${PORT}" != "" ] ;then
    if [ ${REWIND} = 1 ] ;then
        ${ECHO} port-redo-install-phase -configure ${PORT}
    fi
    set -x
    if [ "${OPTFLAGS}" != "" ] ;then
        ${ECHO} port ${PORTOPTIONS} configure ${PORT} ${VARIANTS} ${PORTOTHEROPTIONS} configure.optflags="${OPTFLAGS}"
    else
        ${ECHO} port ${PORTOPTIONS} configure ${PORT} ${VARIANTS} ${PORTOTHEROPTIONS}
    fi
    RET=$?
    if [ ${RET} = 0 ] ;then
        WDIR="`port work ${PORT}`"
        if [ -d ${WDIR}/build ] ;then
            touch ${WDIR}/build/compile_commands.json
        fi
        if [ ${DOBUILD} = 1 ] ;then
            # attempt to set the appropriate environment to mimick `port build`
            CPATH=@PREFIX@include ; export CPATH
            INSTALL="/usr/bin/install -c" ; export INSTALL
            LIBRARY_PATH=@PREFIX@lib ; export LIBRARY_PATH
            MOC=@PREFIX@bin/moc ; export MOC
            PATH=@PREFIX@bin:@PREFIX@sbin:${PATH} ; export PATH
            ${ECHO} make -C "${BUILDDIR}" -w ${BUILDTARGET}
            RET=$?
        fi
    fi
    exit ${RET}
else
    print_usage
fi
