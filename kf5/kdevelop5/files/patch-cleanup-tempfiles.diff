diff --git languages/clang/duchain/parsesession.cpp languages/clang/duchain/parsesession.cpp
index 80874d90a5c538d744a21fe6e27c0aad57af2b5c..375b75e9660653f0eaeedd88118f67846d47df27 100644
--- languages/clang/duchain/parsesession.cpp
+++ languages/clang/duchain/parsesession.cpp
@@ -44,6 +44,9 @@
 #include <QMimeType>
 
 #include <algorithm>
+#ifdef Q_OS_UNIX
+#include <unistd.h>
+#endif
 
 using namespace KDevelop;
 
@@ -300,10 +304,16 @@ ParseSessionData::ParseSessionData(const QVector<UnsavedFile>& unsavedFiles, Cla
     } else {
         qWarning() << "Failed to parse translation unit:" << tuUrl;
     }
+#ifdef Q_OS_UNIX
+    // it should be safe now to unlink the file behind Qt's back so that
+    // it is guaranteed to be deleted when KDevelop exists, cleanly or not.
+    unlink(m_definesFile.fileName().toUtf8().constData());
+#endif
 }
 
 ParseSessionData::~ParseSessionData()
 {
+    // qWarning() << Q_FUNC_INFO << "tr.unit" << m_unit << "m_definesFile=" << m_definesFile.fileName() << "m_file=" << clang_getCString(clang_getFileName(m_file));
     clang_disposeTranslationUnit(m_unit);
 }
 
@@ -318,6 +328,7 @@ QByteArray ParseSessionData::writeDefinesFile(const QMap<QString, QString>& defi
     for (auto it = defines.begin(); it != defines.end(); ++it) {
         definesStream << QStringLiteral("#define ") << it.key() << ' ' << it.value() << '\n';
     }
+    m_definesFile.close();
 
     return m_definesFile.fileName().toUtf8();
 }
diff --git languages/clang/clangparsejob.cpp languages/clang/clangparsejob.cpp
index edd0efc8af749c43e2f1d50bd2e9ede5e61bf9b2..889e04731c8a53ea855a5af66f4bd7625a6dc4b5 100644
--- languages/clang/clangparsejob.cpp
+++ languages/clang/clangparsejob.cpp
@@ -366,8 +366,9 @@ void ClangParseJob::run(ThreadWeaver::JobPointer /*self*/, ThreadWeaver::Thread*
                 // otherwise no editor component is open for this document and we can dispose
                 // the TU to save memory
                 // share the session data with all contexts that are pinned to this TU
-                DUChainWriteLocker lock;
-                context->setAst(IAstContainer::Ptr(session.data()));
+//                 DUChainWriteLocker lock;
+//                 context->setAst(IAstContainer::Ptr(session.data()));
+                // qWarning() << Q_FUNC_INFO << "Not caching session for" << context->url();
             }
             languageSupport()->codeHighlighting()->highlightDUChain(context);
         }
