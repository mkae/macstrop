diff --git language/duchain/topducontextdynamicdata.cpp language/duchain/topducontextdynamicdata.cpp
index c56fac0..ec7cd23 100644
--- language/duchain/topducontextdynamicdata.cpp
+++ language/duchain/topducontextdynamicdata.cpp
@@ -407,7 +407,7 @@ Item TopDUContextDynamicData::DUChainItemStorage<Item>::getItemForIndex(uint ind
                                     "Potentially, the context has been deleted without deleting its children.");
     item->rebuildDynamicData(parent, index);
   } else {
-    qCWarning(LANGUAGE) << "invalid item for index" << index << offsets.size() << offsets.value(realIndex).dataOffset;
+    qCDebug(LANGUAGE) << "invalid item for index" << index << offsets.size() << offsets.value(realIndex).dataOffset;
   }
 
   return item;
diff --git sublime/idealcontroller.cpp sublime/idealcontroller.cpp
index 03715233b..b3ef57ff6 100644
--- sublime/idealcontroller.cpp
+++ sublime/idealcontroller.cpp
@@ -24,6 +24,7 @@
 
 #include <QMainWindow>
 #include <QToolBar>
+#include <QDebug>
 
 #include <KAcceleratorManager>
 #include <KActionMenu>
@@ -141,7 +142,14 @@ void IdealController::dockLocationChanged(Qt::DockWidgetArea area)
 {
     IdealDockWidget *dock = qobject_cast<IdealDockWidget*>(sender());
     View *view = dock->view();
-    QAction* action = m_view_to_action.value(view);
+    QAction* action = nullptr;
+    if (m_view_to_action.contains(view)) {
+        action = m_view_to_action.value(view);
+    }
+    if (!action) {
+        qCritical() << Q_FUNC_INFO << "View" << view << "has no known hide/shown action";
+        return;
+    }
 
     if (dock->dockWidgetArea() == area) {
         // this event can happen even when dock changes its location within the same area
@@ -231,8 +239,15 @@ void IdealController::raiseView(View* view, RaiseMode mode)
     ///       for toolviews of the same type.
     mode = HideOtherViews;
 
-    QAction* action = m_view_to_action.value(view);
+    QAction* action = nullptr;
+    if (m_view_to_action.contains(view)) {
+        action = m_view_to_action.value(view);
+    }
     Q_ASSERT(action);
+    if (!action) {
+        qCritical() << Q_FUNC_INFO << "View" << view << "has no known hide/shown action";
+        return;
+    }
 
     QWidget *focusWidget = m_mainWindow->focusWidget();
 
@@ -288,7 +303,7 @@ QWidget* IdealController::statusBarLocation() const
 
 QAction* IdealController::actionForView(View* view) const
 {
-    return m_view_to_action.value(view);
+    return m_view_to_action.contains(view) ? m_view_to_action.value(view) : nullptr;
 }
 
 void IdealController::setShowDockStatus(Qt::DockWidgetArea area, bool checked)
@@ -317,8 +332,14 @@ QAction* IdealController::actionForArea(Qt::DockWidgetArea area) const
 
 void IdealController::removeView(View* view, bool nondestructive)
 {
-    Q_ASSERT(m_view_to_action.contains(view));
-    QAction* action = m_view_to_action.value(view);
+    QAction* action = nullptr;
+    if (m_view_to_action.contains(view)) {
+        action = m_view_to_action.value(view);
+    }
+    if (!action) {
+        qCritical() << Q_FUNC_INFO << "View" << view << "has no known hide/shown action";
+        return;
+    }
 
     QWidget *viewParent = view->widget()->parentWidget();
     IdealDockWidget *dock = qobject_cast<IdealDockWidget *>(viewParent);
diff --git plugins/patchreview/patchhighlighter.cpp plugins/patchreview/patchhighlighter.cpp
index 00cae2a..d26fad2 100644
--- plugins/patchreview/patchhighlighter.cpp
+++ plugins/patchreview/patchhighlighter.cpp
@@ -42,6 +42,7 @@
 #include <QTextDocument>
 #include <QVBoxLayout>
 #include <QWidget>
+#include <QDebug>
 
 using namespace KDevelop;
 
@@ -238,7 +239,9 @@ void PatchHighlighter::markClicked( KTextEditor::Document* doc, const KTextEdito
 
 KTextEditor::MovingRange* PatchHighlighter::rangeForMark( const KTextEditor::Mark& mark ) {
     for( QMap<KTextEditor::MovingRange*, Diff2::Difference*>::const_iterator it = m_differencesForRanges.constBegin(); it != m_differencesForRanges.constEnd(); ++it ) {
-        if( it.key()->start().line() == mark.line )
+        if (!it.key()) {
+            qCritical() << Q_FUNC_INFO << *it << "has a NULL key";
+        } else if( it.key()->start().line() == mark.line )
         {
             return it.key();
         }
