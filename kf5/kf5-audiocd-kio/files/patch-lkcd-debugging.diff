diff --git a/CMakeLists.txt b/CMakeLists.txt
index d156815e112289911a286f9a4f5228f5a9d93f3a..9cc044f9730bf095a8f1c296c5142dd8e14c410f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,6 +22,7 @@ include(ECMSetupVersion)
 include(ECMGeneratePriFile)
 include(GenerateExportHeader)
 include(ECMPackageConfigHelpers)
+include(ECMQtDeclareLoggingCategory)
 
 # Version Setup
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 42cbbe46fd0c6521ca7b7031f64b4242edc0d021..17d5eb41a998df05fe7a7ca532ba90cad4f3baca 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -61,6 +61,8 @@ set(KCD_LIB_SRCS
     kcompactdisc_p.cpp
     phonon_interface.cpp
 )
+ecm_qt_declare_logging_category(KCD_LIB_SRCS HEADER kcd_logging.h IDENTIFIER KCD CATEGORY_NAME org.kde.libkcompactdisc)
+ecm_qt_declare_logging_category(KCD_LIB_SRCS HEADER kcd_playlist_logging.h IDENTIFIER KCD_PLAYLIST CATEGORY_NAME org.kde.libkcompactdisc.playlist)
 
 if (USE_WMLIB)
     set(KCD_LIB_SRCS ${KCD_LIB_SRCS} wmlib_interface.cpp ${wmlib_SRCS} ${wmlib_audio_SRCS})
diff --git a/src/kcompactdisc.cpp b/src/kcompactdisc.cpp
index 2e297d159b503ab3c1564df3a0a6f006a5ed9590..b7b06eed317db098433977f55f04e24a94e6a140 100644
--- a/src/kcompactdisc.cpp
+++ b/src/kcompactdisc.cpp
@@ -45,7 +45,7 @@ static void refreshListOfCdromDevices()
 
     //get a list of all devices that are Cdrom
     foreach(const Solid::Device &device, Solid::Device::listFromType(Solid::DeviceInterface::OpticalDrive)) {
-        qDebug() << device.udi().toLatin1().constData();
+        qCDebug(KCD) << device.udi().toLatin1().constData();
         const Solid::Block *b = device.as<Solid::Block>();
         
         if(!b) {
@@ -105,17 +105,17 @@ static QMap<QString, QString> &getListOfCdromDevicesNamesAndUdi()
 QString KCompactDisc::urlToDevice(const QUrl &deviceUrl)
 {
     if(deviceUrl.scheme() == QLatin1String( "media" ) || deviceUrl.scheme() == QLatin1String( "system" )) {
-        qDebug() << "Asking mediamanager for " << deviceUrl.fileName();
+        qCDebug(KCD) << "Asking mediamanager for " << deviceUrl.fileName();
 
         QDBusInterface mediamanager( QLatin1String( "org.kde.kded" ), QLatin1String( "/modules/mediamanager" ), QLatin1String( "org.kde.MediaManager" ) );
         QDBusReply<QStringList> reply = mediamanager.call(QLatin1String( "properties" ), deviceUrl.fileName());
 
         QStringList properties = reply;
         if(!reply.isValid() || properties.count() < 6) {
-            qCritical() << "Invalid reply from mediamanager" << endl;
+            qCCritical(KCD) << "Invalid reply from mediamanager" << endl;
             return deviceUrl.path();
         } else {
-            qDebug() << "Reply from mediamanager " << properties[5];
+            qCDebug(KCD) << "Reply from mediamanager " << properties[5];
             return properties[5];
         }
     } else if(deviceUrl.scheme() == QLatin1String( "file" )) {
@@ -530,7 +530,7 @@ bool KCompactDisc::setDevice(const QString &deviceName, unsigned volume,
 {
 	const QString as = digitalPlayback ? audioSystem : QLatin1String("cdin");
 	const QString ad = digitalPlayback ? audioDevice : QString();
-    qDebug() << "Device init: " << deviceName << ", " << as << ", " << ad;
+    qCDebug(KCD) << "Device init: " << deviceName << ", " << as << ", " << ad;
 
 	if(d_ptr->moveInterface(deviceName, as, ad)) {
 		setVolume(volume);
@@ -544,14 +544,14 @@ bool KCompactDisc::setDevice(const QString &deviceName, unsigned volume,
 void KCompactDisc::setVolume(unsigned volume)
 {
 	Q_D(KCompactDisc);
-    qDebug() << "change volume: " << volume;
+    qCDebug(KCD) << "change volume: " << volume;
 	d->setVolume(volume);
 }
 
 void KCompactDisc::setBalance(unsigned balance)
 {
 	Q_D(KCompactDisc);
-    qDebug() << "change balance: " << balance;
+    qCDebug(KCD) << "change balance: " << balance;
 	d->setBalance(balance);
 }
 
diff --git a/src/kcompactdisc_p.cpp b/src/kcompactdisc_p.cpp
index 4bf2af8696a2064e6fcce1576fb42bf29e559599..0999c23f142c8f0104f1b5662938eb337e861d24 100644
--- a/src/kcompactdisc_p.cpp
+++ b/src/kcompactdisc_p.cpp
@@ -27,8 +27,6 @@
 
 #include <KLocalizedString>
 
-Q_LOGGING_CATEGORY(CD_PLAYLIST, "cd.playlist")
-
 KCompactDiscPrivate::KCompactDiscPrivate(KCompactDisc *p, const QString& dev) :
     m_infoMode(KCompactDisc::Synchronous),
     m_deviceName(dev),
@@ -69,8 +67,8 @@ bool KCompactDiscPrivate::moveInterface(const QString &deviceName,
 
 	KCompactDiscPrivate *pOld, *pNew;
 
-    qDebug() << "switch from " << q->d_ptr->m_interface << " on " << q->d_ptr->m_deviceName;
-    qDebug() << "         to " << audioSystem << " on " << deviceName;
+    qCDebug(KCD) << "switch from " << q->d_ptr->m_interface << " on " << q->d_ptr->m_deviceName;
+    qCDebug(KCD) << "         to " << audioSystem << " on " << deviceName;
 
 	/* switch temporary to dummy implementation */
 	if(q->d_ptr != this) {
@@ -114,7 +112,7 @@ void KCompactDiscPrivate::make_playlist()
 	unsigned selected = 0, size = m_tracks;
 	bool rejected = false;
 
-    qCDebug(CD_PLAYLIST) << "Playlist has " << size << " entries\n";
+    qCDebug(KCD_PLAYLIST) << "Playlist has " << size << " entries\n";
 	m_playlist.clear();
 	for(unsigned i = 0; i < size; i++) {
 		if(m_randomPlaylist) {
@@ -128,12 +126,12 @@ void KCompactDiscPrivate::make_playlist()
 		m_playlist.append(selected);
 	}
 
-    qCDebug(CD_PLAYLIST) << "dump playlist";
+    qCDebug(KCD_PLAYLIST) << "dump playlist";
 	QList<unsigned>::const_iterator it;
 	for(it = m_playlist.constBegin(); it != m_playlist.constEnd(); it++) {
-        qCDebug(CD_PLAYLIST) << " " << *it;
+        qCDebug(KCD_PLAYLIST) << " " << *it;
 	}
-    qCDebug(CD_PLAYLIST) << "dump playlist end";
+    qCDebug(KCD_PLAYLIST) << "dump playlist end";
 }
 
 unsigned KCompactDiscPrivate::getNextTrackInPlaylist()
diff --git a/src/kcompactdisc_p.h b/src/kcompactdisc_p.h
index db7eb196402ee292a043e2f7442838c88396b0ef..12a570ebe53d2541a23c73f1d1cac8371f0016df 100644
--- a/src/kcompactdisc_p.h
+++ b/src/kcompactdisc_p.h
@@ -29,7 +29,8 @@
 #include <krandomsequence.h>
 #include "kcompactdisc.h"
 
-Q_DECLARE_LOGGING_CATEGORY(CD_PLAYLIST)
+#include "kcd_logging.h"
+#include "kcd_playlist_logging.h"
 
 class KCompactDiscPrivate : public QObject
 {
diff --git a/src/phonon_interface.cpp b/src/phonon_interface.cpp
index 5fe9526f82972f222a7a3167bfb85c2c491eaafb..065e07ce07bdd73d1fd0e5166e02818cef3346a4 100644
--- a/src/phonon_interface.cpp
+++ b/src/phonon_interface.cpp
@@ -100,7 +100,7 @@ KPhononCompactDiscPrivate::~KPhononCompactDiscPrivate()
 
 bool KPhononCompactDiscPrivate::createInterface()
 {
-	qDebug() << "createInterface called";
+	qCDebug(KCD) << "createInterface called";
 	Solid::Device opticalDevice(m_udi);
 	Solid::OpticalDrive *opticalDrive = opticalDevice.as<Solid::OpticalDrive>();
 
@@ -126,11 +126,11 @@ ProducerWidget *KPhononCompactDiscPrivate::producer()
 	if(!m_producerWidget) {
 		Solid::Device opticalDevice(m_udi);
 		Solid::OpticalDrive *opticalDrive = opticalDevice.as<Solid::OpticalDrive>();
-		qDebug() << "producer called, opticalDrive is " << opticalDrive;
+		qCDebug(KCD) << "producer called, opticalDrive is " << opticalDrive;
 
 		if(opticalDrive) {
 			Solid::OpticalDisc *opticalDisc = opticalDevice.as<Solid::OpticalDisc>();
-            qDebug() << "opticalDisc " << opticalDisc;
+            qCDebug(KCD) << "opticalDisc " << opticalDisc;
 			//if(opticalDisc && (opticalDisc->availableContent() == Solid::OpticalDisc::Audio)) {
 				m_producerWidget = new ProducerWidget(this, m_udi);
 				stateChanged(m_producerWidget->m_media->state(), Phonon::StoppedState);
@@ -159,7 +159,7 @@ void KPhononCompactDiscPrivate::playTrackPosition(unsigned track, unsigned posit
     if(!producer())
 		return;
 
-    qDebug() << "play track " << track << " position " << position;
+    qCDebug(KCD) << "play track " << track << " position " << position;
 
     m_producerWidget->m_mediaController->setCurrentTitle(track);
     m_producerWidget->m_media->seek(SEC2MS(position));
@@ -240,8 +240,8 @@ void KPhononCompactDiscPrivate::queryMetadata()
 		return;
 
 	QMultiMap<QString, QString> data = m_producerWidget->m_media->metaData();
-    qDebug() << "METADATA";
-    //qDebug() << data;
+    qCDebug(KCD) << "METADATA";
+    //qCDebug(KCD) << data;
 
 	m_trackArtists[0] = data.take(QLatin1String( "ARTIST" ));
 	m_trackTitles[0] = data.take(QLatin1String( "ALBUM" ));
@@ -291,7 +291,7 @@ void KPhononCompactDiscPrivate::tick(qint64 t)
 	m_discPosition = m_trackPosition;
 	// Update the current playing position.
 	if(m_seek) {
-        qDebug() << "seek: " << m_seek << " trackPosition " << m_trackPosition;
+        qCDebug(KCD) << "seek: " << m_seek << " trackPosition " << m_trackPosition;
 		if(abs((long)(m_trackExpectedPosition - m_trackPosition)) > m_seek)
 			m_seek = 0;
 		else
@@ -305,7 +305,7 @@ void KPhononCompactDiscPrivate::tick(qint64 t)
 
 void KPhononCompactDiscPrivate::stateChanged(Phonon::State newstate, Phonon::State)
 {
-    qDebug() << "stateChanged with state " << newstate;
+    qCDebug(KCD) << "stateChanged with state " << newstate;
     KCompactDisc::DiscStatus status;
 	Q_Q(KCompactDisc);
 
@@ -325,9 +325,9 @@ void KPhononCompactDiscPrivate::stateChanged(Phonon::State newstate, Phonon::Sta
 		default:
             if(m_tracks == 0) {
 				m_tracks = m_producerWidget->m_mediaController->availableTitles();
-				qDebug() << "Got " << m_tracks << " tracks from media controller";
+				qCDebug(KCD) << "Got " << m_tracks << " tracks from media controller";
 				if(m_tracks > 0) {
-                    qDebug() << "New disc with " << m_tracks << " tracks";
+                    qCDebug(KCD) << "New disc with " << m_tracks << " tracks";
 
 					make_playlist();
 
diff --git a/src/wmlib_interface.cpp b/src/wmlib_interface.cpp
index 60a3ae8bdf66058152e3c3c18a4facec2767815a..82572537f3560188b37dfc71ea8d84de61c127d9 100644
--- a/src/wmlib_interface.cpp
+++ b/src/wmlib_interface.cpp
@@ -106,7 +106,7 @@ void KWMLibCompactDiscPrivate::playTrackPosition(unsigned track, unsigned positi
 	lastTrack = firstTrack + 1;
 	lastTrack = TRACK_VALID(lastTrack) ? lastTrack : WM_ENDTRACK;
 
-    qDebug() << "play track " << firstTrack << " position "
+    qCDebug(KCD) << "play track " << firstTrack << " position "
 		 << position << endl;
 
     wm_cd_play(m_handle, firstTrack, position, lastTrack);
@@ -221,7 +221,7 @@ void KWMLibCompactDiscPrivate::timerExpired()
 			if(m_tracks == 0) {
 				m_tracks = wm_cd_getcountoftracks(m_handle);
 				if(m_tracks > 0) {
-                    qDebug() << "New disc with " << m_tracks << " tracks";
+                    qCDebug(KCD) << "New disc with " << m_tracks << " tracks";
 					m_discId = wm_cddb_discid(m_handle);
 
 					for(i = 1; i <= m_tracks; i++) {
@@ -241,10 +241,10 @@ void KWMLibCompactDiscPrivate::timerExpired()
 						m_trackTitles.append(ki18n("Track %1").subs(i, 2).toString());
 					}
 
-qDebug() << "m_tracks " << m_tracks;
-qDebug() << "m_trackStartFrames " << m_trackStartFrames;
-qDebug() << "m_trackArtists " << m_trackArtists;
-qDebug() << "m_trackTitles " << m_trackTitles;
+qCDebug(KCD) << "m_tracks " << m_tracks;
+qCDebug(KCD) << "m_trackStartFrames " << m_trackStartFrames;
+qCDebug(KCD) << "m_trackArtists " << m_trackArtists;
+qCDebug(KCD) << "m_trackTitles " << m_trackTitles;
 
 					emit q->discChanged(m_tracks);
 
@@ -262,7 +262,7 @@ qDebug() << "m_trackTitles " << m_trackTitles;
 		m_discPosition = wm_get_cur_pos_abs(m_handle) - FRAMES2SEC(m_trackStartFrames[0]);
 		// Update the current playing position.
 		if(m_seek) {
-            qDebug() << "seek: " << m_seek << " trackPosition " << m_trackPosition;
+            qCDebug(KCD) << "seek: " << m_seek << " trackPosition " << m_trackPosition;
 			if(abs((long)(m_trackExpectedPosition - m_trackPosition)) > m_seek)
 				m_seek = 0;
 			else
@@ -306,7 +306,7 @@ void KWMLibCompactDiscPrivate::cdtext()
 	info = wm_cd_get_cdtext(m_handle);
 
 	if(!info || !info->valid || (unsigned)info->count_of_entries != (m_tracks + 1)) {
-        qDebug() << "no or invalid CDTEXT";
+        qCDebug(KCD) << "no or invalid CDTEXT";
 		return;
 	}
 
@@ -318,9 +318,9 @@ void KWMLibCompactDiscPrivate::cdtext()
             m_trackTitles[i] =QLatin1String( reinterpret_cast<char*>(info->blocks[0]->name[i]) );
 	}
 
-    qDebug() << "CDTEXT";
-    qDebug() << "m_trackArtists " << m_trackArtists;
-    qDebug() << "m_trackTitles " << m_trackTitles;
+    qCDebug(KCD) << "CDTEXT";
+    qCDebug(KCD) << "m_trackArtists " << m_trackArtists;
+    qCDebug(KCD) << "m_trackTitles " << m_trackTitles;
 
 	emit q->discInformation(KCompactDisc::Cdtext);
 }
diff --git a/tests/testkcd.cpp b/tests/testkcd.cpp
index e34266e2d7519b01b15886676e507c81b72b0720..6328464794106490571c05637863d3474b248e33 100644
--- a/tests/testkcd.cpp
+++ b/tests/testkcd.cpp
@@ -3,6 +3,7 @@
 #include <QMetaObject>
 #include <QCoreApplication>
 #include <QtGlobal>
+#include <QByteArray>
 
 #include <kcompactdisc.h>
 
@@ -26,28 +27,28 @@ class TestKCD : public QObject
 
     void doTest()
     {
-        qDebug() << "Starting test";
+        qInfo() << "Starting test";
         mKcd->setDevice(mKcd->defaultCdromDeviceName(), 50, true, "phonon");
-        qDebug() << "";
+        qInfo() << "";
 
-        qDebug() << "We have" << mKcd->audioSystems().size() << "audo systems available:";
+        qInfo() << "We have" << mKcd->audioSystems().size() << "audo systems available:";
         for (auto system: mKcd->audioSystems()) {
-            qDebug() << system;
+            qInfo() << system;
         }
-        qDebug() << "";
+        qInfo() << "";
 
-        qDebug() << "We have" << mKcd->cdromDeviceNames().size() << "cdrom drives available:";
+        qInfo() << "We have" << mKcd->cdromDeviceNames().size() << "cdrom drives available:";
         for (auto cdrom: mKcd->cdromDeviceNames()) {
-            qDebug() << cdrom;
+            qInfo() << cdrom;
         }
-        qDebug() << "";
+        qInfo() << "";
 
-        qDebug() << "The current cdrom drive loaded is:" << mKcd->deviceName();
-        qDebug() << "The disc device node url is:" << mKcd->deviceUrl();
-        qDebug() << "The disc status is" << mKcd->discStatus();
-        qDebug() << "Does the drive have a disc in it:" << !mKcd->isNoDisc();
-        qDebug() << "The number of tracks in the disc:" << mKcd->tracks();
-        qDebug() << "The current track no:" << mKcd->trackPosition();
+        qInfo() << "The current cdrom drive loaded is:" << mKcd->deviceName();
+        qInfo() << "The disc device node url is:" << mKcd->deviceUrl();
+        qInfo() << "The disc status is" << mKcd->discStatus();
+        qInfo() << "Does the drive have a disc in it:" << !mKcd->isNoDisc();
+        qInfo() << "The number of tracks in the disc:" << mKcd->tracks();
+        qInfo() << "The current track no:" << mKcd->trackPosition();
 
         qApp->exit();
     }
@@ -59,9 +60,12 @@ class TestKCD : public QObject
 
 int main(int argc, char **argv)
 {
+    if (!qEnvironmentVariableIsSet("QT_LOGGING_RULES")) {
+        qputenv("QT_LOGGING_RULES", QByteArrayLiteral("org.kde.libkcompactdisc=true"));
+    }
     QCoreApplication app(argc, argv);
 
-    qDebug() << "Testing libKF5CompactDisc";
+    qInfo() << "Testing libKF5CompactDisc";
     TestKCD test;
     QMetaObject::invokeMethod(&test, "doTest", Qt::QueuedConnection);
 
