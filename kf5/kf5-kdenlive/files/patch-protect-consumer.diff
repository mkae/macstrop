--- src/monitor/orig.glwidget.cpp	2017-06-05 21:05:55.000000000 +0200
+++ src/monitor/glwidget.cpp	2017-06-19 17:43:31.810681058 +0200
@@ -695,7 +695,7 @@
 
 void GLWidget::stopGlsl()
 {
-    if (m_consumer) {
+    if (m_consumer && m_consumer->get_consumer()) {
         m_consumer->purge();
     }
     if (m_frameRenderer) {
@@ -750,14 +750,14 @@
         // This is an audio only clip, attach visualization filter. Currently, the filter crashes MLT when Movit accel is used
         if (!m_audioWaveDisplayed) {
             createAudioOverlay(true);
-        } else if (m_consumer) {
+        } else if (m_consumer && m_consumer->get_consumer()) {
             if (KdenliveSettings::gpu_accel()) {
                 removeAudioOverlay();
             } else {
                 adjustAudioOverlay(true);
             }
         }
-    } else if (m_audioWaveDisplayed && m_consumer) {
+    } else if (m_audioWaveDisplayed && m_consumer && m_consumer->get_consumer()) {
         // This is not an audio clip, hide wave
         if (KdenliveSettings::displayAudioOverlay()) {
             adjustAudioOverlay(m_producer->get_int("video_index") == -1);
@@ -772,19 +772,19 @@
 
 int GLWidget::droppedFrames() const
 {
-    return (m_consumer ? m_consumer->get_int("drop_count") : 0);
+    return ((m_consumer && m_consumer->get_consumer()) ? m_consumer->get_int("drop_count") : 0);
 }
 
 void GLWidget::resetDrops()
 {
-    if (m_consumer) {
+    if (m_consumer && m_consumer->get_consumer()) {
         m_consumer->set("drop_count", 0);
     }
 }
 
 void GLWidget::createAudioOverlay(bool isAudio)
 {
-    if (!m_consumer) {
+    if (!m_consumer || !m_consumer->get_consumer()) {
         return;
     }
     if (isAudio && KdenliveSettings::gpu_accel()) {
@@ -810,6 +810,9 @@
 
 void GLWidget::removeAudioOverlay()
 {
+    if (!m_consumer || !m_consumer->get_consumer()) {
+        return;
+    }
     Mlt::Service sourceService(m_consumer->get_service());
     // move all effects to the correct producer
     int ct = 0;
@@ -830,6 +833,9 @@
 
 void GLWidget::adjustAudioOverlay(bool isAudio)
 {
+    if (!m_consumer || !m_consumer->get_consumer()) {
+        return;
+    }
     Mlt::Service sourceService(m_consumer->get_service());
     // move all effects to the correct producer
     int ct = 0;
@@ -862,8 +868,8 @@
 int GLWidget::reconfigureMulti(const QString &params, const QString &path, Mlt::Profile *profile)
 {
     QString serviceName = property("mlt_service").toString();
-    if (!m_consumer || !m_consumer->is_valid() || strcmp(m_consumer->get("mlt_service"), "multi") != 0) {
-        if (m_consumer) {
+    if (!m_consumer || !m_consumer->get_consumer() || !m_consumer->is_valid() || strcmp(m_consumer->get("mlt_service"), "multi") != 0) {
+        if (m_consumer && m_consumer->get_consumer()) {
             m_consumer->purge();
             m_consumer->stop();
             delete m_consumer;
@@ -953,8 +959,8 @@
     if (profile) {
         reloadProfile(*profile);
     }
-    if (!m_consumer || !m_consumer->is_valid() || strcmp(m_consumer->get("mlt_service"), "multi") == 0) {
-        if (m_consumer) {
+    if (!m_consumer || !m_consumer->get_consumer() || !m_consumer->is_valid() || strcmp(m_consumer->get("mlt_service"), "multi") == 0) {
+        if (m_consumer && m_consumer->get_consumer()) {
             m_consumer->purge();
             m_consumer->stop();
             delete m_consumer;
@@ -1068,7 +1074,7 @@
 
 void GLWidget::resetProfile(const MltVideoProfile &profile)
 {
-    if (m_consumer && !m_consumer->is_stopped()) {
+    if (m_consumer && m_consumer->get_consumer() && !m_consumer->is_stopped()) {
         m_consumer->stop();
         m_consumer->purge();
     }
--- src/orig.renderer.cpp	2017-06-05 21:05:55.000000000 +0200
+++ src/renderer.cpp	2017-06-19 18:10:35.359025704 +0200
@@ -114,7 +114,7 @@
 
 void Render::slotSwitchFullscreen()
 {
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         m_mltConsumer->set("full_screen", 1);
     }
 }
@@ -323,7 +323,7 @@
         delete m_mltProducer;
         m_mltProducer = nullptr;
     }
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         if (!m_mltConsumer->is_stopped()) {
             m_mltConsumer->stop();
         }
@@ -364,7 +364,7 @@
         delete m_mltProducer;
         m_mltProducer = nullptr;
     }
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         if (!m_mltConsumer->is_stopped()) {
             isActive = true;
             m_mltConsumer->stop();
@@ -448,7 +448,7 @@
     playlist = doc.toString();
 
     if (m_mltConsumer) {
-        if (!m_mltConsumer->is_stopped()) {
+        if (m_mltConsumer->get_consumer() && !m_mltConsumer->is_stopped()) {
             m_mltConsumer->stop();
         }
     } else {
@@ -631,7 +631,7 @@
 
 int Render::volume() const
 {
-    if (!m_mltConsumer || !m_mltProducer) {
+    if (!m_mltConsumer || !m_mltConsumer->get_consumer() || !m_mltProducer) {
         return -1;
     }
     if (m_mltConsumer->get("mlt_service") == QStringLiteral("multi")) {
@@ -648,7 +648,7 @@
         //qCDebug(KDENLIVE_LOG) << "-----  BROKEN MONITOR: " << m_name << ", RESTART";
         return;
     }*/
-    if (!m_mltConsumer) {
+    if (!m_mltConsumer || !m_mltConsumer->get_consumer()) {
         //qCDebug(KDENLIVE_LOG)<<" / - - - STARTED BEFORE CONSUMER!!!";
         return;
     }
@@ -676,7 +676,7 @@
         }
         m_mltProducer->set_speed(0.0);
     }
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         m_mltConsumer->purge();
         if (!m_mltConsumer->is_stopped()) {
             m_mltConsumer->stop();
@@ -698,7 +698,7 @@
         m_mltProducer->set_speed(0.0);
         m_mltProducer->seek((int) startTime.frames(m_fps));
     }
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         m_mltConsumer->purge();
     }
     m_isRefreshing = false;
@@ -725,7 +725,7 @@
 {
     QMutexLocker locker(&m_mutex);
     requestedSeekPosition = SEEK_INACTIVE;
-    if (!m_mltProducer || !m_mltConsumer || !m_isActive) {
+    if (!m_mltProducer || !m_mltConsumer || !m_mltConsumer->get_consumer() || !m_isActive) {
         return;
     }
     if (m_isZoneMode) {
@@ -796,7 +796,7 @@
 void Render::play(const GenTime &startTime)
 {
     requestedSeekPosition = SEEK_INACTIVE;
-    if (!m_mltProducer || !m_mltConsumer || !m_isActive) {
+    if (!m_mltProducer || !m_mltConsumer || !m_mltConsumer->get_consumer() || !m_isActive) {
         return;
     }
     m_mltProducer->seek((int)(startTime.frames(m_fps)));
@@ -808,7 +808,7 @@
 void Render::loopZone(const GenTime &startTime, const GenTime &stopTime)
 {
     requestedSeekPosition = SEEK_INACTIVE;
-    if (!m_mltProducer || !m_mltConsumer || !m_isActive) {
+    if (!m_mltProducer || !m_mltConsumer || !m_mltConsumer->get_consumer() || !m_isActive) {
         return;
     }
     //m_mltProducer->set("eof", "loop");
@@ -820,7 +820,7 @@
 bool Render::playZone(const GenTime &startTime, const GenTime &stopTime)
 {
     requestedSeekPosition = SEEK_INACTIVE;
-    if (!m_mltProducer || !m_mltConsumer || !m_isActive) {
+    if (!m_mltProducer || !m_mltConsumer || !m_mltConsumer->get_consumer() || !m_isActive) {
         return false;
     }
     m_mltProducer->seek((int)(startTime.frames(m_fps)));
@@ -890,7 +890,7 @@
         return;
     }
     QMutexLocker locker(&m_mutex);
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         m_isRefreshing = true;
         if (m_mltConsumer->is_stopped()) {
             m_mltConsumer->start();
@@ -903,7 +903,7 @@
 void Render::setDropFrames(bool drop)
 {
     QMutexLocker locker(&m_mutex);
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         int dropFrames = m_qmlView->realTime();
         if (drop == false) {
             dropFrames = -dropFrames;
@@ -920,7 +920,7 @@
 void Render::setConsumerProperty(const QString &name, const QString &value)
 {
     QMutexLocker locker(&m_mutex);
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         //m_mltConsumer->stop();
         m_mltConsumer->set(name.toUtf8().constData(), value.toUtf8().constData());
         if (m_isActive && m_mltConsumer->start() == -1) {
@@ -932,7 +932,7 @@
 
 bool Render::isPlaying() const
 {
-    if (!m_mltConsumer || m_mltConsumer->is_stopped()) {
+    if (!m_mltConsumer || !m_mltConsumer->get_consumer() || m_mltConsumer->is_stopped()) {
         return false;
     }
     return playSpeed() != 0;
@@ -948,7 +948,7 @@
 
 GenTime Render::seekPosition() const
 {
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         return GenTime((int) m_mltConsumer->position(), m_fps);
     } else {
         return GenTime();
@@ -960,7 +960,7 @@
     if (m_mltProducer && m_mltProducer->get_speed() == 0) {
         return (int) m_mltProducer->position();
     }
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         return (int) m_mltConsumer->position();
     }
     return 0;
@@ -1107,7 +1107,7 @@
             }
             blackTrackPlaylist.resize_clip(0, 0, duration);
         }
-        if (m_mltConsumer->position() > duration) {
+        if (m_mltConsumer->get_consumer() && m_mltConsumer->position() > duration) {
             m_mltConsumer->purge();
             m_mltProducer->seek(duration);
         }
@@ -1162,7 +1162,7 @@
         return nullptr;
     }
     QMutexLocker locker(&m_mutex);
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         m_mltConsumer->purge();
     }
     Mlt::Service service(m_mltProducer->parent().get_service());
@@ -1658,7 +1658,7 @@
 
 void Render::setVolume(double volume)
 {
-    if (m_mltConsumer) {
+    if (m_mltConsumer && m_mltConsumer->get_consumer()) {
         if (m_mltConsumer->get("mlt_service") == QStringLiteral("multi")) {
             m_mltConsumer->set("0.volume", volume);
         } else {
