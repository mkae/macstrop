diff --git plugins/cmake/cmakecommitchangesjob.cpp plugins/cmake/cmakecommitchangesjob.cpp
index 3218a96a59caa514937116c258429cb02577f145..b9b151a3c95a8d7ecc3fb47503f7a52fa660db79 100644
--- plugins/cmake/cmakecommitchangesjob.cpp
+++ plugins/cmake/cmakecommitchangesjob.cpp
@@ -162,7 +162,7 @@ Path::List CMakeCommitChangesJob::addProjectData(const CMakeProjectData& data)
     QString dir = m_path.toLocalFile();
     if(data.vm.value("CMAKE_INCLUDE_CURRENT_DIR")==QStringList("ON")) {
         m_directories += dir;
-        m_directories += CMakeParserUtils::binaryPath(dir, m_project->path().toLocalFile(), CMake::currentBuildDir(m_project).toLocalFile(QUrl::RemoveTrailingSlash));
+        m_directories += CMakeParserUtils::binaryPath(dir, m_project->path().toLocalFile(), CMake::currentCanonicalBuildDir(m_project).toLocalFile(QUrl::RemoveTrailingSlash));
     }
     m_directories += resolvePaths(m_path, data.properties[DirectoryProperty][dir]["INCLUDE_DIRECTORIES"]);
     m_directories.removeAll(QString());
diff --git plugins/cmake/cmakeimportjsonjob.cpp plugins/cmake/cmakeimportjsonjob.cpp
index 004ae18fe0e9cb58a7e9774ebf8bbeef78e12d2f..375b8d4296b1345c0477e5bb2edcea9b07a05639 100644
--- plugins/cmake/cmakeimportjsonjob.cpp
+++ plugins/cmake/cmakeimportjsonjob.cpp
@@ -94,8 +94,11 @@ CMakeFilesCompilationData importCommands(const Path& commandsFile)
         ret.includes = kTransform<Path::List>(result.paths, convert);
         ret.frameworkDirectories = kTransform<Path::List>(result.frameworkDirectories, convert);
         ret.defines = result.defines;
-        const Path path(rt->pathInHost(Path(entry[KEY_FILE].toString())));
-        qCDebug(CMAKE) << "entering..." << path << entry[KEY_FILE];
+        const auto entryFile = entry[KEY_FILE].toString();
+        const auto entryInfo = QFileInfo(entryFile);
+        const auto entryPath = Path(entryInfo.exists() ? entryInfo.canonicalFilePath() : entryFile);
+        const Path path(rt->pathInHost(entryPath));
+        qCDebug(CMAKE) << "entering..." << path << entryFile;
         data.files[path] = ret;
     }
 
@@ -142,7 +145,7 @@ void CMakeImportJsonJob::start()
         return;
     }
 
-    const Path currentBuildDir = CMake::currentBuildDir(m_project);
+    const Path currentBuildDir = CMake::currentCanonicalBuildDir(m_project);
     Q_ASSERT (!currentBuildDir.isEmpty());
 
     const Path targetsFilePath = CMake::targetDirectoriesFile(m_project);
diff --git plugins/cmake/cmakemanager.cpp plugins/cmake/cmakemanager.cpp
index 5c6a11fb7a9b8ca8af3699464f382fde4e91151f..c19a92cf969750ac236dd97c4c2b4e1da4a82f3b 100644
--- plugins/cmake/cmakemanager.cpp
+++ plugins/cmake/cmakemanager.cpp
@@ -128,7 +128,7 @@ Path CMakeManager::buildDirectory(KDevelop::ProjectBaseItem *item) const
 //     if(fi)
 //         ret.addPath(fi->buildDir());
 //     return ret;
-    return Path(CMake::currentBuildDir(item->project()));
+    return Path(CMake::currentCanonicalBuildDir(item->project()));
 }
 
 KDevelop::ProjectFolderItem* CMakeManager::import( KDevelop::IProject *project )
diff --git plugins/cmake/cmakemodelitems.cpp plugins/cmake/cmakemodelitems.cpp
index 1d98bcebc0922f33f70de6a14340d6df5fc4420d..ff6466918e777842273078673e40bec95aba30f9 100644
--- plugins/cmake/cmakemodelitems.cpp
+++ plugins/cmake/cmakemodelitems.cpp
@@ -32,7 +32,7 @@ QUrl CMakeTargetItem::builtUrl() const
     if (!m_builtUrl.isEmpty())
         return m_builtUrl.toUrl();
 
-    const KDevelop::Path buildDir = CMake::currentBuildDir(project());
+    const KDevelop::Path buildDir = CMake::currentCanonicalBuildDir(project());
     if (buildDir.isEmpty())
         return QUrl();
 
diff --git plugins/cmake/cmakeserverimportjob.cpp plugins/cmake/cmakeserverimportjob.cpp
index f93ded09658c5965e7943c7265bb5b6ef87ae30a..f407afe6608042c1e7bcc98db9ecd4cc1433eaab 100644
--- plugins/cmake/cmakeserverimportjob.cpp
+++ plugins/cmake/cmakeserverimportjob.cpp
@@ -163,7 +163,7 @@ void CMakeServerImportJob::doStart()
 {
     connect(m_server.data(), &CMakeServer::response, this, &CMakeServerImportJob::processResponse);
 
-    m_server->handshake(m_project->path(), CMake::currentBuildDir(m_project));
+    m_server->handshake(m_project->path(), CMake::currentCanonicalBuildDir(m_project));
 }
 
 void CMakeServerImportJob::processResponse(const QJsonObject& response)
diff --git plugins/cmake/cmakeutils.cpp plugins/cmake/cmakeutils.cpp
index 5b9bd5fabe743b89252706ecb50abce0cb2aa350..60c73164e02fd6254fb0676e8bd6629ff21ee421 100644
--- plugins/cmake/cmakeutils.cpp
+++ plugins/cmake/cmakeutils.cpp
@@ -165,7 +165,7 @@ namespace CMake
 
 KDevelop::Path::List resolveSystemDirs(KDevelop::IProject* project, const QStringList& dirs)
 {
-    const KDevelop::Path buildDir(CMake::currentBuildDir(project));
+    const KDevelop::Path buildDir(CMake::currentCanonicalBuildDir(project));
     const KDevelop::Path installDir(CMake::currentInstallDir(project));
 
     KDevelop::Path::List newList;
@@ -200,7 +200,7 @@ KDevelop::Path::List resolveSystemDirs(KDevelop::IProject* project, const QStrin
 bool checkForNeedingConfigure( KDevelop::IProject* project )
 {
     const QString currentRuntime = ICore::self()->runtimeController()->currentRuntime()->name();
-    const KDevelop::Path builddir = currentBuildDir(project);
+    const KDevelop::Path builddir = currentCanonicalBuildDir(project);
     const bool isValid = (buildDirRuntime(project, -1) == currentRuntime || buildDirRuntime(project, -1).isEmpty()) && builddir.isValid();
 
     if( !isValid )
@@ -208,7 +208,7 @@ bool checkForNeedingConfigure( KDevelop::IProject* project )
         CMakeBuildDirChooser bd;
 
         bd.setProject( project );
-        const auto builddirs = CMake::allBuildDirs(project);
+        const auto builddirs = CMake::allCanonicalBuildDirs(project);
         bd.setAlreadyUsed( builddirs );
         bd.setShowAvailableBuildDirs(!builddirs.isEmpty());
         bd.setCMakeExecutable(currentCMakeExecutable(project));
@@ -298,6 +298,17 @@ KDevelop::Path currentBuildDir( KDevelop::IProject* project, int builddir )
     return KDevelop::Path(readBuildDirParameter( project, Config::Specific::buildDirPathKey, QString(), builddir ));
 }
 
+KDevelop::Path currentCanonicalBuildDir( KDevelop::IProject* project, int builddir )
+{
+    const QString buildDir(readBuildDirParameter( project, Config::Specific::buildDirPathKey, QString(), builddir ));
+    const auto info = QFileInfo(buildDir);
+    if (info.exists()) {
+        return KDevelop::Path(info.canonicalFilePath());
+    } else {
+        return KDevelop::Path(buildDir);
+    }
+}
+
 KDevelop::Path commandsFile(KDevelop::IProject* project)
 {
     auto currentBuildDir = CMake::currentBuildDir(project);
@@ -629,6 +643,22 @@ QStringList allBuildDirs(KDevelop::IProject* project)
     return result;
 }
 
+QStringList allCanonicalBuildDirs(KDevelop::IProject* project)
+{
+    QStringList result;
+    int bdCount = buildDirCount(project);
+    for (int i = 0; i < bdCount; ++i) {
+        QString buildDir = buildDirGroup( project, i ).readEntry( Config::Specific::buildDirPathKey );
+        const auto info = QFileInfo(buildDir);
+        if (info.exists()) {
+            result += info.canonicalFilePath();
+        } else {
+            result += buildDir;
+        }
+    }
+    return result;
+}
+
 QString executeProcess(const QString& execName, const QStringList& args)
 {
     Q_ASSERT(!execName.isEmpty());
diff --git plugins/cmake/cmakeutils.h plugins/cmake/cmakeutils.h
index 3642b94c21dd3daeefdbb1fd75ce6ff0a65de702..06a1ce11b1494ff9a265ec71b4c7faaddd126aca 100644
--- plugins/cmake/cmakeutils.h
+++ plugins/cmake/cmakeutils.h
@@ -89,6 +89,12 @@ namespace CMake
     KDEVCMAKECOMMON_EXPORT KDevelop::Path currentBuildDir( KDevelop::IProject* project, int builddir = -1 );
 
     /**
+     * @returns the current canonical builddir for the given project or an empty url if none
+     * has been set by the user. See QFileInfo::canonicalFilePath()
+     */
+    KDEVCMAKECOMMON_EXPORT KDevelop::Path currentCanonicalBuildDir( KDevelop::IProject* project, int builddir = -1 );
+
+    /**
      * @returns the path to the 'compile_commands.json' file in the current builddir for the given project
      * or an empty url if none has been set by the user.
      */
@@ -191,6 +197,11 @@ namespace CMake
     KDEVCMAKECOMMON_EXPORT QStringList allBuildDirs(KDevelop::IProject* project);
 
     /**
+     * Retrieves the canonical form of the configured build directories for @p project.
+     */
+    KDEVCMAKECOMMON_EXPORT QStringList allCanonicalBuildDirs(KDevelop::IProject* project);
+
+    /**
      * Attempts to migrate the CMake configuration to per-builddir format.
      * Silently returns if the migration has already been performed.
      */
diff --git plugins/cmake/settings/cmakepreferences.cpp plugins/cmake/settings/cmakepreferences.cpp
index f2bcb81f54ee15aad758782938eebdf86daaf493..9fb8209196e00b5117445e9c82110d77bc57af7f 100644
--- plugins/cmake/settings/cmakepreferences.cpp
+++ plugins/cmake/settings/cmakepreferences.cpp
@@ -336,7 +336,7 @@ void CMakePreferences::removeBuildDir()
     if(curr < 0)
         return;
 
-    Path removedPath = CMake::currentBuildDir( m_project );
+    Path removedPath = CMake::currentCanonicalBuildDir( m_project );
     QString removed = removedPath.toLocalFile();
     if(QDir(removed).exists())
     {
