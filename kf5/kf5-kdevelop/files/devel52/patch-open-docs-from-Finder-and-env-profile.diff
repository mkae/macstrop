diff --git app/Info.plist.in app/Info.plist.in
index be256f9c40..5847b73f00 100644
--- app/Info.plist.in
+++ app/Info.plist.in
@@ -40,5 +40,165 @@
     <string>True</string>
     <key>NSHumanReadableCopyright</key>
     <string>${MACOSX_BUNDLE_COPYRIGHT}</string>
+    <key>LSMultipleInstancesProhibited</key>
+    <false/>
+    <key>CFBundleDocumentTypes</key>
+    <array>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>h</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>C Header Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.c-header</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>hh</string>
+                <string>hp</string>
+                <string>hpp</string>
+                <string>hxx</string>
+                <string>h++</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>C++ Header Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.c-plus-plus-header</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>c</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>C Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.c-source</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>cc</string>
+                <string>cp</string>
+                <string>cpp</string>
+                <string>cxx</string>
+                <string>c++</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>C++ Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.c-plus-plus-source</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>m</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>Objective-C Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.objective-c-source</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>mm</string>
+                <string>M</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>Objective-C++ Source</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.objective-c-plus-plus-source</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>make</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>Makefile</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>com.apple.xcode.make-script</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>plist</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>XML Property List</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>com.apple.xml-property-list</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeName</key>
+            <string>Source Code</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.source-code</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeName</key>
+            <string>Text Document</string>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>LSItemContentTypes</key>
+            <array>
+                <string>public.text</string>
+            </array>
+        </dict>
+        <dict>
+            <key>CFBundleTypeExtensions</key>
+            <array>
+                <string>*</string>
+            </array>
+            <key>CFBundleTypeName</key>
+            <string>Anything</string>
+            <key>CFBundleTypeOSTypes</key>
+            <array>
+                <string>****</string>
+            </array>
+            <key>CFBundleTypeRole</key>
+            <string>Viewer</string>
+        </dict>
+    </array>
 </dict>
 </plist>
diff --git app/main.cpp app/main.cpp
index 646625b78c..e1f07f8462 100644
--- app/main.cpp
+++ app/main.cpp
@@ -64,6 +65,7 @@
 #include <interfaces/iproject.h>
 #include <interfaces/launchconfigurationtype.h>
 #include <util/path.h>
+#include <util/environmentprofilelist.h>
 #include <debug.h>
 
 #include "kdevideextension.h"
@@ -73,11 +73,15 @@
 
 #include <iostream>
 
-#ifdef Q_OS_MAC
+#include <QFileOpenEvent>
+#ifdef Q_OS_MACOS
 #include <CoreFoundation/CoreFoundation.h>
+#include <unistd.h>
+#include <stdio.h>
 #endif
 
 using namespace KDevelop;
+class UrlInfo;
 
 namespace {
 
@@ -110,16 +116,39 @@ class KDevelopApplication:
     public QApplication
 #endif
 {
+    // Q_OBJECT wouldn't be required in KDEVELOP_SINGLE_APP if moc respected CPP tokens.
+    Q_OBJECT
 public:
     explicit KDevelopApplication(int &argc, char **argv, bool GUIenabled = true)
 #if KDEVELOP_SINGLE_APP
         : SharedTools::QtSingleApplication(QStringLiteral("KDevelop"), argc, argv)
 #else
         : QApplication(argc, argv, GUIenabled)
+        , m_session(0)
+        , queueFileOpenEvents(false)
 #endif
         {
+#if KDEVELOP_SINGLE_APP
             Q_UNUSED(GUIenabled);
+#endif
             connect(this, &QGuiApplication::saveStateRequest, this, &KDevelopApplication::saveState);
+
+            const KDevelop::EnvironmentProfileList environmentProfiles(KSharedConfig::openConfig());
+            const QString envProfileName = environmentProfiles.defaultProfileName();
+            QProcessEnvironment environment = QProcessEnvironment::systemEnvironment();
+            auto userEnv = environmentProfiles.variables(envProfileName);
+            expandVariables(userEnv, environment);
+            qCDebug(APP) << "Setting default environment profile:" << envProfileName;
+            mergeEnvironment(userEnv);
+        }
+
+        template< typename T >
+        void mergeEnvironment(const T& src)
+        {
+            for( typename T::const_iterator it = src.begin(); it != src.end(); ++it ) {
+                qCDebug(APP) << "setenv" << it.key() << it.value();
+                qputenv( it.key().toLatin1(), it.value().toLatin1() );
+            }
         }
 
 #if KDEVELOP_SINGLE_APP
@@ -158,6 +187,16 @@ public Q_SLOTS:
     {
         openFiles({UrlInfo(file)});
     }
+#else
+    void startHandlingFileOpenEvents(QString *session);
+    void handleQueuedFileOpenRequests();
+
+protected:
+    /**
+     * Event filter for QApplication to handle Mac OS X style file open requests
+     * which Qt translates into FileOpen application events.
+     */
+    bool eventFilter(QObject *obj, QEvent *event) Q_DECL_OVERRIDE;
 #endif
 
 private Q_SLOTS:
@@ -174,6 +213,12 @@ private Q_SLOTS:
             sm.setRestartCommand({QCoreApplication::applicationFilePath(), "-session", x11SessionId, "-s", kdevelopSessionId});
         }
     }
+#if !KDEVELOP_SINGLE_APP
+private:
+    QString *m_session;
+    bool queueFileOpenEvents;
+    QVector<UrlInfo> fileOpenRequestList;
+#endif
 };
 
 /// Tries to find a session identified by @p data in @p sessions.
@@ -244,7 +289,7 @@ static int openProjectInRunningInstance(const QVector<UrlInfo>& paths, qint64 pi
 
 /// Gets the PID of a running KDevelop instance, eventually asking the user if there is more than one.
 /// Returns -1 in case there are no running sessions.
-static qint64 getRunningSessionPid()
+static qint64 getRunningSessionPid(QString *sessionNameReturn=NULL)
 {
     SessionInfos candidates;
     foreach( const KDevelop::SessionInfo& si, KDevelop::SessionController::availableSessionInfos() ) {
@@ -264,6 +309,9 @@ static qint64 getRunningSessionPid()
         const QString title = i18n("Select the session to open the document in");
         sessionUuid = KDevelop::SessionController::showSessionChooserDialog(title, true);
     }
+    if (sessionNameReturn) {
+        *sessionNameReturn = sessionUuid;
+    }
     return KDevelop::SessionController::sessionRunInfo(sessionUuid).holderPid;
 }
 
@@ -301,6 +349,74 @@ static qint64 findSessionPid(const QString &sessionId)
     return sessionInfo.holderPid;
 }
 
+#if !KDEVELOP_SINGLE_APP
+void KDevelopApplication::startHandlingFileOpenEvents(QString *session)
+{
+    queueFileOpenEvents = true;
+    m_session = session;
+    installEventFilter(this);
+    // let the eventFilter construct a list of all files to open, from any pending
+    // FileOpen events:
+    processEvents();
+    queueFileOpenEvents = false;
+    qCDebug(APP) << "initial FileOpen events processed:" << fileOpenRequestList.count();
+    // process the list of files to open:
+    handleQueuedFileOpenRequests();
+}
+
+void KDevelopApplication::handleQueuedFileOpenRequests()
+{
+    if (fileOpenRequestList.isEmpty()) {
+        return;
+    }
+    int pid = getRunningSessionPid(m_session);
+    if (pid > 0) {
+        if (m_session) {
+            qCDebug(APP) << "opening" << fileOpenRequestList.count() << "file(s) in session" << *m_session << "pid=" << pid;
+        }
+        openFilesInRunningInstance(fileOpenRequestList, pid);
+        // in a more subtle implementation, openFilesInRunningInstance() would return a list
+        // containing the documents that failed to open, and we could reininitialise fileOpenRequestList
+        // from that list.
+        fileOpenRequestList.clear();
+    }
+}
+
+bool KDevelopApplication::eventFilter(QObject *obj, QEvent *event)
+{
+    if (event->type() == QEvent::FileOpen) {
+        QFileOpenEvent *fileOpenEvent = static_cast<QFileOpenEvent*>(event);
+        qCDebug(APP) << "FileOpen event for" << fileOpenEvent->url();
+        fileOpenRequestList.append(UrlInfo(fileOpenEvent->file()));
+        if (!queueFileOpenEvents){
+            handleQueuedFileOpenRequests();
+        }
+        // don't eat the event
+        return false;
+    }
+
+    return QObject::eventFilter(obj, event);
+}
+
+static bool shouldSimulatePSOption(int argc, char *argv[])
+{
+#ifdef Q_OS_MACOS
+    if ((argc == 2 && qstrncmp(argv[1], "-psn_", 5) == 0)
+        || (argc== 1 && !isatty(fileno(stdin)))){
+        // this is a pure start from the Finder or Dock, without any arguments to open.
+        // Present the session selection dialog (= simulate the --ps option) if the user
+        // holds the Command (sic) key while we start. Without that modified we'd also
+        // be doing this instead of handling the FileOpen event associate with a file-open
+        // request from the Finder or the Dock.
+        if (QApplication::queryKeyboardModifiers() & Qt::ControlModifier) {
+            return true;
+        }
+    }
+#endif
+    return false;
+}
+#endif
+
 int main( int argc, char *argv[] )
 {
     QElapsedTimer timer;
@@ -326,7 +442,7 @@ int main( int argc, char *argv[] )
 
     QCoreApplication::setAttribute(Qt::AA_DontCreateNativeWidgetSiblings);
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     CFBundleRef mainBundle = CFBundleGetMainBundle();
     if (mainBundle) {
         // get the application's Info Dictionary. For app bundles this would live in the bundle's Info.plist,
@@ -504,6 +626,8 @@ int main( int argc, char *argv[] )
         return 0;
     }
 
+    QString session;
+
     // Handle extra arguments, which stand for files to open
     QVector<UrlInfo> initialFiles;
     QVector<UrlInfo> initialDirectories;
@@ -529,7 +653,7 @@ int main( int argc, char *argv[] )
 #else
         qint64 pid = -1;
         if (parser.isSet(QStringLiteral("open-session"))) {
-            const QString session = findSessionId(availableSessionInfos, parser.value(QStringLiteral("open-session")));
+            session = findSessionId(availableSessionInfos, parser.value(QStringLiteral("open-session")));
             if (session.isEmpty()) {
                 return 1;
             } else if (KDevelop::SessionController::isSessionRunning(session)) {
@@ -547,7 +671,6 @@ int main( int argc, char *argv[] )
     }
 
     // if empty, restart kdevelop with last active session, see SessionController::defaultSessionId
-    QString session;
 
     uint nRunningSessions = 0;
     foreach(const KDevelop::SessionInfo& si, availableSessionInfos)
@@ -590,12 +713,18 @@ int main( int argc, char *argv[] )
         }
     }
 
+#if KDEVELOP_SINGLE_APP
+    const bool simulatePS = false;
     if(parser.isSet(QStringLiteral("ps")))
+#else
+    const bool simulatePS = shouldSimulatePSOption(argc, argv);
+    if(parser.isSet(QStringLiteral("ps")) || simulatePS)
+#endif
     {
         bool onlyRunning = parser.isSet(QStringLiteral("pid"));
         session = KDevelop::SessionController::showSessionChooserDialog(i18n("Select the session you would like to use"), onlyRunning);
         if(session.isEmpty())
-            return 1;
+            return simulatePS ? 0 : 1;
     }
 
     if ( parser.isSet(QStringLiteral("debug")) ) {
@@ -684,12 +813,37 @@ int main( int argc, char *argv[] )
 
     KDevIDEExtension::init();
 
+#if !KDEVELOP_SINGLE_APP
+    // start filtering events, so that on OS X we can handle file open requests
+    // sent through LaunchServices (i.e. the Finder).
+    // startHandlingFileOpenEvents() will call processEvents(), and if a FileOpen event
+    // was already queued it may present a session selection dialog in which case
+    // session has to be changed. This happens on OS X when we were started because the user asked
+    // the Finder or Dock to open a file with KDevelop, and is the reason a pointer to <session>
+    // is handed to startHandlingFileOpenEvents().
+    // startHandlingFileOpenEvents() will cause all pending FileOpen events to be appended
+    // to a list, and will then attempt to open the documents in that list. If that attempt
+    // succeeds (because at least 1 session is already open and running), session will
+    // have been set to the session where the document(s) was/were opened.
+    app.startHandlingFileOpenEvents(&session);
+#endif
+
     if(!Core::initialize(Core::Default, session))
         return 5;
 
     // register a DBUS service for this process, so that we can open files in it from other invocations
     QDBusConnection::sessionBus().registerService(QStringLiteral("org.kdevelop.kdevelop-%1").arg(app.applicationPid()));
 
+#if !KDEVELOP_SINGLE_APP
+    // When the user requests to open a file (or multiple files) in KDevelop on OS X, and no KDevelop instance is
+    // already running, the initial attempt to open these files may fail because getRunningSessionPid() fails.
+    // In that case the FileOpen requests are still queued, and we should be able to process them now.
+    // NB: it is not impossible that another session was opened between this point and the initial call to
+    // startHandlingFileOpenEvents(). If that happens, the user will probably be asked to pick a session to open
+    // the queued document(s) in, meaning session could change.
+    app.handleQueuedFileOpenRequests();
+#endif
+
     Core* core = Core::self();
     if (!QProcessEnvironment::systemEnvironment().contains(QStringLiteral("KDEV_DISABLE_WELCOMEPAGE"))) {
         core->pluginController()->loadPlugin(QStringLiteral("KDevWelcomePage"));
@@ -792,3 +946,5 @@ int main( int argc, char *argv[] )
 
     return app.exec();
 }
+
+#include "main.moc"
