diff --git kdevplatform/project/CMakeLists.txt kdevplatform/project/CMakeLists.txt
index c61e8de32e80c29a648766fe88c62b78f5561c36..d8b14d82407b1ec5a886d2fbd60dd77bd8bceb33 100644
--- kdevplatform/project/CMakeLists.txt
+++ kdevplatform/project/CMakeLists.txt
@@ -15,6 +15,7 @@ set(KDevPlatformProject_LIB_SRCS
     abstractfilemanagerplugin.cpp
     filemanagerlistjob.cpp
     projectfiltermanager.cpp
+    projectwatcher.cpp
     interfaces/iprojectbuilder.cpp
     interfaces/iprojectfilemanager.cpp
     interfaces/ibuildsystemmanager.cpp
diff --git kdevplatform/project/abstractfilemanagerplugin.cpp kdevplatform/project/abstractfilemanagerplugin.cpp
index 3e7d24f1375db81a9befc27bc13348851d14d43d..79c919de582c4bc12c50a0457e0a38b57df670f4 100644
--- kdevplatform/project/abstractfilemanagerplugin.cpp
+++ kdevplatform/project/abstractfilemanagerplugin.cpp
@@ -1,3 +1,4 @@
+#define TIME_IMPORT_JOB
 /***************************************************************************
  *   This file is part of KDevelop                                         *
  *   Copyright 2010-2012 Milian Wolff <mail@milianw.de>                    *
@@ -41,6 +42,7 @@
 #include <serialization/indexedstring.h>
 
 #include "projectfiltermanager.h"
+#include "projectwatcher.h"
 #include "debug.h"
 
 #define ifDebug(x)
@@ -74,6 +76,7 @@ class KDevelop::AbstractFileManagerPluginPrivate
 public:
     explicit AbstractFileManagerPluginPrivate(AbstractFileManagerPlugin* qq)
         : q(qq)
+        , m_intreeDirWatching(qEnvironmentVariableIsSet("KDEV_PROJECT_INTREE_DIRWATCHING_MODE"))
     {
     }
 
@@ -89,7 +92,7 @@ public:
                      const KIO::UDSEntryList& entries);
 
     void deleted(const QString &path);
-    void created(const QString &path);
+    void dirty(const QString &path, bool isCreated = false);
 
     void projectClosing(IProject* project);
     void jobFinished(KJob* job);
@@ -103,10 +106,14 @@ public:
 
     void removeFolder(ProjectFolderItem* folder);
 
-    QHash<IProject*, KDirWatch*> m_watchers;
+    QHash<IProject*, ProjectWatcher*> m_watchers;
     QHash<IProject*, QList<FileManagerListJob*> > m_projectJobs;
     QVector<QString> m_stoppedFolders;
     ProjectFilterManager m_filters;
+    // intree dirwatching is the original mode that feeds all files
+    // and directories to the dirwatcher. It takes longer to load but
+    // works better for certain (large) projects that use in-tree builds.
+    bool m_intreeDirWatching;
 };
 
 void AbstractFileManagerPluginPrivate::projectClosing(IProject* project)
@@ -129,7 +136,7 @@ void AbstractFileManagerPluginPrivate::projectClosing(IProject* project)
     delete m_watchers.take(project);
 #ifdef TIME_IMPORT_JOB
     if (timer.isValid()) {
-        qCDebug(FILEMANAGER) << "Deleting dir watcher took" << timer.elapsed() / 1000.0 << "seconds for project" << project->name();
+        qCInfo(FILEMANAGER) << "Deleting dir watcher took" << timer.elapsed() / 1000.0 << "seconds for project" << project->name();
     }
 #endif
     m_filters.remove(project);
@@ -137,6 +144,9 @@ void AbstractFileManagerPluginPrivate::projectClosing(IProject* project)
 
 KIO::Job* AbstractFileManagerPluginPrivate::eventuallyReadFolder(ProjectFolderItem* item)
 {
+    ProjectWatcher* watcher = m_watchers.value( item->project(), nullptr );
+    // FileManagerListJob detects KDEV_PROJECT_INTREE_DIRWATCHING_MODE itself
+    // this is safe as long as it's not feasible to change our own env. variables
     FileManagerListJob* listJob = new FileManagerListJob( item );
     m_projectJobs[ item->project() ] << listJob;
     qCDebug(FILEMANAGER) << "adding job" << listJob << item << item->path() << "for project" << item->project();
@@ -147,6 +157,11 @@ KIO::Job* AbstractFileManagerPluginPrivate::eventuallyReadFolder(ProjectFolderIt
     q->connect( listJob, &FileManagerListJob::entries,
                 q, [&] (FileManagerListJob* job, ProjectFolderItem* baseItem, const KIO::UDSEntryList& entries) {
                     addJobItems(job, baseItem, entries); } );
+    if (!m_intreeDirWatching) {
+        q->connect( listJob, &FileManagerListJob::watchDir,
+                watcher, [watcher] (const QString& path) {
+                    watcher->addDir(path); } );
+    }
 
     return listJob;
 }
@@ -257,9 +272,13 @@ void AbstractFileManagerPluginPrivate::addJobItems(FileManagerListJob* job,
     }
 }
 
-void AbstractFileManagerPluginPrivate::created(const QString& path_)
+void AbstractFileManagerPluginPrivate::dirty(const QString& path_, bool isCreated)
 {
-    qCDebug(FILEMANAGER) << "created:" << path_;
+    if (isCreated) {
+        qCDebug(FILEMANAGER) << "created:" << path_;
+    } else {
+        qCDebug(FILEMANAGER) << "dirty:" << path_;
+    }
     QFileInfo info(path_);
 
     ///FIXME: share memory with parent
@@ -267,7 +286,7 @@ void AbstractFileManagerPluginPrivate::created(const QString& path_)
     const IndexedString indexedPath(path.pathOrUrl());
     const IndexedString indexedParent(path.parent().pathOrUrl());
 
-    QHashIterator<IProject*, KDirWatch*> it(m_watchers);
+    QHashIterator<IProject*, ProjectWatcher*> it(m_watchers);
     while (it.hasNext()) {
         const auto p = it.next().key();
         if ( !p->projectItem()->model() ) {
@@ -293,22 +312,29 @@ void AbstractFileManagerPluginPrivate::created(const QString& path_)
             }
         } else if (!p->filesForPath(indexedPath).isEmpty()) {
             // also gets triggered for kate's backup files
+            if (!isCreated) {
+                qCWarning(FILEMANAGER) << p->filesForPath(indexedPath).size() << "filesForPath" << path;
+            }
             continue;
         }
-        foreach ( ProjectFolderItem* parentItem, p->foldersForPath(indexedParent) ) {
-            if ( info.isDir() ) {
-                ProjectFolderItem* folder = q->createFolderItem( p, path, parentItem );
-                if (folder) {
-                    emit q->folderAdded( folder );
-                    auto job = eventuallyReadFolder( folder );
-                    job->start();
-                }
-            } else {
-                ProjectFileItem* file = q->createFileItem( p, path, parentItem );
-                if (file) {
-                    emit q->fileAdded( file );
+        if (isCreated) {
+            foreach ( ProjectFolderItem* parentItem, p->foldersForPath(indexedParent) ) {
+                if ( info.isDir() ) {
+                    ProjectFolderItem* folder = q->createFolderItem( p, path, parentItem );
+                    if (folder) {
+                        emit q->folderAdded( folder );
+                        auto job = eventuallyReadFolder( folder );
+                        job->start();
+                    }
+                } else {
+                    ProjectFileItem* file = q->createFileItem( p, path, parentItem );
+                    if (file) {
+                        emit q->fileAdded( file );
+                    }
                 }
             }
+        } else if (!info.isDir()) {
+            qCWarning(FILEMANAGER) << "ignoring" << (isCreated ? "created" : "dirty") << "signal for file" << path;
         }
     }
 }
@@ -330,7 +356,7 @@ void AbstractFileManagerPluginPrivate::deleted(const QString& path_)
     const Path path(QUrl::fromLocalFile(path_));
     const IndexedString indexed(path.pathOrUrl());
 
-    QHashIterator<IProject*, KDirWatch*> it(m_watchers);
+    QHashIterator<IProject*, ProjectWatcher*> it(m_watchers);
     while (it.hasNext()) {
         const auto p = it.next().key();
         if (path == p->path()) {
@@ -446,6 +472,11 @@ void AbstractFileManagerPluginPrivate::removeFolder(ProjectFolderItem* folder)
             job->removeSubDir(folder);
         }
     }
+    if (!m_intreeDirWatching && folder->path().isLocalFile()) {
+        ProjectWatcher* watcher = m_watchers.value(folder->project(), nullptr);
+        Q_ASSERT(watcher);
+        watcher->removeDir(folder->path().toLocalFile());
+    }
     folder->parent()->removeRow( folder->row() );
 }
 
@@ -487,14 +518,19 @@ ProjectFolderItem *AbstractFileManagerPlugin::import( IProject *project )
 
     ///TODO: check if this works for remote files when something gets changed through another KDE app
     if ( project->path().isLocalFile() ) {
-        auto watcher = new KDirWatch( project );
+        auto watcher = new ProjectWatcher(project);
 
-        // set up the signal handling
-        connect(watcher, &KDirWatch::created,
-                this, [&] (const QString& path_) { d->created(path_); });
+        // set up the signal handling; feeding the dirwatcher is handled by FileManagerListJob.
         connect(watcher, &KDirWatch::deleted,
                 this, [&] (const QString& path_) { d->deleted(path_); });
-        watcher->addDir(project->path().toLocalFile(), KDirWatch::WatchSubDirs | KDirWatch:: WatchFiles );
+        if (d->m_intreeDirWatching) {
+            connect(watcher, &KDirWatch::created,
+                this, [&] (const QString& path_) { d->dirty(path_, true); });
+            watcher->addDir(project->path().toLocalFile(), KDirWatch::WatchSubDirs | KDirWatch:: WatchFiles );
+        } else {
+            connect(watcher, &KDirWatch::dirty,
+                this, [&] (const QString& path_) { d->dirty(path_); });
+        }
         d->m_watchers[project] = watcher;
     }
 
diff --git kdevplatform/project/abstractfilemanagerplugin.h kdevplatform/project/abstractfilemanagerplugin.h
index c99e7e0c2316bf24df76d303fdb599a8095193da..0bb9e9a3c899505fd1e06235b31f619407a94b26 100644
--- kdevplatform/project/abstractfilemanagerplugin.h
+++ kdevplatform/project/abstractfilemanagerplugin.h
@@ -34,6 +34,7 @@ class KDirWatch;
 namespace KDevelop {
 
 class AbstractFileManagerPluginPrivate;
+class AbstractFileManagerPluginImportBenchmark;
 
 /**
  * This class can be used as a common base for file managers.
@@ -118,6 +119,8 @@ Q_SIGNALS:
 private:
     const QScopedPointer<class AbstractFileManagerPluginPrivate> d;
     friend class AbstractFileManagerPluginPrivate;
+public:
+    friend class AbstractFileManagerPluginImportBenchmark;
 };
 
 }
diff --git kdevplatform/project/filemanagerlistjob.cpp kdevplatform/project/filemanagerlistjob.cpp
index 06e1d69c70ba762cc476086794a79324871401f9..c04ad927d0b870849c18c98860c1716238b328e0 100644
--- kdevplatform/project/filemanagerlistjob.cpp
+++ kdevplatform/project/filemanagerlistjob.cpp
@@ -32,6 +32,7 @@ using namespace KDevelop;
 
 FileManagerListJob::FileManagerListJob(ProjectFolderItem* item)
     : KIO::Job(), m_item(item), m_aborted(false)
+    , m_emitWatchDir(!qEnvironmentVariableIsSet("KDEV_PROJECT_INTREE_DIRWATCHING_MODE"))
 {
     qRegisterMetaType<KIO::UDSEntryList>("KIO::UDSEntryList");
     qRegisterMetaType<KIO::Job*>();
@@ -95,6 +96,10 @@ void FileManagerListJob::startNextJob()
             if (m_aborted) {
                 return;
             }
+            if (m_emitWatchDir) {
+                // signal that this directory has to be watched
+                emit watchDir(path.toLocalFile());
+            }
             KIO::UDSEntryList results;
             std::transform(entries.begin(), entries.end(), std::back_inserter(results), [] (const QFileInfo& info) -> KIO::UDSEntry {
                 KIO::UDSEntry entry;
diff --git kdevplatform/project/filemanagerlistjob.h kdevplatform/project/filemanagerlistjob.h
index 0d32c992c47ebc7d084a019badb64988f0be9ec0..0b9f9906253169ed2a2244f42f7628df7d47ccdc 100644
--- kdevplatform/project/filemanagerlistjob.h
+++ kdevplatform/project/filemanagerlistjob.h
@@ -52,6 +52,7 @@ Q_SIGNALS:
     void entries(FileManagerListJob* job, ProjectFolderItem* baseItem,
                  const KIO::UDSEntryList& entries);
     void nextJob();
+    void watchDir(const QString& path);
 
 private Q_SLOTS:
     void slotEntries(KIO::Job* job, const KIO::UDSEntryList& entriesIn );
@@ -73,6 +74,7 @@ private:
     QElapsedTimer m_subTimer;
     qint64 m_subWaited = 0;
 #endif
+    bool m_emitWatchDir;
 };
 
 }
diff --git kdevplatform/project/projectwatcher.cpp kdevplatform/project/projectwatcher.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..8e3ae7e0ea14a40cf170b8becb9b78f719b4ef99
--- /dev/null
+++ kdevplatform/project/projectwatcher.cpp
@@ -0,0 +1,63 @@
+/***************************************************************************
+ *   This file is part of KDevelop                                         *
+ *   Copyright 2017 René Bertin <rjvbertin@gmail.com>                      *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Library General Public License as       *
+ *   published by the Free Software Foundation; either version 2 of the    *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU Library General Public     *
+ *   License along with this program; if not, write to the                 *
+ *   Free Software Foundation, Inc.,                                       *
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
+ ***************************************************************************/
+
+#include "projectwatcher.h"
+#include "iproject.h"
+#include "projectfiltermanager.h"
+#include "path.h"
+
+#include <QApplication>
+
+#include <KDirWatch>
+
+using namespace KDevelop;
+
+KDevelop::ProjectWatcher::ProjectWatcher(IProject* project)
+    : KDirWatch(project)
+    , m_watchedCount(0)
+{
+    if (QCoreApplication::instance()) {
+        // stop monitoring project directories when the IDE is about to quit
+        // triggering a full project reload just before closing would be counterproductive.
+        connect(QCoreApplication::instance(), &QCoreApplication::aboutToQuit, this, &KDirWatch::stopScan);
+    }
+}
+
+void KDevelop::ProjectWatcher::addDir(const QString& path, WatchModes watchModes)
+{
+    if (!contains(path)) {
+        KDirWatch::addDir(path, watchModes);
+        m_watchedCount += 1;
+    }
+}
+
+void KDevelop::ProjectWatcher::removeDir(const QString& path)
+{
+    if (contains(path)) {
+        KDirWatch::removeDir(path);
+        m_watchedCount -= 1;
+    }
+}
+
+int KDevelop::ProjectWatcher::size() const
+{
+    return m_watchedCount;
+}
+
diff --git kdevplatform/project/projectwatcher.h kdevplatform/project/projectwatcher.h
new file mode 100644
index 0000000000000000000000000000000000000000..c898d0436b2ad5ec96b75f7fc44d6a105d5e553a
--- /dev/null
+++ kdevplatform/project/projectwatcher.h
@@ -0,0 +1,60 @@
+/***************************************************************************
+ *   This file is part of KDevelop                                         *
+ *   Copyright 2017 René Bertin <rjvbertin@gmail.com>                      *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU Library General Public License as       *
+ *   published by the Free Software Foundation; either version 2 of the    *
+ *   License, or (at your option) any later version.                       *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU Library General Public     *
+ *   License along with this program; if not, write to the                 *
+ *   Free Software Foundation, Inc.,                                       *
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
+ ***************************************************************************/
+
+#ifndef KDEVPLATFORM_PROJECTWATCHER_H
+#define KDEVPLATFORM_PROJECTWATCHER_H
+
+#include "projectexport.h"
+
+#include <KDirWatch>
+
+namespace KDevelop {
+
+class IProject;
+class ProjectFilterManager;
+
+class KDEVPLATFORMPROJECT_EXPORT ProjectWatcher : public KDirWatch
+{
+    Q_OBJECT
+public:
+    /**
+     * Create a dirwatcher for @p project based on KDirWatch but
+     * that will add or remove each directory only once.
+     */
+    explicit ProjectWatcher(IProject* project);
+
+    /**
+     * Add directory @p path to the project dirwatcher if it is not
+     * already being watched.
+     */
+    void addDir(const QString& path, WatchModes watchModes = WatchDirOnly);
+    void removeDir(const QString& path);
+
+    /**
+     * return the current number of directories being watched.
+     */
+    int size() const;
+
+private:
+    int m_watchedCount;
+};
+
+}
+#endif //KDEVPLATFORM_PROJECTWATCHER_H
diff --git kdevplatform/project/tests/CMakeLists.txt kdevplatform/project/tests/CMakeLists.txt
index 74e5baada32fcc570f410e50c26bfc83a5066830..5a8d80cfe1a933bb839114cf7059152fc235adbd 100644
--- kdevplatform/project/tests/CMakeLists.txt
+++ kdevplatform/project/tests/CMakeLists.txt
@@ -21,3 +21,12 @@ target_link_libraries(abstractfilemanagerpluginimporttest
     KDev::Tests
     Qt5::QuickWidgets
 )
+
+add_executable(abstractfilemanagerpluginimportbenchmark
+    abstractfilemanagerpluginimportbenchmark.cpp
+)
+ecm_mark_nongui_executable(abstractfilemanagerpluginimportbenchmark)
+target_link_libraries(abstractfilemanagerpluginimportbenchmark
+    KDev::Project
+    KDev::Tests
+)
diff --git kdevplatform/project/tests/abstractfilemanagerpluginimportbenchmark.cpp kdevplatform/project/tests/abstractfilemanagerpluginimportbenchmark.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..ec78f1805b2bb1ceb97661ef5ef6f2510caaf3ea
--- /dev/null
+++ kdevplatform/project/tests/abstractfilemanagerpluginimportbenchmark.cpp
@@ -0,0 +1,205 @@
+/* This file is part of KDevelop
+    Copyright 2017 René J.V. Bertin <rjvbertin@gmail.com>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public License
+    along with this library; see the file COPYING.LIB.  If not, write to
+    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+    Boston, MA 02110-1301, USA.
+*/
+
+#include <interfaces/iplugin.h>
+#include <interfaces/icore.h>
+#include <interfaces/iplugincontroller.h>
+
+#include <project/abstractfilemanagerplugin.h>
+#include <project/projectmodel.h>
+#include <project/projectwatcher.h>
+
+#include <shell/projectcontroller.h>
+
+#include <tests/autotestshell.h>
+#include <tests/testcore.h>
+#include <tests/testproject.h>
+#include <tests/testplugincontroller.h>
+
+#include <util/path.h>
+
+#include <KJob>
+#include <KDirWatch>
+
+#include <QApplication>
+#include <QList>
+#include <QFileInfo>
+#include <QElapsedTimer>
+#include <QMap>
+#include <QDebug>
+#include <QTextStream>
+
+using namespace KDevelop;
+
+namespace KDevelop {
+
+// wrap the ProjectController to make its addProject() method public
+class ProjectControllerWrapper : public ProjectController
+{
+    Q_OBJECT
+public:
+    ProjectControllerWrapper(Core* core)
+        : ProjectController(core)
+    {}
+
+    using ProjectController::addProject;
+};
+
+class AbstractFileManagerPluginImportBenchmark : public QObject
+{
+    Q_OBJECT
+public:
+    AbstractFileManagerPluginImportBenchmark(AbstractFileManagerPlugin* manager, const QString& path,
+                                             TestCore* core)
+        : QObject(core)
+        , m_out(stdout)
+        , m_core(core)
+    {
+        m_manager = manager;
+        m_project = new TestProject(Path(path));
+    }
+
+    void start()
+    {
+        m_projectNumber = s_numBenchmarksRunning++;
+        m_out << "Starting import of project " << m_project->path().toLocalFile() << endl;
+        ProjectControllerWrapper *projectController = qobject_cast<ProjectControllerWrapper*>(m_core->projectController());
+        projectController->addProject(m_project);
+        m_timer.start();
+        auto root = m_manager->import(m_project);
+        int elapsed = m_timer.elapsed();
+        m_out << "\tcreating dirwatcher took "
+            << elapsed / 1000.0 << " seconds" << endl;
+        auto import = m_manager->createImportJob(root);
+        connect(import, &KJob::finished,
+            this, &AbstractFileManagerPluginImportBenchmark::projectImportDone);
+        m_timer.restart();
+        import->start();
+    }
+
+    AbstractFileManagerPlugin* m_manager;
+    TestProject* m_project;
+    QElapsedTimer m_timer;
+    int m_projectNumber;
+    QTextStream m_out;
+    TestCore* m_core;
+
+    static int s_numBenchmarksRunning;
+
+Q_SIGNALS:
+    void finished();
+
+private Q_SLOTS:
+    void projectImportDone(KJob* job)
+    {
+        Q_UNUSED(job);
+        int elapsed = m_timer.elapsed();
+        // The number of items in the dirwatcher can be obtained as follows,
+        // provided dirs are added one by one and not with a recursive call
+        // to ProjectWatcher::addDir():
+        ProjectWatcher* watcher = qobject_cast<ProjectWatcher*>(m_manager->projectWatcher(m_project));
+        int watched = watcher ? watcher->size() : -1;
+        m_out << "importing " << m_project->fileSet().size()
+            << " items into project #" << m_projectNumber
+            << " with " << watched << " watched directories"
+            << " took " << elapsed / 1000.0 << " seconds" << endl;
+
+        s_numBenchmarksRunning -= 1;
+        if (s_numBenchmarksRunning <= 0) {
+            emit finished();
+        }
+    }
+
+};
+
+int AbstractFileManagerPluginImportBenchmark::s_numBenchmarksRunning = 0;
+}
+
+int main(int argc, char** argv)
+{
+    if (argc < 2) {
+        qWarning() << "Usage:" << argv[0] << "projectDir1 [...projectDirN]";
+        return 1;
+    }
+    QApplication app(argc, argv);
+    QTextStream qout(stdout);
+    // measure the total test time, this provides an indication
+    // of overhead and how well multiple projects are imported in parallel
+    // (= how different is the total time from the import time of the largest
+    // project). When testing a single project the difference between this
+    // value and total runtime will provide an estimate of the time required
+    // to destroy the dirwatcher.
+    QElapsedTimer runTimer;
+
+    AutoTestShell::init({"no plugins"});
+    auto core = TestCore::initialize();
+    // load/activate the "Project Filter" plugin (it won't be available to us without this step):
+    core->pluginController()->allPluginsForExtension(QStringLiteral("org.kdevelop.IProjectFilter"));
+    auto projectController = new ProjectControllerWrapper(core);
+    delete core->projectController();
+    core->setProjectController(projectController);
+    auto manager = new AbstractFileManagerPlugin({}, core);
+
+    const char *kdwMethod[] = {"FAM", "Inotify", "Stat", "QFSWatch"};
+    qout << "KDirWatch backend: " << kdwMethod[KDirWatch().internalMethod()] << endl;
+
+    QList<AbstractFileManagerPluginImportBenchmark*> benchmarks;
+
+    for (int i = 1 ; i < argc ; ++i) {
+        const QString path = QString::fromUtf8(argv[i]);
+        if (QFileInfo(path).isDir()) {
+            const auto benchmark = new AbstractFileManagerPluginImportBenchmark(manager, path, core);
+            benchmarks << benchmark;
+            QObject::connect(benchmark, &AbstractFileManagerPluginImportBenchmark::finished,
+                             &app, [&runTimer, &qout] {
+                                qout << "Done in " << runTimer.elapsed() / 1000.0
+                                    << " seconds total\n";
+                                QCoreApplication::instance()->quit();
+                             });
+            if (qEnvironmentVariableIsSet("BENCHMARK_ORIGINAL_DIRWATCHER")) {
+                // benchmark the creation and deletion of the original dirwatcher:
+                KDirWatch *watcher = new KDirWatch(benchmark->m_project);
+                qout << "Benchmarking KDirWatch for all of " << argv[i];
+                benchmark->m_timer.start();
+                watcher->addDir(benchmark->m_project->path().toLocalFile(), KDirWatch::WatchSubDirs | KDirWatch:: WatchFiles );
+                int elapsed = benchmark->m_timer.elapsed();
+                qout << "\tfeeding the watcher: " << elapsed / 1000.0 << " seconds\n";
+                benchmark->m_timer.restart();
+                delete watcher;
+                elapsed = benchmark->m_timer.elapsed();
+                qout << "\tdeleting the watcher: " << elapsed / 1000.0 << " seconds\n";
+                qout.flush();
+            }
+        }
+    }
+
+    if (benchmarks.isEmpty()) {
+        qWarning() << "no projects to import (arguments must be directories)";
+        return 1;
+    }
+
+    runTimer.start();
+    for (auto benchmark : benchmarks) {
+        benchmark->start();
+    }
+
+    return app.exec();
+}
+
+#include "abstractfilemanagerpluginimportbenchmark.moc"
