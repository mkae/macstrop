diff --git CMakeLists.txt CMakeLists.txt
index d60aa8ccd07bbcad1727d0d9fd7648ecda352681..ea534990b8ef8204704297e167b60e67ebb0d2ea 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -8,10 +8,27 @@ set(KDEVELOP_SOVERSION 52)
 # plugin versions listed in the .desktop files
 set(KDEV_PLUGIN_VERSION 30)
 
+if(APPLE OR WIN32)
+    option(KDEVELOP_NATIVE_DIALOGS "Use native file dialogs instead of KDE dialogs" ON)
+else()
+    option(KDEVELOP_NATIVE_DIALOGS "Use native file dialogs instead of KDE dialogs" OFF)
+endif()
+
+option(KDEVELOP_BUILD_IDE "Build the IDE" ON)
+option(KDEVELOP_BUILD_CLANG_PARSER "Build the Clang-based C/C++ parser (formerly kdev-clang)" ON)
+
 # we need some parts of the ECM CMake helpers
 find_package (ECM 5.14.0 REQUIRED NO_MODULE)
 set(CMAKE_MODULE_PATH ${KDevelop_SOURCE_DIR}/cmake/modules ${ECM_MODULE_PATH})
 
+if (NOT KDEVELOP_BUILD_IDE)
+    if (NOT KDEVELOP_BUILD_CLANG_PARSER)
+        message(FATAL_ERROR "KDEVELOP_BUILD_IDE and KDEVELOP_BUILD_CLANG_PARSER cannot both be OFF!")
+    else()
+        message(WARNING "Invoke make in ${CMAKE_CURRENT_BINARY_DIR}/plugins/clang in order to build only kdev-clang!")
+    endif()
+endif()
+
 include(KDECompilerSettings NO_POLICY_SCOPE) # needs to be first, as set policies influence following macros
 include(ECMOptionalAddSubdirectory)
 include(ECMInstallIcons)
diff --git kdevplatform/CMakeLists.txt kdevplatform/CMakeLists.txt
index 59a45499d8e018de570d5f83c0e2acfb7b0abe0a..f39a0cd9c465499703f7f482972ec2b5e83809ae 100644
--- kdevplatform/CMakeLists.txt
+++ kdevplatform/CMakeLists.txt
@@ -15,6 +15,39 @@ set(CMAKECONFIG_INSTALL_DIR "${KDE_INSTALL_CMAKEPACKAGEDIR}/KDevPlatform")
 include(KDevPlatformMacros)
 include(KDevPlatformMacrosInternal)
 
+if (NOT KDEVELOP_BUILD_IDE)
+    # We cannot exclude this subdirectory because the clang plugin
+    # depends on certain of the library targets defined below.
+    # But we can reduce the build time and disk space overhead
+    # for items that won't be installed. We could disable LTO too
+    # but theoretically that would affect the plugin's performance.
+    string(REPLACE "-Ofast" "-Os" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-O3" "-Os" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-O2" "-Os" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-g" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-Ofast" "-Os" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-O3" "-Os" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-O2" "-Os" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-g" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-Ofast" "-Os" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
+    string(REPLACE "-O3" "-Os" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
+    string(REPLACE "-O2" "-Os" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
+    string(REPLACE "-g" "" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
+    string(REPLACE "-Ofast" "-Os" CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
+    string(REPLACE "-O3" "-Os" CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
+    string(REPLACE "-O2" "-Os" CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
+    string(REPLACE "-g" "" CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
+    string(REPLACE "-Ofast" "-Os" CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
+    string(REPLACE "-O3" "-Os" CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
+    string(REPLACE "-O2" "-Os" CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
+    string(REPLACE "-g" "" CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
+    string(REPLACE "-flto" "" CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
+endif()
+
 find_package(Grantlee5 CONFIG)
 set_package_properties(Grantlee5 PROPERTIES
     PURPOSE "Grantlee templating library, needed for file templates"
diff --git plugins/CMakeLists.txt plugins/CMakeLists.txt
index 44f7b94295615ea09c72cd48a9202d91fcd0b4f9..83852c9dae63cec68b8f00fa5cf34bb685259e74 100644
--- plugins/CMakeLists.txt
+++ plugins/CMakeLists.txt
@@ -35,25 +35,27 @@ add_subdirectory(customscript)
 ecm_optional_add_subdirectory(custom-definesandincludes)
 ecm_optional_add_subdirectory(qmljs)
 
-find_package(Clang 3.8)
-set(clangSearchHint "")
-if (NOT CLANG_FOUND)
-    set(clangSearchHint "Please install a package providing libclang. Either pass -DLLVM_ROOT=/path/to/llvm-prefix or install the 'llvm-config' command-line utility for auto-detection.")
-endif()
-set_package_properties(Clang PROPERTIES
-    DESCRIPTION "Clang libraries from the LLVM project. ${clangSearchHint}"
-    PURPOSE "Used for KDevelop's C++/C support plugin."
-    TYPE REQUIRED
-)
-
-if (CLANG_FOUND)
-    if (NOT CLANG_LIBCLANG_LIB)
-        message(FATAL_ERROR "Could not find the Clang C library: libclang")
+if(KDEVELOP_BUILD_CLANG_PARSER)
+    find_package(Clang 3.8)
+    set(clangSearchHint "")
+    if (NOT CLANG_FOUND)
+        set(clangSearchHint "Please install a package providing libclang. Either pass -DLLVM_ROOT=/path/to/llvm-prefix or install the 'llvm-config' command-line utility for auto-detection.")
     endif()
-
-    ecm_optional_add_subdirectory(clang)
+    set_package_properties(Clang PROPERTIES
+        DESCRIPTION "Clang libraries from the LLVM project. ${clangSearchHint}"
+        PURPOSE "Used for KDevelop's C++/C support plugin."
+        TYPE REQUIRED
+    )
+
+    if (CLANG_FOUND)
+        if (NOT CLANG_LIBCLANG_LIB)
+            message(FATAL_ERROR "Could not find the Clang C library: libclang")
+        endif()
+
+        ecm_optional_add_subdirectory(clang)
+    endif()
+    # END: Languages
 endif()
-# END: Languages
 
 # BEGIN: Project builders
 add_subdirectory(makebuilder)
