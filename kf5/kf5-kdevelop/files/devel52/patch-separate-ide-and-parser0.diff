diff --git CMakeLists.txt CMakeLists.txt
index d60aa8ccd07bbcad1727d0d9fd7648ecda352681..1f6c6d1d5fa42c31adcc002d42b98eea249d9af4 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -8,10 +8,17 @@ set(KDEVELOP_SOVERSION 52)
 # plugin versions listed in the .desktop files
 set(KDEV_PLUGIN_VERSION 30)
 
+option(KDEVELOP_BUILD_IDE "Build the IDE" ON)
+option(KDEVELOP_BUILD_CLANG_PARSER "Build the Clang-based C/C++ parser (formerly kdev-clang)" ON)
+
 # we need some parts of the ECM CMake helpers
 find_package (ECM 5.14.0 REQUIRED NO_MODULE)
 set(CMAKE_MODULE_PATH ${KDevelop_SOURCE_DIR}/cmake/modules ${ECM_MODULE_PATH})
 
+if ((NOT KDEVELOP_BUILD_IDE) AND (NOT KDEVELOP_BUILD_CLANG_PARSER))
+    message(FATAL_ERROR "KDEVELOP_BUILD_IDE and KDEVELOP_BUILD_CLANG_PARSER cannot both be OFF!")
+endif()
+
 include(KDECompilerSettings NO_POLICY_SCOPE) # needs to be first, as set policies influence following macros
 include(ECMOptionalAddSubdirectory)
 include(ECMInstallIcons)
@@ -61,16 +68,18 @@ find_package(KF5 ${KF5_DEP_VERSION} REQUIRED COMPONENTS
   Archive
   Notifications
 )
-find_package(KF5SysGuard CONFIG)
-set_package_properties(KF5SysGuard PROPERTIES
-    PURPOSE "Framework for process listing. Required for the 'Attach to Process' feature"
-    TYPE RECOMMENDED
-)
-find_package(KDevelop-PG-Qt 1.90.90 CONFIG)
-set_package_properties(KDevelop-PG-Qt PROPERTIES
-    PURPOSE "KDevelop parser generator library. Required for the QMake Builder/Manager plugin."
-    TYPE RECOMMENDED
-)
+if (KDEVELOP_BUILD_IDE)
+    find_package(KF5SysGuard CONFIG)
+    set_package_properties(KF5SysGuard PROPERTIES
+        PURPOSE "Framework for process listing. Required for the 'Attach to Process' feature"
+        TYPE RECOMMENDED
+    )
+    find_package(KDevelop-PG-Qt 1.90.90 CONFIG)
+    set_package_properties(KDevelop-PG-Qt PROPERTIES
+        PURPOSE "KDevelop parser generator library. Required for the QMake Builder/Manager plugin."
+        TYPE RECOMMENDED
+    )
+endif()
 
 find_package(SharedMimeInfo REQUIRED)
 
@@ -124,40 +133,44 @@ configure_file(config-kdevelop.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-kdevel
 add_subdirectory(kdevplatform)
 add_subdirectory(plugins)
 
-add_subdirectory(pics)
-add_subdirectory(app)
-add_subdirectory(app_templates)
-add_subdirectory(file_templates)
-add_subdirectory(shortcuts)
-add_subdirectory(doc)
+if (KDEVELOP_BUILD_IDE)
+    add_subdirectory(pics)
+    add_subdirectory(app)
+    add_subdirectory(app_templates)
+    add_subdirectory(file_templates)
+    add_subdirectory(shortcuts)
+    add_subdirectory(doc)
+endif()
 
 set(CMAKECONFIG_INSTALL_DIR "${KDE_INSTALL_CMAKEPACKAGEDIR}/KDevelop")
-configure_package_config_file("${CMAKE_CURRENT_SOURCE_DIR}/KDevelopConfig.cmake.in"
-                                  "${CMAKE_CURRENT_BINARY_DIR}/KDevelopConfig.cmake"
-                                  INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}
-)
 ecm_setup_version(${KDevelop_VERSION_MAJOR}.${KDevelop_VERSION_MINOR}.${KDevelop_VERSION_PATCH}
                   VARIABLE_PREFIX KDEVELOP
                   VERSION_HEADER "${CMAKE_CURRENT_BINARY_DIR}/kdevelop_version.h"
                   PACKAGE_VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/KDevelopConfigVersion.cmake"
 )
-install(FILES
-        "${CMAKE_CURRENT_BINARY_DIR}/kdevelop_version.h"
-        DESTINATION "${KDE_INSTALL_INCLUDEDIR}/kdevelop")
-install(FILES
-        "${CMAKE_CURRENT_BINARY_DIR}/KDevelopConfig.cmake"
-        "${CMAKE_CURRENT_BINARY_DIR}/KDevelopConfigVersion.cmake"
-        DESTINATION "${CMAKECONFIG_INSTALL_DIR}" )
-install(EXPORT KDevelopTargets DESTINATION "${CMAKECONFIG_INSTALL_DIR}" NAMESPACE KDev:: FILE KDevelopTargets.cmake)
-
-# kdebugsettings file
-install(FILES kdevelop.categories DESTINATION ${KDE_INSTALL_CONFDIR})
-
-# CTestCustom.cmake has to be in the CTEST_BINARY_DIR.
-# in the KDE build system, this is the same as CMAKE_BINARY_DIR.
-configure_file(${CMAKE_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_BINARY_DIR}/CTestCustom.cmake)
-
-install(FILES org.kde.kdevelop.appdata.xml DESTINATION ${KDE_INSTALL_METAINFODIR})
+if (KDEVELOP_BUILD_IDE)
+    configure_package_config_file("${CMAKE_CURRENT_SOURCE_DIR}/KDevelopConfig.cmake.in"
+                                      "${CMAKE_CURRENT_BINARY_DIR}/KDevelopConfig.cmake"
+                                      INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}
+    )
+    install(FILES
+            "${CMAKE_CURRENT_BINARY_DIR}/kdevelop_version.h"
+            DESTINATION "${KDE_INSTALL_INCLUDEDIR}/kdevelop")
+    install(FILES
+            "${CMAKE_CURRENT_BINARY_DIR}/KDevelopConfig.cmake"
+            "${CMAKE_CURRENT_BINARY_DIR}/KDevelopConfigVersion.cmake"
+            DESTINATION "${CMAKECONFIG_INSTALL_DIR}" )
+    install(EXPORT KDevelopTargets DESTINATION "${CMAKECONFIG_INSTALL_DIR}" NAMESPACE KDev:: FILE KDevelopTargets.cmake)
+
+    # kdebugsettings file
+    install(FILES kdevelop.categories DESTINATION ${KDE_INSTALL_CONFDIR})
+
+    # CTestCustom.cmake has to be in the CTEST_BINARY_DIR.
+    # in the KDE build system, this is the same as CMAKE_BINARY_DIR.
+    configure_file(${CMAKE_SOURCE_DIR}/CTestCustom.cmake ${CMAKE_BINARY_DIR}/CTestCustom.cmake)
+
+    install(FILES org.kde.kdevelop.appdata.xml DESTINATION ${KDE_INSTALL_METAINFODIR})
+endif()
 
 # Make it possible to use the po files fetched by the fetch-translations step
 ki18n_install(po)
diff --git kdevplatform/CMakeLists.txt kdevplatform/CMakeLists.txt
index 59a45499d8e018de570d5f83c0e2acfb7b0abe0a..86d496ced4e816b72b38d9f86ab38aea5556be49 100644
--- kdevplatform/CMakeLists.txt
+++ kdevplatform/CMakeLists.txt
@@ -15,6 +15,22 @@ set(CMAKECONFIG_INSTALL_DIR "${KDE_INSTALL_CMAKEPACKAGEDIR}/KDevPlatform")
 include(KDevPlatformMacros)
 include(KDevPlatformMacrosInternal)
 
+if (NOT KDEVELOP_BUILD_IDE)
+    # We cannot exclude this subdirectory because the clang plugin
+    # depends on certain of the library targets defined below.
+    # But we can reduce the build time and disk space overhead
+    # for items that won't be installed. We could disable LTO too
+    # but theoretically that would affect the plugin's performance.
+    string(REPLACE "-Ofast" "-Os" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-O3" "-Os" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-O2" "-Os" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-g" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
+    string(REPLACE "-Ofast" "-Os" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-O3" "-Os" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-O2" "-Os" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+    string(REPLACE "-g" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+endif()
+
 find_package(Grantlee5 CONFIG)
 set_package_properties(Grantlee5 PROPERTIES
     PURPOSE "Grantlee templating library, needed for file templates"
diff --git plugins/CMakeLists.txt plugins/CMakeLists.txt
index 44f7b94295615ea09c72cd48a9202d91fcd0b4f9..b8c5b5048738f731933b7cf2d97b773084166dc3 100644
--- plugins/CMakeLists.txt
+++ plugins/CMakeLists.txt
@@ -1,152 +1,165 @@
-# BEGIN: Analyzers
-add_subdirectory(cppcheck)
-if(UNIX AND NOT (APPLE OR CYGWIN))
-    add_subdirectory(heaptrack)
-endif()
-# END: Analyzers
-
-# BEGIN: Debuggers
-if(NOT WIN32)
-    # TODO: Make compile under Windows
-    add_subdirectory(debuggercommon)
-    add_subdirectory(lldb)
-    add_subdirectory(gdb)
-endif()
-# END: Debuggers
-
-# BEGIN: Documentation
-find_package(Qt5Help CONFIG)
-set_package_properties(Qt5Help PROPERTIES
-    PURPOSE "The Help module for the Qt toolkit, needed for the qthelp plugin"
-    URL "https://www.qt.io/"
-    TYPE OPTIONAL)
-if(Qt5Help_FOUND)
-    ecm_optional_add_subdirectory(qthelp)
-endif()
-ecm_optional_add_subdirectory(manpage)
-# END: Documentation
-
-# BEGIN: Formatters
-add_subdirectory(astyle)
-add_subdirectory(customscript)
-# END: Formatters
-
-# BEGIN: Languages
-ecm_optional_add_subdirectory(custom-definesandincludes)
-ecm_optional_add_subdirectory(qmljs)
-
-find_package(Clang 3.8)
-set(clangSearchHint "")
-if (NOT CLANG_FOUND)
-    set(clangSearchHint "Please install a package providing libclang. Either pass -DLLVM_ROOT=/path/to/llvm-prefix or install the 'llvm-config' command-line utility for auto-detection.")
-endif()
-set_package_properties(Clang PROPERTIES
-    DESCRIPTION "Clang libraries from the LLVM project. ${clangSearchHint}"
-    PURPOSE "Used for KDevelop's C++/C support plugin."
-    TYPE REQUIRED
-)
-
-if (CLANG_FOUND)
-    if (NOT CLANG_LIBCLANG_LIB)
-        message(FATAL_ERROR "Could not find the Clang C library: libclang")
+if (KDEVELOP_BUILD_IDE)
+    # BEGIN: Analyzers
+    add_subdirectory(cppcheck)
+    if(UNIX AND NOT (APPLE OR CYGWIN))
+        add_subdirectory(heaptrack)
     endif()
+    # END: Analyzers
+
+    # BEGIN: Debuggers
+    if(NOT WIN32)
+        # TODO: Make compile under Windows
+        add_subdirectory(debuggercommon)
+        add_subdirectory(lldb)
+        add_subdirectory(gdb)
+    endif()
+    # END: Debuggers
 
-    ecm_optional_add_subdirectory(clang)
-endif()
-# END: Languages
-
-# BEGIN: Project builders
-add_subdirectory(makebuilder)
-add_subdirectory(ninjabuilder)
-ecm_optional_add_subdirectory(cmakebuilder)
-if (KDevelop-PG-Qt_FOUND)
-    ecm_optional_add_subdirectory(qmakebuilder)
-endif()
-# END: Project builders
-
-# BEGIN: Project managers
-ecm_optional_add_subdirectory(cmake)
-ecm_optional_add_subdirectory(custommake)
-ecm_optional_add_subdirectory(custom-buildsystem)
-if (KDevelop-PG-Qt_FOUND)
-    ecm_optional_add_subdirectory(qmakemanager)
-endif()
-ecm_optional_add_subdirectory(genericprojectmanager)
-# END: Project managers
-
-# BEGIN: Runtimes
-add_subdirectory(android)
-if (UNIX)
-    add_subdirectory(docker)
-    add_subdirectory(flatpak)
-endif()
-# END: Runtimes
-
-# BEGIN: VCS
-ecm_optional_add_subdirectory(bazaar)
-ecm_optional_add_subdirectory(cvs)
-ecm_optional_add_subdirectory(git)
-ecm_optional_add_subdirectory(perforce)
-
-find_package(SubversionLibrary)
-set_package_properties(SubversionLibrary PROPERTIES
-    PURPOSE "Support for Subversion integration"
-    URL "http://subversion.tigris.org"
-    TYPE OPTIONAL)
-
-if(SubversionLibrary_FOUND)
-    ecm_optional_add_subdirectory(subversion)
+    # BEGIN: Documentation
+    find_package(Qt5Help CONFIG)
+    set_package_properties(Qt5Help PROPERTIES
+        PURPOSE "The Help module for the Qt toolkit, needed for the qthelp plugin"
+        URL "https://www.qt.io/"
+        TYPE OPTIONAL)
+    if(Qt5Help_FOUND)
+        ecm_optional_add_subdirectory(qthelp)
+    endif()
+    ecm_optional_add_subdirectory(manpage)
+    # END: Documentation
+
+    # BEGIN: Formatters
+    add_subdirectory(astyle)
+    add_subdirectory(customscript)
+    # END: Formatters
+
+    # BEGIN: Languages
+    ecm_optional_add_subdirectory(custom-definesandincludes)
+    ecm_optional_add_subdirectory(qmljs)
 endif()
+# END: KDEVELOP_BUILD_IDE
+
+if(KDEVELOP_BUILD_CLANG_PARSER)
+    if (NOT KDEVELOP_BUILD_IDE)
+        ecm_optional_add_subdirectory(custom-definesandincludes)
+    endif()
 
-add_subdirectory(vcschangesview)
-# END: VCS
-
-# BEGIN: Others
-add_subdirectory(appwizard)
-add_subdirectory(codeutils)
-add_subdirectory(contextbrowser)
-add_subdirectory(documentswitcher)
-add_subdirectory(documentview)
-add_subdirectory(execute)
-add_subdirectory(executescript)
-add_subdirectory(externalscript)
-add_subdirectory(filemanager)
-add_subdirectory(filetemplates)
-add_subdirectory(grepview)
-add_subdirectory(openwith)
-add_subdirectory(outlineview)
-add_subdirectory(patchreview)
-add_subdirectory(problemreporter)
-add_subdirectory(projectfilter)
-add_subdirectory(projectmanagerview)
-add_subdirectory(quickopen)
-add_subdirectory(sourceformatter)
-add_subdirectory(standardoutputview)
-add_subdirectory(switchtobuddy)
-add_subdirectory(testview)
-ecm_optional_add_subdirectory(classbrowser)
-ecm_optional_add_subdirectory(executeplasmoid)
-ecm_optional_add_subdirectory(ghprovider)
-ecm_optional_add_subdirectory(kdeprovider)
-ecm_optional_add_subdirectory(konsole)
-if (Qt5QuickWidgets_FOUND)
-    add_subdirectory(welcomepage)
+    find_package(Clang 3.8)
+    set(clangSearchHint "")
+    if (NOT CLANG_FOUND)
+        set(clangSearchHint "Please install a package providing libclang. Either pass -DLLVM_ROOT=/path/to/llvm-prefix or install the 'llvm-config' command-line utility for auto-detection.")
+    endif()
+    set_package_properties(Clang PROPERTIES
+        DESCRIPTION "Clang libraries from the LLVM project. ${clangSearchHint}"
+        PURPOSE "Used for KDevelop's C++/C support plugin."
+        TYPE REQUIRED
+    )
+
+    if (CLANG_FOUND)
+        if (NOT CLANG_LIBCLANG_LIB)
+            message(FATAL_ERROR "Could not find the Clang C library: libclang")
+        endif()
+
+        ecm_optional_add_subdirectory(clang)
+    endif()
+    # END: Languages
 endif()
+# END: KDEVELOP_BUILD_CLANG_PARSER
+
+if (KDEVELOP_BUILD_IDE)
+    # BEGIN: Project builders
+    add_subdirectory(makebuilder)
+    add_subdirectory(ninjabuilder)
+    ecm_optional_add_subdirectory(cmakebuilder)
+    if (KDevelop-PG-Qt_FOUND)
+        ecm_optional_add_subdirectory(qmakebuilder)
+    endif()
+    # END: Project builders
+
+    # BEGIN: Project managers
+    ecm_optional_add_subdirectory(cmake)
+    ecm_optional_add_subdirectory(custommake)
+    ecm_optional_add_subdirectory(custom-buildsystem)
+    if (KDevelop-PG-Qt_FOUND)
+        ecm_optional_add_subdirectory(qmakemanager)
+    endif()
+    ecm_optional_add_subdirectory(genericprojectmanager)
+    # END: Project managers
+
+    # BEGIN: Runtimes
+    add_subdirectory(android)
+    if (UNIX)
+        add_subdirectory(docker)
+        add_subdirectory(flatpak)
+    endif()
+    # END: Runtimes
+
+    # BEGIN: VCS
+    ecm_optional_add_subdirectory(bazaar)
+    ecm_optional_add_subdirectory(cvs)
+    ecm_optional_add_subdirectory(git)
+    ecm_optional_add_subdirectory(perforce)
+
+    find_package(SubversionLibrary)
+    set_package_properties(SubversionLibrary PROPERTIES
+        PURPOSE "Support for Subversion integration"
+        URL "http://subversion.tigris.org"
+        TYPE OPTIONAL)
 
-find_package(OktetaKastenControllers 0.3.1)
-set_package_properties(OktetaKastenControllers PROPERTIES
-    PURPOSE "Required for building Okteta KDevelop plugin."
-    URL "http://kde.org/"
-    TYPE OPTIONAL)
-if (OktetaKastenControllers_FOUND)
-    find_package( KastenControllers )
+    if(SubversionLibrary_FOUND)
+        ecm_optional_add_subdirectory(subversion)
+    endif()
+
+    add_subdirectory(vcschangesview)
+    # END: VCS
+
+    # BEGIN: Others
+    add_subdirectory(appwizard)
+    add_subdirectory(codeutils)
+    add_subdirectory(contextbrowser)
+    add_subdirectory(documentswitcher)
+    add_subdirectory(documentview)
+    add_subdirectory(execute)
+    add_subdirectory(executescript)
+    add_subdirectory(externalscript)
+    add_subdirectory(filemanager)
+    add_subdirectory(filetemplates)
+    add_subdirectory(grepview)
+    add_subdirectory(openwith)
+    add_subdirectory(outlineview)
+    add_subdirectory(patchreview)
+    add_subdirectory(problemreporter)
+    add_subdirectory(projectfilter)
+    add_subdirectory(projectmanagerview)
+    add_subdirectory(quickopen)
+    add_subdirectory(sourceformatter)
+    add_subdirectory(standardoutputview)
+    add_subdirectory(switchtobuddy)
+    add_subdirectory(testview)
+    ecm_optional_add_subdirectory(classbrowser)
+    ecm_optional_add_subdirectory(executeplasmoid)
+    ecm_optional_add_subdirectory(ghprovider)
+    ecm_optional_add_subdirectory(kdeprovider)
+    ecm_optional_add_subdirectory(konsole)
+    if (Qt5QuickWidgets_FOUND)
+        add_subdirectory(welcomepage)
+    endif()
 
-    set_package_properties(KastenControllers PROPERTIES
+    find_package(OktetaKastenControllers 0.3.1)
+    set_package_properties(OktetaKastenControllers PROPERTIES
         PURPOSE "Required for building Okteta KDevelop plugin."
         URL "http://kde.org/"
         TYPE OPTIONAL)
+    if (OktetaKastenControllers_FOUND)
+        find_package( KastenControllers )
+
+        set_package_properties(KastenControllers PROPERTIES
+            PURPOSE "Required for building Okteta KDevelop plugin."
+            URL "http://kde.org/"
+            TYPE OPTIONAL)
+    endif()
+    if (OktetaKastenControllers_FOUND AND KastenControllers_FOUND)
+        add_subdirectory(okteta)
+    endif()
+    # END: Others
 endif()
-if (OktetaKastenControllers_FOUND AND KastenControllers_FOUND)
-    add_subdirectory(okteta)
-endif()
-# END: Others
+# END: KDEVELOP_BUILD_IDE
