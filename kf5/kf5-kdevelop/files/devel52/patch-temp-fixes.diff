diff --git plugins/cmake/cmakemanager.cpp plugins/cmake/cmakemanager.cpp
index 5c6a11fb7a9b8ca8af3699464f382fde4e91151f..59aed82648c2a23fc3026dde079c377ecbf2542d 100644
--- plugins/cmake/cmakemanager.cpp
+++ plugins/cmake/cmakemanager.cpp
@@ -174,6 +174,8 @@ private:
         server->deleteLater();
         server = nullptr;
 
+        qCWarning(CMAKE) << "CMake server not available, using compile_commands.json to import" << project->name();
+
         // parse the JSON file
         CMakeImportJsonJob* job = new CMakeImportJsonJob(project, this);
 
diff --git plugins/quickopen/quickopenplugin.cpp plugins/quickopen/quickopenplugin.cpp
index 0da101cdda0eeecc131e5a6625d3389cb4eef390..eef69c4a21e5db2bd961f1e2aff7011cf04c8b84 100644
--- plugins/quickopen/quickopenplugin.cpp
+++ plugins/quickopen/quickopenplugin.cpp
@@ -844,7 +844,7 @@ struct CreateOutlineDialog
                     // already called 'widget->show()'.
                     auto list = dialog->widget()->ui.list;
                     QMetaObject::invokeMethod(list, "setCurrentIndex", Qt::QueuedConnection, Q_ARG(QModelIndex, index));
-                    QMetaObject::invokeMethod(list, "scrollTo", Qt::QueuedConnection, Q_ARG(QModelIndex, index), Q_ARG(QAbstractItemView::ScrollHint, QAbstractItemView::PositionAtCenter));
+                    QMetaObject::invokeMethod(list, "scrollTo", Qt::QueuedConnection, Q_ARG(const QModelIndex, index), Q_ARG(QAbstractItemView::ScrollHint, QAbstractItemView::PositionAtCenter));
                 }
                 ++num;
             }
diff --git kdevplatform/language/duchain/topducontextdynamicdata.cpp kdevplatform/language/duchain/topducontextdynamicdata.cpp
index c56fac0..ec7cd23 100644
--- kdevplatform/language/duchain/topducontextdynamicdata.cpp
+++ kdevplatform/language/duchain/topducontextdynamicdata.cpp
@@ -407,7 +407,7 @@ Item TopDUContextDynamicData::DUChainItemStorage<Item>::getItemForIndex(uint ind
                                     "Potentially, the context has been deleted without deleting its children.");
     item->rebuildDynamicData(parent, index);
   } else {
-    qCWarning(LANGUAGE) << "invalid item for index" << index << offsets.size() << offsets.value(realIndex).dataOffset;
+    qCDebug(LANGUAGE) << "invalid item for index" << index << offsets.size() << offsets.value(realIndex).dataOffset;
   }
 
   return item;
diff --git kdevplatform/sublime/idealcontroller.cpp kdevplatform/sublime/idealcontroller.cpp
index 03715233b..b3ef57ff6 100644
--- kdevplatform/sublime/idealcontroller.cpp
+++ kdevplatform/sublime/idealcontroller.cpp
@@ -40,6 +40,8 @@
 #include "idealdockwidget.h"
 #include "idealbuttonbarwidget.h"
 
+#include <QDebug>
+
 using namespace Sublime;
 
 IdealController::IdealController(Sublime::MainWindow* mainWindow):
@@ -150,7 +151,14 @@ void IdealController::dockLocationChanged(Qt::DockWidgetArea area)
 {
     IdealDockWidget *dock = qobject_cast<IdealDockWidget*>(sender());
     View *view = dock->view();
-    QAction* action = m_view_to_action.value(view);
+    QAction* action = nullptr;
+    if (m_view_to_action.contains(view)) {
+        action = m_view_to_action.value(view);
+    }
+    if (!action) {
+        qCritical() << Q_FUNC_INFO << "View" << view << "has no known hide/shown action";
+        return;
+    }
 
     if (dock->dockWidgetArea() == area) {
         // this event can happen even when dock changes its location within the same area
@@ -240,8 +248,15 @@ void IdealController::raiseView(View* view, RaiseMode mode)
     ///       for toolviews of the same type.
     mode = HideOtherViews;
 
-    QAction* action = m_view_to_action.value(view);
+    QAction* action = nullptr;
+    if (m_view_to_action.contains(view)) {
+        action = m_view_to_action.value(view);
+    }
     Q_ASSERT(action);
+    if (!action) {
+        qCritical() << Q_FUNC_INFO << "View" << view << "has no known hide/shown action";
+        return;
+    }
 
     QWidget *focusWidget = m_mainWindow->focusWidget();
 
@@ -297,7 +312,7 @@ QWidget* IdealController::statusBarLocation() const
 
 QAction* IdealController::actionForView(View* view) const
 {
-    return m_view_to_action.value(view);
+    return m_view_to_action.contains(view) ? m_view_to_action.value(view) : nullptr;
 }
 
 void IdealController::setShowDockStatus(Qt::DockWidgetArea area, bool checked)
@@ -326,8 +341,14 @@ QAction* IdealController::actionForArea(Qt::DockWidgetArea area) const
 
 void IdealController::removeView(View* view, bool nondestructive)
 {
-    Q_ASSERT(m_view_to_action.contains(view));
-    QAction* action = m_view_to_action.value(view);
+    QAction* action = nullptr;
+    if (m_view_to_action.contains(view)) {
+        action = m_view_to_action.value(view);
+    }
+    if (!action) {
+        qCritical() << Q_FUNC_INFO << "View" << view << "has no known hide/shown action";
+        return;
+    }
 
     QWidget *viewParent = view->widget()->parentWidget();
     IdealDockWidget *dock = qobject_cast<IdealDockWidget *>(viewParent);
