diff --git plugins/projectmanagerview/projectmanagerview.cpp plugins/projectmanagerview/projectmanagerview.cpp
index 54835bf..5598ceb 100644
--- plugins/projectmanagerview/projectmanagerview.cpp
+++ plugins/projectmanagerview/projectmanagerview.cpp
@@ -141,6 +141,7 @@ ProjectManagerView::ProjectManagerView( ProjectManagerViewPlugin* plugin, QWidge
     // Need to set this to get horizontal scrollbar. Also needs to be done after
     // the setModel call
     m_ui->projectTreeView->header()->setSectionResizeMode( QHeaderView::ResizeToContents );
+    m_ui->projectTreeView->header()->setStretchLastSection(false);
 }
 
 bool ProjectManagerView::eventFilter(QObject* obj, QEvent* event)
diff --git plugins/projectmanagerview/projectmanagerview.ui plugins/projectmanagerview/projectmanagerview.ui
index 3b2a78a..9d8214a 100644
--- plugins/projectmanagerview/projectmanagerview.ui
+++ plugins/projectmanagerview/projectmanagerview.ui
@@ -17,7 +17,16 @@
    <string>Project Manager</string>
   </property>
   <layout class="QHBoxLayout" name="horizontalLayout">
-   <property name="margin">
+   <property name="leftMargin">
+    <number>0</number>
+   </property>
+   <property name="topMargin">
+    <number>0</number>
+   </property>
+   <property name="rightMargin">
+    <number>0</number>
+   </property>
+   <property name="bottomMargin">
     <number>0</number>
    </property>
    <item>
@@ -38,6 +47,12 @@
          <property name="whatsThis">
           <string>Project Overview</string>
          </property>
+         <property name="sizeAdjustPolicy">
+          <enum>QAbstractScrollArea::AdjustToContents</enum>
+         </property>
+         <property name="textElideMode">
+          <enum>Qt::ElideNone</enum>
+         </property>
          <attribute name="headerVisible">
           <bool>false</bool>
          </attribute>
diff --git plugins/projectmanagerview/projectmodelitemdelegate.cpp plugins/projectmanagerview/projectmodelitemdelegate.cpp
index 3d59930..c82bbe5 100644
--- plugins/projectmanagerview/projectmodelitemdelegate.cpp
+++ plugins/projectmanagerview/projectmodelitemdelegate.cpp
@@ -113,7 +113,7 @@ void ProjectModelItemDelegate::paint(QPainter* painter, const QStyleOptionViewIt
 void ProjectModelItemDelegate::drawBranchName(QPainter* painter, const QStyleOptionViewItem& option,
                                               const QRect& rect, const QString& branchName) const
 {
-    QString text = option.fontMetrics.elidedText(branchName, Qt::ElideRight, rect.width());
+    QString text = option.fontMetrics.elidedText(branchName, Qt::ElideNone, rect.width());
 
     bool selected = option.state & QStyle::State_Selected;
     QPalette::ColorGroup colorGroup = selected ? QPalette::Active : QPalette::Disabled;
@@ -156,5 +156,5 @@ void ProjectModelItemDelegate::drawDisplay(QPainter* painter, const QStyleOption
     }
 
     QFontMetrics fm(painter->fontMetrics());
-    painter->drawText(rect, fm.elidedText(text, Qt::ElideRight, rect.width()));
+    painter->drawText(rect, fm.elidedText(text, Qt::ElideNone, rect.width()));
 }
diff --git plugins/projectmanagerview/projecttreeview.cpp plugins/projectmanagerview/projecttreeview.cpp
index 69f7250..425d357 100644
--- plugins/projectmanagerview/projecttreeview.cpp
+++ plugins/projectmanagerview/projecttreeview.cpp
@@ -29,6 +29,7 @@
 #include <QHeaderView>
 #include <QMenu>
 #include <QPainter>
+#include <QScrollBar>
 
 #include <KConfigGroup>
 #include <KLocalizedString>
@@ -114,6 +115,9 @@ void popupContextMenu_appendActions(QMenu& menu, const QList<QAction*>& actions)
 
 ProjectTreeView::ProjectTreeView( QWidget *parent )
         : QTreeView( parent ), m_previousSelection ( nullptr )
+#ifdef Q_OS_MACOS
+        , m_isCocoa(QGuiApplication::platformName() == QStringLiteral("cocoa"))
+#endif
 {
     header()->hide();
 
@@ -130,6 +134,8 @@ ProjectTreeView::ProjectTreeView( QWidget *parent )
     setAutoExpandDelay(300);
     setItemDelegate(new ProjectModelItemDelegate(this));
 
+    setTextElideMode(Qt::ElideNone);
+
     connect( this, &ProjectTreeView::customContextMenuRequested, this, &ProjectTreeView::popupContextMenu );
     connect( this, &ProjectTreeView::activated, this, &ProjectTreeView::slotActivated );
 
@@ -139,6 +145,10 @@ ProjectTreeView::ProjectTreeView( QWidget *parent )
              this, &ProjectTreeView::restoreState );
     connect( ICore::self()->projectController(), &IProjectController::projectClosed,
              this, &ProjectTreeView::projectClosed );
+
+    // install the event filter that will filter out the horizontal component
+    // from scrolling in response to QWheelEvents (i.e. touch input)
+    viewport()->installEventFilter(this);
 }
 
 ProjectTreeView::~ProjectTreeView()
@@ -510,6 +520,43 @@ void ProjectTreeView::keyPressEvent(QKeyEvent* event)
         QTreeView::keyPressEvent(event);
 }
 
+void ProjectTreeView::resizeEvent(QResizeEvent* event)
+{
+    header()->setMinimumSectionSize(viewport()->width());
+    QTreeView::resizeEvent(event);
+}
+
+bool ProjectTreeView::eventFilter(QObject* object, QEvent* event)
+{
+    switch (event->type()) {
+        case QEvent::Wheel: {
+            QWheelEvent *e = static_cast<QWheelEvent*>(event);
+            if ((e->pixelDelta().x() !=0 || e->angleDelta().x()!= 0
+                || e->orientation() == Qt::Orientation::Horizontal)
+#ifdef Q_OS_MACOS
+                // Cocoa: allow horizontal scrolling controlled by a physical mouse wheel
+                && (!m_isCocoa || e->source() != Qt::MouseEventNotSynthesized)
+#endif
+            ){
+                QPoint pixelDelta(e->pixelDelta()), angleDelta(e->angleDelta());
+                pixelDelta.setX(0);
+                angleDelta.setX(0);
+                // discard the original event
+                e->ignore();
+                if (!pixelDelta.isNull() || !angleDelta.isNull()) {
+                    QWheelEvent filtered(e->posF(), e->globalPosF(), pixelDelta, angleDelta,
+                        e->delta(), Qt::Orientation::Vertical, e->buttons(),
+                        e->modifiers(), e->phase(), Qt::MouseEventSynthesizedByApplication, e->inverted());
+                    QCoreApplication::sendEvent(object, &filtered);
+                }
+                return true;
+            }
+            break;
+        }
+    }
+    return QTreeView::eventFilter(object, event);
+}
+
 void ProjectTreeView::drawBranches(QPainter* painter, const QRect& rect, const QModelIndex& index) const
 {
     if (WidgetColorizer::colorizeByProject()) {
diff --git plugins/projectmanagerview/projecttreeview.h plugins/projectmanagerview/projecttreeview.h
index f143503..b6ed6fe 100644
--- plugins/projectmanagerview/projecttreeview.h
+++ plugins/projectmanagerview/projecttreeview.h
@@ -61,7 +61,9 @@ class ProjectTreeView: public QTreeView
 
     protected:
         void keyPressEvent(QKeyEvent *event) override;
+        void resizeEvent(QResizeEvent *event) override;
         void dropEvent(QDropEvent* event) override;
+        bool eventFilter(QObject*, QEvent*) override;
         void drawBranches(QPainter* painter, const QRect& rect, const QModelIndex& index) const override;
 
     private:
@@ -73,6 +75,7 @@ class ProjectTreeView: public QTreeView
         QPointer<KDevelop::IProject> m_previousSelection;
         QPointer<KDevelop::NavigationToolTip> m_tooltip;
         QPersistentModelIndex m_idx;
+        bool m_isCocoa;
 };
 
 #endif // KDEVPLATFORM_PLUGIN_PROJECTTREEVIEW_H
