diff --git a/src/tools/KDbUtils.cpp b/src/tools/KDbUtils.cpp
index 4c6170a..22cc2d4 100644
--- a/src/tools/KDbUtils.cpp
+++ b/src/tools/KDbUtils.cpp
@@ -213,7 +213,10 @@ bool StaticSetOfStrings::contains(const QByteArray& string) const
 
 //---------
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
+
+#include <sys/stat.h>
+
 //! Internal, from kdelibs' kstandarddirs.cpp
 static QString getBundle(const QString& path, bool ignore)
 {
@@ -241,7 +244,7 @@ static QString getBundle(const QString& path, bool ignore)
 //! Internal, from kdelibs' kstandarddirs.cpp
 static QString checkExecutable(const QString& path, bool ignoreExecBit)
 {
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     QString bundle = getBundle(path, ignoreExecBit);
     if (!bundle.isEmpty()) {
         return bundle;
@@ -249,7 +252,7 @@ static QString checkExecutable(const QString& path, bool ignoreExecBit)
 #endif
     QFileInfo info(path);
     QFileInfo orig = info;
-#if defined(Q_OS_DARWIN) || defined(Q_OS_MAC)
+#if defined(Q_OS_DARWIN) || defined(Q_OS_MACOS)
     FILE *file;
     if (file = fopen(orig.absoluteFilePath().toUtf8().constData(), "r")) {
         fclose(file);
diff --git a/src/tools/KDbUtils_p.h b/src/tools/KDbUtils_p.h
index 81d62bea486c5e1184b0b2c5aae61a6dd6f249a3..215424ee8ed8efb25f9abd6a1618ffe12e2b665d 100644
--- a/src/tools/KDbUtils_p.h
+++ b/src/tools/KDbUtils_p.h
@@ -46,7 +46,7 @@ void qAsConst(const T &&) Q_DECL_EQ_DELETE;
 //! @def KDB_SHARED_LIB_EXTENSION operating system-dependent extension for shared library files
 #if defined(Q_OS_WIN)
 #define KDB_SHARED_LIB_EXTENSION ".dll"
-#elif defined(Q_OS_MAC)
+#elif defined(Q_OS_MACOS)
 // shared libraries indeed have a dylib extension on OS X, but most apps use .so for plugins
 #define KDB_SHARED_LIB_EXTENSION ".so"
 #else

diff --git a/src/drivers/sqlite/dump/CMakeLists.txt b/src/drivers/sqlite/dump/CMakeLists.txt
index af134d8..cfffb5c 100644
--- a/src/drivers/sqlite/dump/CMakeLists.txt
+++ b/src/drivers/sqlite/dump/CMakeLists.txt
@@ -1,6 +1,9 @@
+include(ECMMarkNonGuiExecutable)
+
 set(kdb_sqlite_dump_tool_SRCS main.cpp shell.c README)
 
 add_executable(${KDB_SQLITE_DUMP_TOOL} ${kdb_sqlite_dump_tool_SRCS})
+ecm_mark_nongui_executable(${KDB_SQLITE_DUMP_TOOL})
 
 target_link_libraries(${KDB_SQLITE_DUMP_TOOL}
     PRIVATE
