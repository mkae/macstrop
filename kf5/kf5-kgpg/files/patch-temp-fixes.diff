--- orig.keysmanager.cpp	2017-11-05 01:47:56.000000000 +0100
+++ keysmanager.cpp	2017-11-28 17:26:29.000000000 +0100
@@ -951,11 +951,13 @@
 	KGpgUatNode *und = nd->toUatNode();
 	KGpgKeyNode *parent = und->getParentKeyNode();
 
-	QString mess = i18n("<qt>Are you sure you want to delete Photo id <b>%1</b><br/>from key <b>%2 &lt;%3&gt;</b>?</qt>",
-				und->getId(), parent->getName(), parent->getEmail());
-
-	if (KMessageBox::warningContinueCancel(this, mess) != KMessageBox::Continue)
-		return;
+    if (parent) {
+        QString mess = i18n("<qt>Are you sure you want to delete Photo id <b>%1</b><br/>from key <b>%2 &lt;%3&gt;</b>?</qt>",
+                    und->getId(), parent->getName(), parent->getEmail());
+
+        if (KMessageBox::warningContinueCancel(this, mess) != KMessageBox::Continue)
+            return;
+    }
 
 	KGpgDelUid *deluid = new KGpgDelUid(this, und);
 	connect(deluid, &KGpgDelUid::done, this, &KeysManager::slotDelPhotoFinished);
@@ -1212,6 +1214,9 @@
 
 void KeysManager::setDefaultKeyNode(KGpgKeyNode *key)
 {
+    if (!key) {
+        return;
+    }
 	const QString &newID(key->getId());
 
 	if (newID == KGpgSettings::defaultKey())
@@ -1286,8 +1291,9 @@
 		m_popupsig->exec(globpos);
 	} else if (itype == ITYPE_UID) {
 		if (cnt == 1) {
-			KGpgKeyNode *knd = ndlist.at(0)->toUidNode()->getParentKeyNode();
-			setPrimUid->setEnabled(knd->getType() & ITYPE_SECRET);
+			if (KGpgKeyNode *knd = ndlist.at(0)->toUidNode()->getParentKeyNode()) {
+                setPrimUid->setEnabled(knd->getType() & ITYPE_SECRET);
+            }
 		}
 		m_popupuid->exec(globpos);
 	} else if ((itype == ITYPE_UAT) && (cnt == 1)) {
@@ -1569,6 +1575,9 @@
 	KGpgNode *nd = iview->selectedNode();
 	KGpgUatNode *und = nd->toUatNode();
 	KGpgKeyNode *parent = und->getParentKeyNode();
+    if (!parent) {
+        return;
+    }
 	KService::Ptr ptr = list.first();
 
 	KProcess p;
@@ -1637,11 +1646,13 @@
 	case ITYPE_PUBLIC:
 	case ITYPE_PAIR: {
 		KGpgKeyNode *k = n->toKeyNode();
-		QPointer<KgpgKeyInfo> opts = new KgpgKeyInfo(k, imodel, this);
-		connect(opts.data(), &KgpgKeyInfo::keyNeedsRefresh, imodel, static_cast<void(KGpgItemModel::*)(KGpgKeyNode *)>(&KGpgItemModel::refreshKey));
-		connect(opts->keychange, &KGpgChangeKey::keyNeedsRefresh, imodel, static_cast<void(KGpgItemModel::*)(KGpgKeyNode *)>(&KGpgItemModel::refreshKey));
-		opts->exec();
-		delete opts;
+        if (k) {
+            QPointer<KgpgKeyInfo> opts = new KgpgKeyInfo(k, imodel, this);
+            connect(opts.data(), &KgpgKeyInfo::keyNeedsRefresh, imodel, static_cast<void(KGpgItemModel::*)(KGpgKeyNode *)>(&KGpgItemModel::refreshKey));
+            connect(opts->keychange, &KGpgChangeKey::keyNeedsRefresh, imodel, static_cast<void(KGpgItemModel::*)(KGpgKeyNode *)>(&KGpgItemModel::refreshKey));
+            opts->exec();
+            delete opts;
+        }
 	}
 	default:
 		return;
@@ -1680,10 +1691,12 @@
 		return;
 	}
 
-	QPointer<KgpgKeyInfo> opts = new KgpgKeyInfo(kn, imodel, this);
-	connect(opts.data(), &KgpgKeyInfo::keyNeedsRefresh, imodel, static_cast<void(KGpgItemModel::*)(KGpgKeyNode *)>(&KGpgItemModel::refreshKey));
-	opts->exec();
-	delete opts;
+	if (kn) {
+        QPointer<KgpgKeyInfo> opts = new KgpgKeyInfo(kn, imodel, this);
+        connect(opts.data(), &KgpgKeyInfo::keyNeedsRefresh, imodel, static_cast<void(KGpgItemModel::*)(KGpgKeyNode *)>(&KGpgItemModel::refreshKey));
+        opts->exec();
+        delete opts;
+    }
 }
 
 void KeysManager::deleteGroup()
@@ -1811,32 +1824,36 @@
 		KGpgKeyNode *nd = tmplist.at(0)->toKeyNode();
 		QString opt;
 
-		if (nd->getEmail().isEmpty())
-			opt = i18n("<qt>You are about to sign key:<br /><br />%1<br />ID: %2<br />Fingerprint: <br /><b>%3</b>.<br /><br />"
-					"You should check the key fingerprint by phoning or meeting the key owner to be sure that someone "
-					"is not trying to intercept your communications.</qt>",
-					nd->getName(), nd->getId().right(8), nd->getBeautifiedFingerprint());
-		else
-			opt = i18n("<qt>You are about to sign key:<br /><br />%1 (%2)<br />ID: %3<br />Fingerprint: <br /><b>%4</b>.<br /><br />"
-					"You should check the key fingerprint by phoning or meeting the key owner to be sure that someone "
-					"is not trying to intercept your communications.</qt>",
-					nd->getName(), nd->getEmail(), nd->getId().right(8), nd->getBeautifiedFingerprint());
-
-		if (KMessageBox::warningContinueCancel(this, opt) != KMessageBox::Continue) {
-			return;
-		}
-		signList.append(nd);
+        if (nd) {
+            if (nd->getEmail().isEmpty())
+                opt = i18n("<qt>You are about to sign key:<br /><br />%1<br />ID: %2<br />Fingerprint: <br /><b>%3</b>.<br /><br />"
+                        "You should check the key fingerprint by phoning or meeting the key owner to be sure that someone "
+                        "is not trying to intercept your communications.</qt>",
+                        nd->getName(), nd->getId().right(8), nd->getBeautifiedFingerprint());
+            else
+                opt = i18n("<qt>You are about to sign key:<br /><br />%1 (%2)<br />ID: %3<br />Fingerprint: <br /><b>%4</b>.<br /><br />"
+                        "You should check the key fingerprint by phoning or meeting the key owner to be sure that someone "
+                        "is not trying to intercept your communications.</qt>",
+                        nd->getName(), nd->getEmail(), nd->getId().right(8), nd->getBeautifiedFingerprint());
+
+            if (KMessageBox::warningContinueCancel(this, opt) != KMessageBox::Continue) {
+                return;
+            }
+            signList.append(nd);
+        }
 	} else {
 		QStringList signKeyList;
 		for (KGpgNode *n : tmplist) {
 			const KGpgKeyNode *nd = n->toKeyNode();
 
-			if (nd->getEmail().isEmpty())
-				signKeyList += i18nc("Name: ID", "%1: %2", nd->getName(), nd->getBeautifiedFingerprint());
-			else
-				signKeyList += i18nc("Name (Email): ID", "%1 (%2): %3", nd->getName(), nd->getEmail(), nd->getBeautifiedFingerprint());
+            if (nd) {
+                if (nd->getEmail().isEmpty())
+                    signKeyList += i18nc("Name: ID", "%1: %2", nd->getName(), nd->getBeautifiedFingerprint());
+                else
+                    signKeyList += i18nc("Name (Email): ID", "%1 (%2): %3", nd->getName(), nd->getEmail(), nd->getBeautifiedFingerprint());
 
-			signList.append(n->toSignableNode());
+                signList.append(n->toSignableNode());
+            }
 		}
 
 		if (KMessageBox::Continue != KMessageBox::warningContinueCancelList(this,
@@ -1895,19 +1912,21 @@
 			pnd = nd->getParentKeyNode()->toKeyNode();
 		QString opt;
 
-		if (nd->getEmail().isEmpty())
-			opt = i18n("<qt>You are about to sign user id:<br /><br />%1<br />ID: %2<br />Fingerprint: <br /><b>%3</b>.<br /><br />"
-			"You should check the key fingerprint by phoning or meeting the key owner to be sure that someone "
-			"is not trying to intercept your communications.</qt>", nd->getName(), nd->getId(), pnd->getBeautifiedFingerprint());
-		else
-			opt = i18n("<qt>You are about to sign user id:<br /><br />%1 (%2)<br />ID: %3<br />Fingerprint: <br /><b>%4</b>.<br /><br />"
-			"You should check the key fingerprint by phoning or meeting the key owner to be sure that someone "
-			"is not trying to intercept your communications.</qt>", nd->getName(), nd->getEmail(), nd->getId(), pnd->getBeautifiedFingerprint());
-
-		if (KMessageBox::warningContinueCancel(this, opt) != KMessageBox::Continue) {
-			return;
-		}
-		signList.append(nd);
+        if (pnd) {
+            if (nd->getEmail().isEmpty())
+                opt = i18n("<qt>You are about to sign user id:<br /><br />%1<br />ID: %2<br />Fingerprint: <br /><b>%3</b>.<br /><br />"
+                "You should check the key fingerprint by phoning or meeting the key owner to be sure that someone "
+                "is not trying to intercept your communications.</qt>", nd->getName(), nd->getId(), pnd->getBeautifiedFingerprint());
+            else
+                opt = i18n("<qt>You are about to sign user id:<br /><br />%1 (%2)<br />ID: %3<br />Fingerprint: <br /><b>%4</b>.<br /><br />"
+                "You should check the key fingerprint by phoning or meeting the key owner to be sure that someone "
+                "is not trying to intercept your communications.</qt>", nd->getName(), nd->getEmail(), nd->getId(), pnd->getBeautifiedFingerprint());
+
+            if (KMessageBox::warningContinueCancel(this, opt) != KMessageBox::Continue) {
+                return;
+            }
+            signList.append(nd);
+        }
 	} else {
 		QStringList signKeyList;
 
@@ -1915,14 +1934,16 @@
 			const KGpgKeyNode *pnd = (nd->getType() & (ITYPE_UID | ITYPE_UAT)) ?
 					nd->getParentKeyNode()->toKeyNode() : nd->toKeyNode();
 
-			if (nd->getEmail().isEmpty())
-				signKeyList += i18nc("Name: ID", "%1: %2",
-					nd->getName(), pnd->getBeautifiedFingerprint());
-			else
-				signKeyList += i18nc("Name (Email): ID", "%1 (%2): %3",
-					nd->getName(), nd->getEmail(), pnd->getBeautifiedFingerprint());
+            if (pnd) {
+                if (nd->getEmail().isEmpty())
+                    signKeyList += i18nc("Name: ID", "%1: %2",
+                        nd->getName(), pnd->getBeautifiedFingerprint());
+                else
+                    signKeyList += i18nc("Name (Email): ID", "%1 (%2): %3",
+                        nd->getName(), nd->getEmail(), pnd->getBeautifiedFingerprint());
 
-			signList.append(nd->toSignableNode());
+                signList.append(nd->toSignableNode());
+            }
 		}
 
 		if (KMessageBox::warningContinueCancelList(this,
@@ -1986,6 +2007,9 @@
 		ta = static_cast<KGpgSignTransactionHelper *>(static_cast<KGpgSignKey *>(sender()));
 	}
 	KGpgKeyNode *nd = const_cast<KGpgKeyNode *>(ta->getKey());
+    if (!nd) {
+        return;
+    }
 	const bool localsign = ta->getLocal();
 	const int checklevel = ta->getChecking();
 	const QString signer(ta->getSigner());
@@ -2040,7 +2064,7 @@
 		case KgpgCore::ITYPE_PAIR:
 		case KgpgCore::ITYPE_PUBLIC: {
 			KGpgKeyNode *knd = qobject_cast<KGpgKeyNode *>(nd);
-			if (!knd->wasExpanded())
+			if (knd && !knd->wasExpanded())
 				knd->getChildCount();
 			}
 		}
@@ -2317,6 +2341,9 @@
 {
 	QStringList groupNames;
 
+    if (!node) {
+        return;
+    }
 	const auto groups = node->getGroups();
 	for (const KGpgGroupNode *gnd : groups)
 		groupNames << gnd->getName();
@@ -2362,6 +2389,9 @@
 {
 	KGpgKeyNode *nd = iview->selectedNode()->toKeyNode();
 	Q_ASSERT(nd != Q_NULLPTR);
+    if (!nd) {
+        return;
+    }
 
 	// delete a key
 	int result = KMessageBox::warningContinueCancel(this,
@@ -2391,12 +2421,14 @@
 void KeysManager::secretKeyDeleted(int retcode)
 {
 	KGpgKeyNode *delkey = m_delkey->keys.at(0);
-	if (retcode == 0) {
-		KMessageBox::information(this, i18n("Key <b>%1</b> deleted.", delkey->getBeautifiedFingerprint()), i18n("Delete key"));
-		imodel->delNode(delkey);
-	} else {
-		KMessageBox::error(this, i18n("Deleting key <b>%1</b> failed.", delkey->getBeautifiedFingerprint()), i18n("Delete key"));
-	}
+    if (delkey) {
+        if (retcode == 0) {
+            KMessageBox::information(this, i18n("Key <b>%1</b> deleted.", delkey->getBeautifiedFingerprint()), i18n("Delete key"));
+            imodel->delNode(delkey);
+        } else {
+            KMessageBox::error(this, i18n("Deleting key <b>%1</b> failed.", delkey->getBeautifiedFingerprint()), i18n("Delete key"));
+        }
+    }
 	m_delkey->deleteLater();
 	m_delkey = Q_NULLPTR;
 }
@@ -2481,13 +2513,15 @@
 	for (KGpgNode *nd : ndlist) {
 		KGpgKeyNode *ki = nd->toKeyNode();
 
-		if (ki->getType() & ITYPE_SECRET) {
-			secList += ki->getNameComment();
-		} else if (ki != terminalkey) {
-			keysToDelete += ki->getNameComment();
-			deleteIds << ki->getId();
-			delkeys << ki;
-		}
+        if (ki) {
+            if (ki->getType() & ITYPE_SECRET) {
+                secList += ki->getNameComment();
+            } else if (ki != terminalkey) {
+                keysToDelete += ki->getNameComment();
+                deleteIds << ki->getId();
+                delkeys << ki;
+            }
+        }
 	}
 
 	if (secretKeyInside) {
