diff --git a/vnc/vncview.cpp b/vnc/vncview.cpp
index fd04596..8c21360 100644
--- a/vnc/vncview.cpp
+++ b/vnc/vncview.cpp
@@ -81,6 +81,18 @@ VncView::VncView(QWidget *parent, const QUrl &url, KConfigGroup configGroup)
 #else
     Q_UNUSED(configGroup);
 #endif
+#ifdef Q_OS_MACOS
+    // QCoreApplication::testAttribute(Qt::AA_MacDontSwapCtrlAndMeta) isn't reliable?!
+    m_ctrlIsControl = qApp->testAttribute(Qt::AA_MacDontSwapCtrlAndMeta);
+    qCWarning(KRDC) << "Ctrl/Meta swapping:" << !qApp->testAttribute(Qt::AA_MacDontSwapCtrlAndMeta);
+#endif
+    if (QGuiApplication::platformName() == QStringLiteral("xcb")) {
+        // we can feed QKeyEvent::nativeVirtualKey() directly to LibVNC
+        m_convertKeySyms = false;
+    } else {
+        m_convertKeySyms = true;
+        qCWarning(KRDC) << "Qt keystrokes must be translated for VNC on" << QGuiApplication::platformName();
+    }
 }
 
 VncView::~VncView()
@@ -560,6 +572,7 @@ void VncView::wheelEventHandler(QWheelEvent *event)
     vncThread.mouseEvent(x, y, m_buttonMask);
 }
 
+#include <stdio.h>
 void VncView::keyEventHandler(QKeyEvent *e)
 {
     // strip away autorepeating KeyRelease; see bug #206598
@@ -567,12 +580,124 @@ void VncView::keyEventHandler(QKeyEvent *e)
         return;
 
 // parts of this code are based on http://italc.sourcearchive.com/documentation/1.0.9.1/vncview_8cpp-source.html
-    rfbKeySym k = e->nativeVirtualKey();
+    rfbKeySym k;
+    if (!m_convertKeySyms) {
+        k = e->nativeVirtualKey();
+
+        // we do not handle Key_Backtab separately as the Shift-modifier
+        // is already enabled
+        if (e->key() == Qt::Key_Backtab) {
+            k = XK_Tab;
+        }
+    } else {
+        // from http://italc.sourcearchive.com/documentation/1.0.9.1/vncview_8cpp-source.html
+        int key = 0;
+        switch (e->key()) {
+            // modifiers are handled separately
+            case Qt::Key_Shift: key = XK_Shift_L; break;
+            case Qt::Key_Control:
+                key = m_ctrlIsControl? XK_Control_L : XK_Meta_L;
+                break;
+            case Qt::Key_Meta:
+                key = m_ctrlIsControl? XK_Meta_L : XK_Control_L;
+                break;
+            case Qt::Key_Alt: key = XK_Alt_L; break;
+            case Qt::Key_Escape: key = XK_Escape; break;
+            case Qt::Key_Tab: key = XK_Tab; break;
+            case Qt::Key_Backtab: key = XK_Tab; break;
+            case Qt::Key_Backspace: key = XK_BackSpace; break;
+            case Qt::Key_Return: key = XK_Return; break;
+            case Qt::Key_Insert: key = XK_Insert; break;
+            case Qt::Key_Delete: key = XK_Delete; break;
+            case Qt::Key_Pause: key = XK_Pause; break;
+            case Qt::Key_Print: key = XK_Print; break;
+            case Qt::Key_Home: key = XK_Home; break;
+            case Qt::Key_End: key = XK_End; break;
+            case Qt::Key_Left: key = XK_Left; break;
+            case Qt::Key_Up: key = XK_Up; break;
+            case Qt::Key_Right: key = XK_Right; break;
+            case Qt::Key_Down: key = XK_Down; break;
+            case Qt::Key_PageUp: key = XK_Prior; break;
+            case Qt::Key_PageDown: key = XK_Next; break;
+            case Qt::Key_CapsLock: key = XK_Caps_Lock; break;
+            case Qt::Key_NumLock: key = XK_Num_Lock; break;
+            case Qt::Key_ScrollLock: key = XK_Scroll_Lock; break;
+            case Qt::Key_Super_L: key = XK_Super_L; break;
+            case Qt::Key_Super_R: key = XK_Super_R; break;
+            case Qt::Key_Menu: key = XK_Menu; break;
+            case Qt::Key_Hyper_L: key = XK_Hyper_L; break;
+            case Qt::Key_Hyper_R: key = XK_Hyper_R; break;
+            case Qt::Key_Help: key = XK_Help; break;
+            case Qt::Key_AltGr: key = XK_ISO_Level3_Shift; break;
+#ifdef XK_Multiey
+            case Qt::Key_Multiey: key = XK_Multiey; break;
+#endif
+            case Qt::Key_SingleCandidate: key = XK_SingleCandidate; break;
+            case Qt::Key_MultipleCandidate: key = XK_MultipleCandidate; break;
+            case Qt::Key_PreviousCandidate: key = XK_PreviousCandidate; break;
+            case Qt::Key_Mode_switch: key = XK_Mode_switch; break;
+            case Qt::Key_Kanji: key = XK_Kanji; break;
+            case Qt::Key_Muhenkan: key = XK_Muhenkan; break;
+            case Qt::Key_Henkan: key = XK_Henkan; break;
+            case Qt::Key_Romaji: key = XK_Romaji; break;
+            case Qt::Key_Hiragana: key = XK_Hiragana; break;
+            case Qt::Key_Katakana: key = XK_Katakana; break;
+            case Qt::Key_Hiragana_Katakana: key = XK_Hiragana_Katakana; break;
+            case Qt::Key_Zenkaku: key = XK_Zenkaku; break;
+            case Qt::Key_Hankaku: key = XK_Hankaku; break;
+            case Qt::Key_Zenkaku_Hankaku: key = XK_Zenkaku_Hankaku; break;
+            case Qt::Key_Touroku: key = XK_Touroku; break;
+            case Qt::Key_Massyo: key = XK_Massyo; break;
+            case Qt::Key_Kana_Lock: key = XK_Kana_Lock; break;
+            case Qt::Key_Kana_Shift: key = XK_Kana_Shift; break;
+            case Qt::Key_Eisu_Shift: key = XK_Eisu_Shift; break;
+            case Qt::Key_Eisu_toggle: key = XK_Eisu_toggle; break;
+#ifdef XK_KOREAN
+            case Qt::Key_Hangul: key = XK_Hangul; break;
+            case Qt::Key_Hangul_Start: key = XK_Hangul_Start; break;
+            case Qt::Key_Hangul_End: key = XK_Hangul_End; break;
+            case Qt::Key_Hangul_Hanja: key = XK_Hangul_Hanja; break;
+            case Qt::Key_Hangul_Jamo: key = XK_Hangul_Jamo; break;
+            case Qt::Key_Hangul_Romaja: key = XK_Hangul_Romaja; break;
+            case Qt::Key_Hangul_Jeonja: key = XK_Hangul_Jeonja; break;
+            case Qt::Key_Hangul_Banja: key = XK_Hangul_Banja; break;
+            case Qt::Key_Hangul_PreHanja: key = XK_Hangul_PreHanja; break;
+            case Qt::Key_Hangul_PostHanja: key = XK_Hangul_PostHanja; break;
+            case Qt::Key_Hangul_Special: key = XK_Hangul_Special; break;
+#endif
+            case Qt::Key_Dead_Grave: key = XK_dead_grave; break;
+            case Qt::Key_Dead_Acute: key = XK_dead_acute; break;
+            case Qt::Key_Dead_Circumflex: key = XK_dead_circumflex; break;
+            case Qt::Key_Dead_Tilde: key = XK_dead_tilde; break;
+            case Qt::Key_Dead_Macron: key = XK_dead_macron; break;
+            case Qt::Key_Dead_Breve: key = XK_dead_breve; break;
+            case Qt::Key_Dead_Abovedot: key = XK_dead_abovedot; break;
+            case Qt::Key_Dead_Diaeresis: key = XK_dead_diaeresis; break;
+            case Qt::Key_Dead_Abovering: key = XK_dead_abovering; break;
+            case Qt::Key_Dead_Doubleacute: key = XK_dead_doubleacute; break;
+            case Qt::Key_Dead_Caron: key = XK_dead_caron; break;
+            case Qt::Key_Dead_Cedilla: key = XK_dead_cedilla; break;
+            case Qt::Key_Dead_Ogonek: key = XK_dead_ogonek; break;
+            case Qt::Key_Dead_Iota: key = XK_dead_iota; break;
+            case Qt::Key_Dead_Voiced_Sound: key = XK_dead_voiced_sound; break;
+            case Qt::Key_Dead_Semivoiced_Sound: key = XK_dead_semivoiced_sound; break;
+            case Qt::Key_Dead_Belowdot: key = XK_dead_belowdot; break;
+        }
 
-    // we do not handle Key_Backtab separately as the Shift-modifier
-    // is already enabled
-    if (e->key() == Qt::Key_Backtab) {
-        k = XK_Tab;
+        if (e->key() >= Qt::Key_F1 && e->key() <= Qt::Key_F35) {
+            key = XK_F1 + e->key() - Qt::Key_F1;
+        } else if (key == 0) {
+            if (m_mods.contains(XK_Control_L) && QKeySequence(e->key()).toString().length() == 1) {
+                QString s = QKeySequence(e->key()).toString();
+                if (!m_mods.contains(XK_Shift_L)) {
+                    s = s.toLower();
+                }
+                key = s.utf16()[0];
+            } else {
+                key = e->text().utf16()[0];
+            }
+        }
+        k = key;
     }
 
     const bool pressed = (e->type() == QEvent::KeyPress);
diff --git a/vnc/vncview.h b/vnc/vncview.h
index db84fe8..c996248 100644
--- a/vnc/vncview.h
+++ b/vnc/vncview.h
@@ -100,6 +100,10 @@ private:
     void unpressModifiers();
     void wheelEventHandler(QWheelEvent *event);
     void mouseEventHandler(QMouseEvent *event);
+#ifdef Q_OS_MACOS
+    bool m_ctrlIsControl;
+#endif
+    bool m_convertKeySyms;
 
 private Q_SLOTS:
     void updateImage(int x, int y, int w, int h);
