diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4c1f4c6..e12e2ce 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -51,6 +51,14 @@ set ( CMAKE_MODULE_PATH
 include(GenerateExportHeader)
 include( MarbleMacros )
 
+# Generate a standalone app bundle when building on Apple's OS X
+# unset this to build a more unix-traditional layout that uses and provides
+# shared libraries and other resources (e.g. for MacPorts, Fink, HomeBrew etc.)
+if(APPLE)
+    option(APPLE_STANDALONE_BUNDLE "Generate a standalone app bundle when building on Apple's OS X" ON)
+    add_feature_info("App Bundle" APPLE_STANDALONE_BUNDLE "Generate a standalone app bundle when building on Apple's OS X.")
+endif(APPLE)
+
 ####################################################
 # Generate the tiles with the tilecreator at compile time
 # if this option is set, srtm.jpg will not be installed but the generated tiles instead
@@ -59,7 +67,7 @@ option(MOBILE "Create a Marble version optimized for handheld devices")
 ####################################################
 # Build a D-Bus interface for the Marble widget
 # This is disabled by default for all win32, apple and Android
-if(WIN32 OR APPLE OR CMAKE_SYSTEM_NAME STREQUAL Android)
+if(WIN32 OR APPLE_STANDALONE_BUNDLE OR CMAKE_SYSTEM_NAME STREQUAL Android)
     option(BUILD_WITH_DBUS "Build the D-Bus interface for the Marble widget" OFF)
 else()
     option(BUILD_WITH_DBUS "Build the D-Bus interface for the Marble widget" ON)
@@ -164,15 +172,22 @@ elseif(APPLE)
     FIND_LIBRARY(APP_SERVICES_LIBRARY ApplicationServices )
     MARK_AS_ADVANCED (APP_SERVICES_LIBRARY)
     SET(MAC_EXTRA_LIBS ${APP_SERVICES_LIBRARY})
-      # for Mac OS X, everything is put inside an application bundle
-      SET (CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/)
-      # path for library references
-      SET (CMAKE_INSTALL_NAME_DIR @executable_path/lib)
-      # install the Info.plist file
-      install(FILES src/mac/Info.plist DESTINATION ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents)
-      #SET (lib_dir ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/MacOS/lib)
-      SET (data_dir   ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/MacOS/resources/data)
-      SET (plugin_dir   ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/MacOS/resources/plugins)
+    if(APPLE_STANDALONE_BUNDLE)
+        ADD_DEFINITIONS(-DAPPLE_STANDALONE_BUNDLE)
+        # for Mac OS X, everything is put inside an application bundle
+        SET (CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/)
+        # path for library references
+        SET (CMAKE_INSTALL_NAME_DIR @executable_path/lib)
+        # install the Info.plist file
+        install(FILES src/mac/Info.plist DESTINATION ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents)
+        #SET (lib_dir ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/MacOS/lib)
+        SET (data_dir   ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/Resources)
+        SET (plugin_dir   ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/Resources/plugins)
+    else(APPLE_STANDALONE_BUNDLE)
+        set(data_dir ${CMAKE_INSTALL_FULL_DATAROOTDIR}/marble/data)
+        set(plugin_dir ${CMAKE_INSTALL_FULL_LIBDIR}/marble/plugins)
+        set(CMAKE_MODULES_INSTALL_PATH ${CMAKE_INSTALL_FULL_DATAROOTDIR}/marble/cmake)
+    endif(APPLE_STANDALONE_BUNDLE)
 elseif(CMAKE_SYSTEM_NAME STREQUAL Android)
       set(plugin_dir "${CMAKE_INSTALL_PREFIX}/assets/plugins")
       set(data_dir "${CMAKE_INSTALL_PREFIX}/assets/data")
diff --git a/data/CMakeLists.txt b/data/CMakeLists.txt
index 406dada..ff76531 100644
--- a/data/CMakeLists.txt
+++ b/data/CMakeLists.txt
@@ -256,14 +256,14 @@ else(MOBILE)
     install (FILES placemarks/cityplacemarks.cache DESTINATION ${MARBLE_DATA_INSTALL_PATH}/placemarks)
 endif(MOBILE)
 
-if(NOT APPLE AND NOT WIN32)
+if(NOT APPLE_STANDALONE_BUNDLE AND NOT WIN32)
   install (FILES icons/128-apps-marble.png DESTINATION ${ICON_INSTALL_DIR}/hicolor/128x128/apps/ RENAME marble.png)
   install (FILES icons/64-apps-marble.png DESTINATION ${ICON_INSTALL_DIR}/hicolor/64x64/apps/ RENAME marble.png)
   install (FILES icons/48-apps-marble.png DESTINATION ${ICON_INSTALL_DIR}/hicolor/48x48/apps/ RENAME marble.png)
   install (FILES icons/32-apps-marble.png DESTINATION ${ICON_INSTALL_DIR}/hicolor/32x32/apps/ RENAME marble.png)
   install (FILES icons/22-apps-marble.png DESTINATION ${ICON_INSTALL_DIR}/hicolor/22x22/apps/ RENAME marble.png)
   install (FILES icons/16-apps-marble.png DESTINATION ${ICON_INSTALL_DIR}/hicolor/16x16/apps/ RENAME marble.png)
-endif(NOT APPLE AND NOT WIN32 )
+endif(NOT APPLE_STANDALONE_BUNDLE AND NOT WIN32 )
 
 FILE (GLOB AUDIO_FILES audio/*.ogg)
 install (FILES
diff --git a/examples/cpp/marble-game/GameMainWindow.cpp b/examples/cpp/marble-game/GameMainWindow.cpp
index 8c66cd1..e2941ed 100644
--- a/examples/cpp/marble-game/GameMainWindow.cpp
+++ b/examples/cpp/marble-game/GameMainWindow.cpp
@@ -83,6 +83,9 @@ Private::Private(QWidget* parent) :
 
 QString Private::readMarbleDataPath() const
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     return QSettings().value("MarbleWidget/marbleDataPath", "").toString();
 }
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index dc2cc30..3f6d264 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -71,9 +71,9 @@ configure_file(
   ${CMAKE_CURRENT_BINARY_DIR}/config-marble.h
 )
 
-if(APPLE)
+if(APPLE_STANDALONE_BUNDLE)
   add_subdirectory( mac )
-endif(APPLE)
+endif(APPLE_STANDALONE_BUNDLE)
 
 add_subdirectory( plasmarunner )
 add_subdirectory( thumbnailer )
diff --git a/src/apps/marble-kde/CMakeLists.txt b/src/apps/marble-kde/CMakeLists.txt
index 76ba3e9..bd0b16b 100644
--- a/src/apps/marble-kde/CMakeLists.txt
+++ b/src/apps/marble-kde/CMakeLists.txt
@@ -5,6 +5,7 @@ if(ECM_FOUND)
   include(KDEInstallDirs)
   include(KDECMakeSettings)
   include(ECMInstallIcons)
+  include(ECMAddAppIcon)
 endif()
 macro_optional_find_package(KF5 QUIET COMPONENTS Crash NewStuff Parts CoreAddons I18n)
 
@@ -49,6 +50,9 @@ ecm_install_icons(ICONS
   "${CMAKE_CURRENT_SOURCE_DIR}/../../../data/icons/48-apps-marble.png"
   "${CMAKE_CURRENT_SOURCE_DIR}/../../../data/icons/64-apps-marble.png"
   DESTINATION ${ICON_INSTALL_DIR})
+file(GLOB ICONS_SRCS
+  "${CMAKE_CURRENT_SOURCE_DIR}/../../../data/icons/*-apps-marble.png")
+ecm_add_app_icon(marble_kde_SRCS ICONS ${ICONS_SRCS})
 add_executable (marble ${marble_kde_SRCS})
 
 target_link_libraries (
@@ -69,7 +73,7 @@ if(STATIC_BUILD)
     target_link_libraries(marble ${QT_PLUGINS_DIR}/imageformats/qsvg.lib)
 endif(STATIC_BUILD)
 
-if (NOT APPLE)
+if (NOT APPLE_STANDALONE_BUNDLE)
     install( FILES marble.desktop DESTINATION ${APPS_INSTALL_DIR})
 endif()
 
diff --git a/src/apps/marble-mobile/MobileMainWindow.cpp b/src/apps/marble-mobile/MobileMainWindow.cpp
index d17dde4..1398fbf 100644
--- a/src/apps/marble-mobile/MobileMainWindow.cpp
+++ b/src/apps/marble-mobile/MobileMainWindow.cpp
@@ -292,6 +292,9 @@ void MainWindow::closeEvent( QCloseEvent *event )
 
 QString MainWindow::readMarbleDataPath()
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     QSettings settings;
 
     settings.beginGroup( "MarbleWidget" );
@@ -307,6 +310,9 @@ void MainWindow::readSettings(const QVariantMap& overrideSettings)
     // Load bookmark file. If it does not exist, a default one will be used.
     m_marbleWidget->model()->bookmarkManager()->loadFile( "bookmarks/bookmarks.kml" );
 
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     QSettings settings;
 
     settings.beginGroup( "MainWindow" );
@@ -480,6 +486,9 @@ void MainWindow::readSettings(const QVariantMap& overrideSettings)
 
 void MainWindow::writeSettings()
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     QSettings settings;
 
     settings.beginGroup( "MainWindow" );
diff --git a/src/apps/marble-mobile/main.cpp b/src/apps/marble-mobile/main.cpp
index e612b4f..dc844ad 100644
--- a/src/apps/marble-mobile/main.cpp
+++ b/src/apps/marble-mobile/main.cpp
@@ -33,7 +33,7 @@
  Q_IMPORT_PLUGIN(qsvg)
 #endif
 
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
 //for getting app bundle path
 #include <ApplicationServices/ApplicationServices.h>
 #endif
@@ -77,7 +77,7 @@ int main(int argc, char *argv[])
     QApplication::addLibraryPath( QApplication::applicationDirPath() 
         + QDir::separator() + "plugins" );
 #endif
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
     QApplication::instance()->setAttribute(Qt::AA_DontShowIconsInMenus);
     qDebug("Adding qt image plugins to plugin search path...");
     CFURLRef myBundleRef = CFBundleCopyBundleURL(CFBundleGetMainBundle());
@@ -92,7 +92,7 @@ int main(int argc, char *argv[])
     // lets try to set the qt plugin search path...
     if (myPath.contains(".app"))
     {
-      myPath += "/Contents/plugins";
+      myPath += "/Contents/Resources/plugins";
       QApplication::addLibraryPath( myPath );
       qDebug( "Added %s to plugin search path", qPrintable( myPath ) );
     }
diff --git a/src/apps/marble-qt/CMakeLists.txt b/src/apps/marble-qt/CMakeLists.txt
index fff6b95..924db6c 100644
--- a/src/apps/marble-qt/CMakeLists.txt
+++ b/src/apps/marble-qt/CMakeLists.txt
@@ -14,13 +14,13 @@ if (WIN32)
 	  set_target_properties(marble-qt PROPERTIES LINK_FLAGS "/ENTRY:\"mainCRTStartup\"")
     endif()
 else (WIN32)
-    if (APPLE)
+    if (APPLE_STANDALONE_BUNDLE)
         add_executable (marble-qt ${marble_SRCS})
         # For Mac OS X, the executable must be at the root of the bundle's executable folder
         INSTALL(TARGETS marble-qt RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/MacOS)
-    else (APPLE)
+    else (APPLE_STANDALONE_BUNDLE)
         add_executable (marble-qt ${marble_SRCS})
-    endif (APPLE)
+    endif (APPLE_STANDALONE_BUNDLE)
 endif (WIN32)
 
 target_link_libraries (
@@ -50,11 +50,11 @@ endif(STATIC_BUILD)
 if(WIN32)
 install (TARGETS marble-qt RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX})
 else(WIN32)
-if (APPLE)
+if (APPLE_STANDALONE_BUNDLE)
   # No need for this when installing to a bundle
-else (APPLE)
+else (APPLE_STANDALONE_BUNDLE)
     install (TARGETS marble-qt RUNTIME DESTINATION bin )
-endif (APPLE)
+endif (APPLE_STANDALONE_BUNDLE)
 endif(WIN32)
 if(APPS_INSTALL_DIR)
   install(PROGRAMS marble-qt.desktop DESTINATION ${APPS_INSTALL_DIR})
diff --git a/src/apps/marble-qt/QtMainWindow.cpp b/src/apps/marble-qt/QtMainWindow.cpp
index a13b053..778fa6c 100644
--- a/src/apps/marble-qt/QtMainWindow.cpp
+++ b/src/apps/marble-qt/QtMainWindow.cpp
@@ -1133,6 +1133,9 @@ void MainWindow::closeEvent( QCloseEvent *event )
 
 QString MainWindow::readMarbleDataPath()
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+     QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
      QSettings settings;
 
      settings.beginGroup("MarbleWidget");
@@ -1145,6 +1148,9 @@ QString MainWindow::readMarbleDataPath()
 
 void MainWindow::readSettings(const QVariantMap& overrideSettings)
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+     QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
      QSettings settings;
 
      settings.beginGroup("MainWindow");
@@ -1354,6 +1360,9 @@ void MainWindow::readSettings(const QVariantMap& overrideSettings)
 
 void MainWindow::writeSettings()
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+     QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
      QSettings settings;
 
      settings.beginGroup( "MainWindow" );
@@ -1622,6 +1631,9 @@ void MainWindow::updateWindowTitle()
 void MainWindow::showMapWizard()
 {
     QPointer<MapWizard> mapWizard = new MapWizard();
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     QSettings settings;
 
     settings.beginGroup( "MapWizard" );
diff --git a/src/apps/marble-qt/qtmain.cpp b/src/apps/marble-qt/qtmain.cpp
index b2f6e14..a72e5dd 100644
--- a/src/apps/marble-qt/qtmain.cpp
+++ b/src/apps/marble-qt/qtmain.cpp
@@ -31,7 +31,7 @@
  Q_IMPORT_PLUGIN(qsvg)
 #endif
 
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
 //for getting app bundle path
 #include <ApplicationServices/ApplicationServices.h>
 #endif
@@ -61,7 +61,7 @@ int main(int argc, char *argv[])
     QApplication::addLibraryPath( QApplication::applicationDirPath() 
         + QDir::separator() + "plugins" );
 #endif
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
     QApplication::instance()->setAttribute(Qt::AA_DontShowIconsInMenus);
     qDebug("Adding qt image plugins to plugin search path...");
     CFURLRef myBundleRef = CFBundleCopyBundleURL(CFBundleGetMainBundle());
@@ -76,7 +76,7 @@ int main(int argc, char *argv[])
     // lets try to set the qt plugin search path...
     if (myPath.contains(".app"))
     {
-      myPath += "/Contents/plugins";
+      myPath += "/Contents/Resources/plugins";
       QApplication::addLibraryPath( myPath );
       qDebug( "Added %s to plugin search path", qPrintable( myPath ) );
     }
diff --git a/src/lib/astro/CMakeLists.txt b/src/lib/astro/CMakeLists.txt
index be20b26..2f33b9b 100644
--- a/src/lib/astro/CMakeLists.txt
+++ b/src/lib/astro/CMakeLists.txt
@@ -57,7 +57,7 @@ target_include_directories(astro
 # choose the correct target install library path
 if(WIN32)
   INSTALL(TARGETS astro RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX} ARCHIVE DESTINATION lib)
-elseif(APPLE)
+elseif(APPLE_STANDALONE_BUNDLE)
   INSTALL(TARGETS astro LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/MacOS/lib)
 else()
   install(TARGETS astro
@@ -68,7 +68,7 @@ endif()
 
 ########### install headers & cmake config files ###############
 
-if (WIN32 OR APPLE)
+if (WIN32 OR APPLE_STANDALONE_BUNDLE)
     # TODO: find how to install & deploy library, headers and config files as bundle for development
     return()
 endif()
diff --git a/src/lib/marble/AbstractFloatItem.cpp b/src/lib/marble/AbstractFloatItem.cpp
index 501dc57..460cf1f 100644
--- a/src/lib/marble/AbstractFloatItem.cpp
+++ b/src/lib/marble/AbstractFloatItem.cpp
@@ -47,7 +47,7 @@ class AbstractFloatItemPrivate
 };
 
 QPen         AbstractFloatItemPrivate::s_pen = QPen( Qt::black );
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
     QFont AbstractFloatItemPrivate::s_font = QFont( QStringLiteral("Sans Serif"), 10 );
 #else
     QFont AbstractFloatItemPrivate::s_font = QFont( QStringLiteral("Sans Serif"), 8 );
diff --git a/src/lib/marble/CMakeLists.txt b/src/lib/marble/CMakeLists.txt
index b268cb2..64fc09e 100644
--- a/src/lib/marble/CMakeLists.txt
+++ b/src/lib/marble/CMakeLists.txt
@@ -441,7 +441,7 @@ target_include_directories(marblewidget
 # choose the correct target install library path
 if(WIN32)
   install(TARGETS marblewidget RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX} ARCHIVE DESTINATION lib)
-elseif(APPLE)
+elseif(APPLE_STANDALONE_BUNDLE)
   install(TARGETS marblewidget LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/Marble.app/Contents/MacOS/lib)
 else()
   install(TARGETS marblewidget
@@ -452,7 +452,7 @@ endif()
 
 ########### install headers & cmake config files ###############
 
-if (WIN32 OR APPLE)
+if (WIN32 OR APPLE_STANDALONE_BUNDLE)
     # TODO: find how to install & deploy library, headers and config files as bundle for development
     return()
 endif()
diff --git a/src/lib/marble/MapThemeSortFilterProxyModel.cpp b/src/lib/marble/MapThemeSortFilterProxyModel.cpp
index e716d86..d0698e5 100644
--- a/src/lib/marble/MapThemeSortFilterProxyModel.cpp
+++ b/src/lib/marble/MapThemeSortFilterProxyModel.cpp
@@ -52,6 +52,9 @@ bool MapThemeSortFilterProxyModel::isFavorite( const QModelIndex& index )
     const QAbstractItemModel *model = index.model();
     QModelIndex columnIndex = model->index( index.row(), 0, QModelIndex() );
     QString const key = "Favorites/" + model->data( columnIndex ).toString();
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     return QSettings().contains( key );
 }
 
@@ -60,6 +63,9 @@ QDateTime MapThemeSortFilterProxyModel::favoriteDateTime( const QModelIndex& ind
     const QAbstractItemModel *model = index.model();
     QModelIndex columnIndex = model->index( index.row(), 0, QModelIndex() );
     QString const key = "Favorites/" + model->data( columnIndex ).toString();
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     return QSettings().value( key ).toDateTime();
 }
 
diff --git a/src/lib/marble/MapViewItemDelegate.cpp b/src/lib/marble/MapViewItemDelegate.cpp
index 941f6ef..8a79a1e 100644
--- a/src/lib/marble/MapViewItemDelegate.cpp
+++ b/src/lib/marble/MapViewItemDelegate.cpp
@@ -61,6 +61,9 @@ void MapViewItemDelegate::paint( QPainter *painter, const QStyleOptionViewItem &
 
     int const padding = 5;
     QString const name = index.data().toString();
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     const bool isFavorite = QSettings().contains( "Favorites/" + name );
     QSize const bookmarkSize( 16, 16 );
     QRect bookmarkRect( iconRect.bottomRight(), bookmarkSize );
diff --git a/src/lib/marble/MapViewWidget.cpp b/src/lib/marble/MapViewWidget.cpp
index 9d861bf..c021411 100644
--- a/src/lib/marble/MapViewWidget.cpp
+++ b/src/lib/marble/MapViewWidget.cpp
@@ -71,6 +71,9 @@ class Q_DECL_HIDDEN MapViewWidget::Private {
     {
         m_mapSortProxy.setDynamicSortFilter( true );
         m_celestialListProxy.setDynamicSortFilter( true );
+#ifndef APPLE_STANDALONE_BUNDLE
+        QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     }
 
     void applyExtendedLayout()
diff --git a/src/lib/marble/MarbleDirs.cpp b/src/lib/marble/MarbleDirs.cpp
index ef98a7f..91c0f94 100644
--- a/src/lib/marble/MarbleDirs.cpp
+++ b/src/lib/marble/MarbleDirs.cpp
@@ -30,7 +30,7 @@
 #include <shlobj.h>
 #endif
 
-#ifdef Q_OS_MACX
+#ifdef APPLE_STANDALONE_BUNDLE
 //for getting app bundle path
 #include <ApplicationServices/ApplicationServices.h>
 #endif
@@ -130,7 +130,7 @@ QString MarbleDirs::systemPath()
 	return QCoreApplication::applicationDirPath() + QDir::separator() + "data";
 #endif
 
-#ifdef Q_OS_MACX
+#ifdef APPLE_STANDALONE_BUNDLE
     //
     // On OSX lets try to find any file first in the bundle
     // before branching out to home and sys dirs
@@ -145,7 +145,7 @@ QString MarbleDirs::systemPath()
     //marble was not built as a bundle
     if (myPath.contains(".app"))  //its a bundle!
     {
-      systempath = myPath + "/Contents/Resources/data";
+      systempath = myPath + "/Contents/Resources";
     }
 
     if ( QFile::exists( systempath ) ){ 
@@ -184,7 +184,7 @@ QString MarbleDirs::pluginSystemPath()
 
     QString systempath;
 
-#ifdef Q_OS_MACX
+#ifdef APPLE_STANDALONE_BUNDLE
     //
     // On OSX lets try to find any file first in the bundle
     // before branching out to home and sys dirs
diff --git a/src/lib/marble/QtMarbleConfigDialog.cpp b/src/lib/marble/QtMarbleConfigDialog.cpp
index 890d867..fa0d138 100644
--- a/src/lib/marble/QtMarbleConfigDialog.cpp
+++ b/src/lib/marble/QtMarbleConfigDialog.cpp
@@ -63,6 +63,9 @@ class QtMarbleConfigDialogPrivate
           m_cloudSyncManager(cloudSyncManager),
           m_pluginModel()
     {
+#ifndef APPLE_STANDALONE_BUNDLE
+        QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     }
 
     Ui::MarbleViewSettingsWidget       ui_viewSettings;
diff --git a/src/lib/marble/declarative/MarbleQuickItem.cpp b/src/lib/marble/declarative/MarbleQuickItem.cpp
index 581a480..57d0269 100644
--- a/src/lib/marble/declarative/MarbleQuickItem.cpp
+++ b/src/lib/marble/declarative/MarbleQuickItem.cpp
@@ -884,6 +884,9 @@ namespace Marble
 
     void MarbleQuickItem::loadSettings()
     {
+#ifndef APPLE_STANDALONE_BUNDLE
+        QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
         QSettings settings;
         settings.beginGroup("MarbleQuickItem");
         double lon = settings.value("centerLon", QVariant(0.0)).toDouble();
@@ -899,6 +902,9 @@ namespace Marble
 
     void MarbleQuickItem::writeSettings()
     {
+#ifndef APPLE_STANDALONE_BUNDLE
+        QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
         QSettings settings;
         settings.beginGroup("MarbleQuickItem");
         settings.setValue("centerLon", QVariant(d->m_map.centerLongitude()));
diff --git a/src/lib/marble/declarative/Settings.cpp b/src/lib/marble/declarative/Settings.cpp
index 1860cfa..cbe53b7 100644
--- a/src/lib/marble/declarative/Settings.cpp
+++ b/src/lib/marble/declarative/Settings.cpp
@@ -42,6 +42,9 @@ void Settings::setApplicationName( const QString &application )
 
 QVariant Settings::value( const QString &group, const QString &key, const QVariant &value ) const
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     QSettings settings( m_organizationName, m_applicationName );
     settings.beginGroup( group );
     return settings.value( key, value );
@@ -49,6 +52,9 @@ QVariant Settings::value( const QString &group, const QString &key, const QVaria
 
 void Settings::setValue( const QString &group, const QString &key, const QVariant &value )
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     QSettings settings( m_organizationName, m_applicationName );
     settings.beginGroup( group );
     settings.setValue( key, value );
diff --git a/src/lib/marble/geodata/data/GeoDataLabelStyle.cpp b/src/lib/marble/geodata/data/GeoDataLabelStyle.cpp
index 8544d34..6d05a64 100644
--- a/src/lib/marble/geodata/data/GeoDataLabelStyle.cpp
+++ b/src/lib/marble/geodata/data/GeoDataLabelStyle.cpp
@@ -19,7 +19,7 @@
 
 namespace Marble
 {
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
 static const int defaultSize = 10;
 #else
 static const int defaultSize = 8;
diff --git a/src/plugins/render/foursquare/FoursquarePlugin.cpp b/src/plugins/render/foursquare/FoursquarePlugin.cpp
index b2abd2b..3648c1f 100644
--- a/src/plugins/render/foursquare/FoursquarePlugin.cpp
+++ b/src/plugins/render/foursquare/FoursquarePlugin.cpp
@@ -79,8 +79,11 @@ QIcon FoursquarePlugin::icon() const
 
 bool FoursquarePlugin::isAuthenticated()
 {
+#ifndef APPLE_STANDALONE_BUNDLE
+    QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
     QSettings settings;
-    
+
     return !settings.value( "access_token" ).isNull();
 }
 
@@ -88,6 +91,9 @@ bool FoursquarePlugin::storeAccessToken(const QString& tokenUrl)
 {
     QString expected = "http://edu.kde.org/marble/dummy#access_token=";
     if( tokenUrl.startsWith( expected ) ) {
+#ifndef APPLE_STANDALONE_BUNDLE
+        QSettings::setDefaultFormat(QSettings::IniFormat);
+#endif
         QSettings settings;
         QString url = tokenUrl;
         settings.setValue( "access_token", url.remove( expected ) );
diff --git a/src/plugins/render/graticule/GraticulePlugin.cpp b/src/plugins/render/graticule/GraticulePlugin.cpp
index 3b4f9ba..ec284f4 100644
--- a/src/plugins/render/graticule/GraticulePlugin.cpp
+++ b/src/plugins/render/graticule/GraticulePlugin.cpp
@@ -269,7 +269,7 @@ bool GraticulePlugin::render( GeoPainter *painter, ViewportParams *viewport,
     }
 
     // Setting the label font for the coordinate lines.
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
     int defaultFontSize = 10;
 #else
     int defaultFontSize = 8;
diff --git a/src/plugins/render/measure/MeasureToolPlugin.cpp b/src/plugins/render/measure/MeasureToolPlugin.cpp
index 2412247..b511e74 100644
--- a/src/plugins/render/measure/MeasureToolPlugin.cpp
+++ b/src/plugins/render/measure/MeasureToolPlugin.cpp
@@ -37,7 +37,7 @@ MeasureToolPlugin::MeasureToolPlugin( const MarbleModel *marbleModel )
     : RenderPlugin( marbleModel ),
       m_measureLineString( GeoDataLineString( Tessellate ) ),
       m_mark( ":/mark.png" ),
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
       m_font_regular( QFont( QStringLiteral( "Sans Serif" ), 10, 50, false ) ),
 #else
       m_font_regular( QFont( QStringLiteral( "Sans Serif" ),  8, 50, false ) ),
diff --git a/src/plugins/render/weather/WeatherItem.cpp b/src/plugins/render/weather/WeatherItem.cpp
index 3a42b65..765a7f2 100644
--- a/src/plugins/render/weather/WeatherItem.cpp
+++ b/src/plugins/render/weather/WeatherItem.cpp
@@ -312,7 +312,7 @@ class WeatherItemPrivate
 };
 
 // FIXME: Fonts to be defined globally
-#ifdef Q_OS_MACX
+#ifdef Q_OS_OSX
     QFont WeatherItemPrivate::s_font = QFont( QStringLiteral( "Sans Serif" ), 10 );
 #else
     QFont WeatherItemPrivate::s_font = QFont( QStringLiteral( "Sans Serif" ), 8 );
diff --git a/src/plugins/runner/json/CMakeLists.txt b/src/plugins/runner/json/CMakeLists.txt
index 7525d77..42dcad9 100644
--- a/src/plugins/runner/json/CMakeLists.txt
+++ b/src/plugins/runner/json/CMakeLists.txt
@@ -11,7 +11,7 @@ set( JsonPlugin_LIBS Qt5::Script )
 
 marble_add_plugin( JsonPlugin ${json_SRCS} )
 
-if(WIN32 OR APPLE)
+if(WIN32 OR APPLE_STANDALONE_BUNDLE)
   # nothing to do
 else()
   install(FILES marble_geojson.desktop DESTINATION ${APPS_INSTALL_DIR})
diff --git a/src/plugins/runner/kml/CMakeLists.txt b/src/plugins/runner/kml/CMakeLists.txt
index ce01b39..1636e7b 100644
--- a/src/plugins/runner/kml/CMakeLists.txt
+++ b/src/plugins/runner/kml/CMakeLists.txt
@@ -10,7 +10,7 @@ set( kml_SRCS KmlDocument.cpp KmlParser.cpp KmlPlugin.cpp KmlRunner.cpp KmzHandl
 
 marble_add_plugin( KmlPlugin ${kml_SRCS} )
 
-if(WIN32 OR APPLE)
+if(WIN32 OR APPLE_STANDALONE_BUNDLE)
   # nothing to do
 else()
   install(FILES marble_kml.desktop DESTINATION ${APPS_INSTALL_DIR})
diff --git a/src/plugins/runner/osm/CMakeLists.txt b/src/plugins/runner/osm/CMakeLists.txt
index f5b27ec..243768a 100644
--- a/src/plugins/runner/osm/CMakeLists.txt
+++ b/src/plugins/runner/osm/CMakeLists.txt
@@ -32,7 +32,7 @@ set( osm_SRCS
 
 marble_add_plugin( OsmPlugin ${osm_SRCS} ${osm_writers_SRCS} ${osm_translators_SRCS} )
 
-if(WIN32 OR APPLE)
+if(WIN32 OR APPLE_STANDALONE_BUNDLE)
   # nothing to do
 else()
   install(FILES marble_osm.desktop DESTINATION ${APPS_INSTALL_DIR})
diff --git a/src/plugins/runner/shp/CMakeLists.txt b/src/plugins/runner/shp/CMakeLists.txt
index 5b8c6da..d4bea5b 100644
--- a/src/plugins/runner/shp/CMakeLists.txt
+++ b/src/plugins/runner/shp/CMakeLists.txt
@@ -12,7 +12,7 @@ set( ShpPlugin_LIBS ${LIBSHP_LIBRARIES} )
 
 marble_add_plugin( ShpPlugin ${shp_SRCS} )
 
-if(WIN32 OR APPLE)
+if(WIN32 OR APPLE_STANDALONE_BUNDLE)
   # nothing to do
 else()
   install(FILES marble_shp.desktop DESTINATION ${APPS_INSTALL_DIR})
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index d0db4d6..6044029 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -14,10 +14,10 @@ ENDIF (WIN32)
 # Since the tests are not actually installed, but rather
 # run directly from the build/src/tests dir we need to
 # ensure the marble libs can be found.
-IF (APPLE)
+IF (APPLE_STANDALONE_BUNDLE)
   # For Mac OS X, the executable must be at the root of the bundle's executable folder
   SET (CMAKE_INSTALL_NAME_DIR @executable_path/../lib)
-ENDIF (APPLE)
+ENDIF (APPLE_STANDALONE_BUNDLE)
 
 set( EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR} )
 
