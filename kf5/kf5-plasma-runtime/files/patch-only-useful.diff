diff --git CMakeLists.txt CMakeLists.txt
index 1e1acc1..c3a8fa2 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -25,152 +25,69 @@ include(ECMQtDeclareLoggingCategory)
 include(KDEPackageAppTemplates)
 
 find_package(KF5 ${KF5_MIN_VERSION} REQUIRED COMPONENTS
-                    Plasma DocTools Runner JsEmbed NotifyConfig Su NewStuff Wallet KCMUtils
-                    IdleTime Declarative TextWidgets KDELibs4Support Crash GlobalAccel
-                    DBusAddons Wayland)
-find_package(KF5NetworkManagerQt ${KF5_MIN_VERSION})
-set_package_properties(KF5NetworkManagerQt PROPERTIES DESCRIPTION "Qt wrapper for NetworkManager API"
-                       TYPE OPTIONAL
-                       PURPOSE "Needed by geolocation data engine."
-                      )
-
-# WARNING PlasmaQuick provides unversioned CMake config
-find_package(KF5 REQUIRED COMPONENTS PlasmaQuick)
-find_package(KF5 REQUIRED COMPONENTS SysGuard)
-find_package(KF5 REQUIRED COMPONENTS Package)
-
+                    I18n CoreAddons Service ConfigWidgets JobWidgets KIO Crash Completion WidgetsAddons Wallet XmlRpcClient WindowSystem IdleTime
+                    IconThemes NotifyConfig GlobalAccel Wayland Init
+                    XmlGui Plasma PlasmaQuick DBusAddons Notifications DocTools)
+if(NOT APPLE)
 find_package(KF5Baloo)
 set_package_properties(KF5Baloo PROPERTIES DESCRIPTION "File Searching"
                        TYPE RECOMMENDED
                        PURPOSE "Needed for the File Search runner."
                       )
-
-find_package(KF5TextEditor)
-find_package(KWinDBusInterface CONFIG REQUIRED)
-
-find_package(KScreenLocker REQUIRED)
-find_package(ScreenSaverDBusInterface CONFIG REQUIRED)
-find_package(KF5Holidays)
-set_package_properties(KF5Holidays PROPERTIES DESCRIPTION "Holidays provider for Plasma calendar"
-                       TYPE OPTIONAL
-                       PURPOSE "Needed to for holidays plugin for Plasma Calendar."
-                      )
-
-find_package(Phonon4Qt5 4.6.60 REQUIRED NO_MODULE)
-set_package_properties(Phonon4Qt5 PROPERTIES
-   DESCRIPTION "Qt-based audio library"
-   TYPE REQUIRED)
-find_package(KF5Activities ${KF5_MIN_VERSION})
-set_package_properties(KF5Activities PROPERTIES DESCRIPTION "management of Plasma activities"
-                       TYPE OPTIONAL
-                       PURPOSE "Needed by activity related plasmoids."
-                      )
-
-find_package(ZLIB)
-set_package_properties(ZLIB PROPERTIES DESCRIPTION "Support for gzip compressed files and data streams"
-                       URL "http://www.zlib.net"
-                       TYPE REQUIRED
-                      )
-
-find_package(X11)
-set_package_properties(X11 PROPERTIES DESCRIPTION "X11 libraries"
-                        URL "http://www.x.org"
-                        TYPE OPTIONAL
-                        PURPOSE "Required for building the X11 based workspace")
-
-if(X11_FOUND)
-  find_package(XCB MODULE REQUIRED COMPONENTS XCB RANDR)
-  set_package_properties(XCB PROPERTIES TYPE REQUIRED)
-  if(NOT X11_SM_FOUND)
-    message(FATAL_ERROR "\nThe X11 Session Management (SM) development package could not be found.\nPlease install libSM.\n")
-  endif(NOT X11_SM_FOUND)
-
-  find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS X11Extras)
 endif()
 
-if(X11_FOUND AND XCB_XCB_FOUND)
-  set(HAVE_X11 1)
+include(ECMMarkAsTest)
+if(APPLE)
+    set(X11_FOUND FALSE)
+else()
+    find_package(X11)
+    set_package_properties(X11 PROPERTIES DESCRIPTION "X11 libraries"
+                            URL "http://www.x.org"
+                            TYPE OPTIONAL
+                            PURPOSE "Required for building the X11 based workspace")
+
+    if(X11_FOUND)
+      find_package(XCB MODULE REQUIRED COMPONENTS XCB RANDR)
+      set_package_properties(XCB PROPERTIES TYPE REQUIRED)
+      if(NOT X11_SM_FOUND)
+        message(FATAL_ERROR "\nThe X11 Session Management (SM) development package could not be found.\nPlease install libSM.\n")
+      endif(NOT X11_SM_FOUND)
+
+      find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS X11Extras)
+    endif()
+
+    if(X11_FOUND AND XCB_XCB_FOUND)
+      set(HAVE_X11 1)
+    endif()
+
+#     find_package(AppStreamQt 0.10.4)
+#     set_package_properties(AppStreamQt PROPERTIES DESCRIPTION "Access metadata for listing available software"
+#                            URL "https://www.freedesktop.org/wiki/Distributions/AppStream/"
+#                            TYPE OPTIONAL
+#                           )
+# 
+    include(ConfigureChecks.cmake)
 endif()
 
-find_package(AppStreamQt 0.10.4)
-set_package_properties(AppStreamQt PROPERTIES DESCRIPTION "Access metadata for listing available software"
-                       URL "https://www.freedesktop.org/wiki/Distributions/AppStream/"
-		       TYPE OPTIONAL
-                      )
-
-
-include(ConfigureChecks.cmake)
-
 include_directories("${CMAKE_CURRENT_BINARY_DIR}")
 
 configure_file(config-workspace.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-workspace.h)
 configure_file(config-unix.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-unix.h )
 configure_file(config-X11.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config-X11.h)
-configure_file(plasma.desktop.cmake ${CMAKE_CURRENT_BINARY_DIR}/plasma.desktop)
-install(FILES
-        ${CMAKE_CURRENT_BINARY_DIR}/plasma.desktop
-        DESTINATION ${KDE_INSTALL_DATADIR}/xsessions
-)
-
-configure_file(plasmawayland.desktop.cmake ${CMAKE_CURRENT_BINARY_DIR}/plasmawayland.desktop)
-install(FILES
-        ${CMAKE_CURRENT_BINARY_DIR}/plasmawayland.desktop
-        DESTINATION ${KDE_INSTALL_DATADIR}/wayland-sessions
-)
-
-plasma_install_package(lookandfeel org.kde.breeze.desktop look-and-feel lookandfeel)
-
-if (INSTALL_SDDM_THEME)
-# Install the login theme into the SDDM directory
-# Longer term we need to look at making SDDM load from look and feel somehow.. and allow copying at runtime
-    #NOTE this trailing slash is important to rename the directory
-    install(DIRECTORY sddm-theme/ DESTINATION ${KDE_INSTALL_FULL_DATADIR}/sddm/themes/breeze PATTERN "README.txt" EXCLUDE PATTERN "components" EXCLUDE PATTERN "dummydata" EXCLUDE)
-    install(DIRECTORY lookandfeel/contents/components DESTINATION ${KDE_INSTALL_FULL_DATADIR}/sddm/themes/breeze PATTERN "README.txt" EXCLUDE)
-endif()
 
 add_definitions(-DQT_NO_URL_CAST_FROM_STRING)
 
 add_subdirectory(doc)
-add_subdirectory(libkworkspace)
 add_subdirectory(libdbusmenuqt)
 add_subdirectory(appmenu)
 
-add_subdirectory(libtaskmanager)
-add_subdirectory(components)
-
 add_subdirectory(plasma-windowed)
 add_subdirectory(shell)
-add_subdirectory(freespacenotifier)
-add_subdirectory(klipper)
-add_subdirectory(krunner)
-add_subdirectory(ksmserver)
-add_subdirectory(ksplash)
-add_subdirectory(systemmonitor)
-add_subdirectory(statusnotifierwatcher)
-add_subdirectory(startkde)
-add_subdirectory(themes)
-
-add_subdirectory(containmentactions)
-add_subdirectory(runners)
 add_subdirectory(applets)
 add_subdirectory(dataengines)
-add_subdirectory(wallpapers)
 
 add_subdirectory(kioslave)
-add_subdirectory(ktimezoned)
 add_subdirectory(kuiserver)
-add_subdirectory(menu)
 add_subdirectory(phonon)
-add_subdirectory(solidautoeject)
-
-ecm_optional_add_subdirectory(xembed-sni-proxy)
-
-add_subdirectory(soliduiserver)
-
-if(KF5Holidays_FOUND)
-    add_subdirectory(plasmacalendarintegration)
-endif()
-
-add_subdirectory(templates)
 
 feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES FATAL_ON_MISSING_REQUIRED_PACKAGES)
diff --git applets/CMakeLists.txt applets/CMakeLists.txt
index 956105e5..97a69a35 100644
--- applets/CMakeLists.txt
+++ applets/CMakeLists.txt
@@ -1,22 +1,15 @@
-plasma_install_package(activitybar org.kde.plasma.activitybar)
-add_subdirectory(icon)
-
-plasma_install_package(analog-clock org.kde.plasma.analogclock)
-plasma_install_package(mediacontroller org.kde.plasma.mediacontroller)
-plasma_install_package(panelspacer org.kde.plasma.panelspacer)
-plasma_install_package(lock_logout org.kde.plasma.lock_logout)
-
-add_subdirectory(appmenu)
-add_subdirectory(systemmonitor)
-add_subdirectory(batterymonitor)
-add_subdirectory(calendar)
-add_subdirectory(devicenotifier)
-add_subdirectory(digital-clock)
-plasma_install_package(clipboard org.kde.plasma.clipboard)
-
-if(NOT WIN32)
+## # plasma_install_package(activitybar org.kde.plasma.activitybar)
+## add_subdirectory(icon)
+## 
+## plasma_install_package(analog-clock org.kde.plasma.analogclock)
+## #snip
+## add_subdirectory(calendar)
+## #snip
+## plasma_install_package(clipboard org.kde.plasma.clipboard)
+## 
+## if(NOT WIN32 AND NOT APPLE)
 #    #notifications
 #    #should compile also on windows? (even if doesn't really make sense)
     add_subdirectory(notifications)
     add_subdirectory(systemtray)
-endif()
+## endif()
diff --git dataengines/CMakeLists.txt dataengines/CMakeLists.txt
index 9fcdb57a..e673dde9 100644
--- dataengines/CMakeLists.txt
+++ dataengines/CMakeLists.txt
@@ -1,41 +1,41 @@
-
+## 
 add_subdirectory(applicationjobs)
-if (KF5Activities_FOUND)
-    add_subdirectory(activities)
-endif ()
-add_subdirectory(apps)
-add_subdirectory(devicenotifications)
-add_subdirectory(dict)
-add_subdirectory(executable)
-add_subdirectory(favicons)
-add_subdirectory(filebrowser)
-if (KF5NetworkManagerQt_FOUND)
-  add_subdirectory(geolocation)
-endif ()
-add_subdirectory(hotplug)
-add_subdirectory(keystate)
-add_subdirectory(mpris2)
-#add_subdirectory(network)
+## if (KF5Activities_FOUND)
+##     add_subdirectory(activities)
+## endif ()
+## add_subdirectory(apps)
+## add_subdirectory(devicenotifications)
+## add_subdirectory(dict)
+## add_subdirectory(executable)
+## add_subdirectory(favicons)
+## add_subdirectory(filebrowser)
+## if (KF5NetworkManagerQt_FOUND)
+##   add_subdirectory(geolocation)
+## endif ()
+## add_subdirectory(hotplug)
+## add_subdirectory(keystate)
+## add_subdirectory(mpris2)
+## #add_subdirectory(network)
 add_subdirectory(notifications)
 add_subdirectory(packagekit)
-add_subdirectory(places)
-add_subdirectory(powermanagement)
-add_subdirectory(soliddevice)
-
-add_subdirectory(time)
-add_subdirectory(weather)
+## add_subdirectory(places)
+## add_subdirectory(powermanagement)
+## add_subdirectory(soliddevice)
+## 
+## add_subdirectory(time)
+## add_subdirectory(weather)
 add_subdirectory(statusnotifieritem)
-add_subdirectory(share)
-
-if(Boost_FOUND AND KdepimLibs_FOUND)
-   if(Akonadi_FOUND)
-	   #      add_subdirectory(akonadi)
-   endif()
-   #   add_subdirectory(calendar)
-   #   add_subdirectory(rss)
-endif()
-
-if(NOT WIN32)
-  add_subdirectory(mouse)
-  add_subdirectory(systemmonitor)
-endif()
+## add_subdirectory(share)
+## 
+## if(Boost_FOUND AND KdepimLibs_FOUND)
+##    if(Akonadi_FOUND)
+## 	   #      add_subdirectory(akonadi)
+##    endif()
+##    #   add_subdirectory(calendar)
+##    #   add_subdirectory(rss)
+## endif()
+## 
+## if(NOT WIN32)
+##   add_subdirectory(mouse)
+##   add_subdirectory(systemmonitor)
+## endif()
diff --git kuiserver/CMakeLists.txt kuiserver/CMakeLists.txt
index 7e79076e..33c4ebc6 100644
--- kuiserver/CMakeLists.txt
+++ kuiserver/CMakeLists.txt
@@ -51,13 +51,7 @@ install(FILES ${CMAKE_CURRENT_BINARY_DIR}/org.kde.kuiserver.service
 kconfig_add_kcfg_files(kuiserver_KDEINIT_SRCS kuiserversettings.kcfgc)
 
 kf5_add_kdeinit_executable( kuiserver5 ${kuiserver_KDEINIT_SRCS})
-
-if (Q_WS_MAC)
-    set_target_properties(kuiserver5 PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_SOURCE_DIR}/Info.plist.template)
-    set_target_properties(kuiserver5 PROPERTIES MACOSX_BUNDLE_GUI_IDENTIFIER "org.kde.kuiserver")
-    set_target_properties(kuiserver5 PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "KDE UI Server")
-endif ()
-
+ecm_mark_nongui_executable(kuiserver5)
 
 target_link_libraries(kdeinit_kuiserver5
     Qt5::DBus
@@ -70,9 +64,15 @@ target_link_libraries(kdeinit_kuiserver5
     KF5::XmlGui
     KF5::I18n
 )
+if(APPLE)
+    target_link_libraries( kdeinit_kuiserver5 "-framework CoreFoundation" )
+endif()
 install(TARGETS kdeinit_kuiserver5 ${KDE_INSTALL_TARGETS_DEFAULT_ARGS})
 
 target_link_libraries( kuiserver5 kdeinit_kuiserver5 )
+if(APPLE)
+    target_link_libraries( kuiserver5 "-framework CoreFoundation" )
+endif()
 install(TARGETS kuiserver5 ${KDE_INSTALL_TARGETS_DEFAULT_ARGS} )
 
 install( FILES kuiserver.desktop  DESTINATION  ${KDE_INSTALL_KSERVICES5DIR} )
diff --git kuiserver/main.cpp kuiserver/main.cpp
index 2d8a5b6f..42bc32a8 100644
--- kuiserver/main.cpp
+++ kuiserver/main.cpp
@@ -29,10 +29,28 @@
 
 #include <QCommandLineParser>
 
+#ifdef Q_OS_MACOS
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 Q_LOGGING_CATEGORY(KUISERVER, "kuiserver", QtInfoMsg)
 
 extern "C" Q_DECL_EXPORT int kdemain(int argc, char **argv)
 {
+#ifdef Q_OS_MACOS
+    CFBundleRef mainBundle = CFBundleGetMainBundle();
+    if (mainBundle) {
+        // get the application's Info Dictionary. For app bundles this would live in the bundle's Info.plist,
+        // for regular executables it is obtained in another way.
+        CFMutableDictionaryRef infoDict = (CFMutableDictionaryRef) CFBundleGetInfoDictionary(mainBundle);
+        if (infoDict) {
+            // Add or set the "LSUIElement" key with/to value "1". This can simply be a CFString.
+            CFDictionarySetValue(infoDict, CFSTR("LSUIElement"), CFSTR("1"));
+            // That's it. We're now considered as an "agent" by the window server, and thus will have
+            // neither menubar nor presence in the Dock or App Switcher.
+        }
+    }
+#endif
     QApplication app(argc, argv);
     app.setApplicationName(QStringLiteral("kuiserver"));
     app.setApplicationVersion(QStringLiteral("2.0"));
diff --git shell/CMakeLists.txt shell/CMakeLists.txt
index 04ad01ae..cc1ff494 100644
--- shell/CMakeLists.txt
+++ shell/CMakeLists.txt
@@ -70,6 +70,7 @@ qt5_add_dbus_interface(plasma_shell_SRCS ${krunner_xml} krunner_interface)
 add_executable(plasmashell
     ${plasma_shell_SRCS}
 )
+ecm_mark_nongui_executable(plasmashell)
 
 target_link_libraries(plasmashell
  Qt5::Quick
