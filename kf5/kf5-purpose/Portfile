# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# Copyright (c) 2015, 2016 R.J.V. Bertin

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           active_variants 1.1

set kf5.project     purpose
set kf5.virtualPath applications
set kf5.category    development

if {[variant_isset apidocs]} {
    # set the default docs variant before including the KF5 PortGroup!
    default_variants +docs
}
PortGroup           kf5 1.1

description         Provides an abstraction to provide and leverage actions of a specific kind.
long_description    Purpose offers the possibility to create integrate services and actions on \
                    any application without having to implement them specifically. Purpose will \
                    offer them mechanisms to list the different alternatives to execute given the \
                    requested action type and will facilitate components so that all the plugins \
                    can receive all the information they need.
homepage            https://projects.kde.org/projects/playground/libs/purpose

platforms           darwin
license             GPL-2+

subport ${name}-devel {
    description     ${description} This port follows git/master.
    long_description \
                    ${long_description} This port follows git/master.
}

if {${subport} eq "${name}-devel"} {
    conflicts       ${name}
    fetch.type      git
    git.url         git://anongit.kde.org/purpose
    # v1.1.90-5-g2060ee6
    git.branch      2060ee6252a64337c404a4fb44baf374c0bc7f7a
    version         1.1.90.5
    epoch           160719
} else {
    version         0
    conflicts       ${name}-devel
    description     ${description} This port doesn't have a release version yet.
    long_description \
                    ${long_description} This port doesn't have a release version yet.
    version         ${kf5.version}
    use_xz          yes
    pre-fetch {
        ui_error "This port doesn't have a release version yet, use ${name}-devel instead."
        return -code error "This port doesn't have a release version yet."
    }
}

worksrcdir          ${name}-5
distname            ${name}-5

patch.pre_args      -Np1

patchfiles-append   patch-plugins-CMakeLists.diff \
                    patch-qmlplugindump-location.diff \
                    patch-cast-to-double.diff

post-patch {
    reinplace "s|@QTBINDIR@|${qt_bins_dir}|g" ${worksrcpath}/src/plugins/cmake/FindQMLModule.cmake.in
}

compiler.blacklist-append {clang < 500}
compiler.blacklist-append macports-clang-3.1 macports-clang-3.0 macports-clang-3.2 macports-clang-3.3 macports-clang-3.4
compiler.blacklist-append macports-llvm-gcc-4.2 llvm-gcc-4.2
compiler.blacklist-append gcc-4.2 apple-gcc-4.2 gcc-4.0

#Binaries do not link to openssl
license_noconflict  openssl

variant apidocs description {Generate the API documentation} {
    default_variants +docs
    kf5.allow_apidocs_generation yes
}
if {![variant_isset apidocs]} {
    kf5.allow_apidocs_generation no
}

kf5.depends_qt5_components \
                    qtdeclarative
kf5.depends_frameworks \
                    kcoreaddons kdeclarative ki18n kio

# if {[kf5.check_qspXDG kcoreaddons]} {
#     kf5.use_QExtStandardPaths
# }
# 
#Using c++0x for Lion and higher in case of clang 64-bit
if {${configure.compiler} eq "clang" && ${os.platform} eq "darwin" && ${os.major} >= 11} {
    lappend merger_configure_args(x86_64)   -DHAVE_UNORDERED_MAP=1
    if {${build_arch} eq "x86_64" && ![variant_isset universal]} {
        configure.args-append               -DHAVE_UNORDERED_MAP=1
    }
}
