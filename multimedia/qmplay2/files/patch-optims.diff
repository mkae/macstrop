diff --git a/src/modules/Inputs/PCM.cpp b/src/modules/Inputs/PCM.cpp
index 20e2e2b82b64a3a9db1661b1e00091600246498f..67e86ddd8a1619070b20b46737542342b5ae7b15 100644
--- a/src/modules/Inputs/PCM.cpp
+++ b/src/modules/Inputs/PCM.cpp
@@ -91,7 +91,7 @@ bool PCM::read(Packet &decoded, int &idx)
 	const int samples_with_channels = dataBA.size() / bytes[fmt];
 	decoded.resize(samples_with_channels * sizeof(float));
 	float *decoded_data = (float *)decoded.data();
-	ByteArray data(dataBA.data(), dataBA.size(), bigEndian);
+	ByteArray data(dataBA.constData(), dataBA.size(), bigEndian);
 	switch (fmt)
 	{
 		case PCM_U8:
diff --git a/src/modules/PulseAudio/Pulse.cpp b/src/modules/PulseAudio/Pulse.cpp
index 33f4187114ee60478a35a68e8b8f9713c0ad1e58..5bdad99a236c97053a1c6ad33dcfb4af941a5409 100644
--- a/src/modules/PulseAudio/Pulse.cpp
+++ b/src/modules/PulseAudio/Pulse.cpp
@@ -130,7 +130,7 @@ bool Pulse::write(const QByteArray &arr, bool &showError)
 {
 	int error = 0;
 	writing = true;
-	const bool ret = pa_simple_write(pulse, arr.data(), arr.size(), &error) >= 0;
+	const bool ret = pa_simple_write(pulse, arr.constData(), arr.size(), &error) >= 0;
 	writing = false;
 	if (error == PA_ERR_KILLED)
 		showError = false;
diff --git a/src/modules/Subtitles/Classic.cpp b/src/modules/Subtitles/Classic.cpp
index bf94bb3af91ce14e99b5467b3d3941bc3cf924b6..a18018922d2096d592f2803e247b88d4522cda0c 100644
--- a/src/modules/Subtitles/Classic.cpp
+++ b/src/modules/Subtitles/Classic.cpp
@@ -116,7 +116,7 @@ bool Classic::toASS(const QByteArray &txt, LibASS *ass, double fps)
 		if ((idx = line.indexOf(TMPRegExp)) > -1)
 		{
 			int h = -1, m = -1, s = -1;
-			sscanf(line.toLatin1().data() + idx, "%d:%d:%d", &h, &m, &s);
+			sscanf(line.toLatin1().constData() + idx, "%d:%d:%d", &h, &m, &s);
 			if (h > -1 && m > -1 && s > -1)
 			{
 				start = h*3600 + m*60 + s;
@@ -126,7 +126,7 @@ bool Classic::toASS(const QByteArray &txt, LibASS *ass, double fps)
 		else if ((idx = line.indexOf(MPL2RegExp)) > -1)
 		{
 			int s = -1, e = -1;
-			sscanf(line.toLatin1().data() + idx, "[%d][%d]", &s, &e);
+			sscanf(line.toLatin1().constData() + idx, "[%d][%d]", &s, &e);
 			if (s > -1)
 			{
 				for (const QString &l : convertLine(MPL2RegExp, line).split('\n'))
@@ -158,7 +158,7 @@ bool Classic::toASS(const QByteArray &txt, LibASS *ass, double fps)
 		else if ((idx = line.indexOf(MicroDVDRegExp)) > -1)
 		{
 			int s = -1, e = -1;
-			sscanf(line.toLatin1().data() + idx, "{%d}{%d}", &s, &e);
+			sscanf(line.toLatin1().constData() + idx, "{%d}{%d}", &s, &e);
 			if (s > -1)
 			{
 				sub = convertLine(MicroDVDRegExp, line);
diff --git a/src/modules/Subtitles/SRT.cpp b/src/modules/Subtitles/SRT.cpp
index 499e758f2179bedc4030629bbf543e7184ae46b9..1eb786890c6dbc48df7e50faa408c50e9170fca5 100644
--- a/src/modules/Subtitles/SRT.cpp
+++ b/src/modules/Subtitles/SRT.cpp
@@ -45,7 +45,7 @@ bool SRT::toASS(const QByteArray &srt, LibASS *ass, double)
 				for (int i = 0; i < 2; ++i)
 				{
 					int h = -1, m = -1, s = -1, ms = -1;
-					sscanf(time[i].toLatin1().data(), scanfFmt, &h, &m, &s, &ms);
+					sscanf(time[i].toLatin1().constData(), scanfFmt, &h, &m, &s, &ms);
 					if (h > -1 && m > -1 && s > -1 && ms > -1)
 						time_double[i] = h*3600 + m*60 + s + ms/1000.0;
 					else
diff --git a/src/modules/Visualizations/FFTSpectrum.cpp b/src/modules/Visualizations/FFTSpectrum.cpp
index 8f63c615fc0a0dc81a3ad4087a6c7dfeec3ba062..33ee917cca51bed912e021524cfbf07934f9d695 100644
--- a/src/modules/Visualizations/FFTSpectrum.cpp
+++ b/src/modules/Visualizations/FFTSpectrum.cpp
@@ -215,7 +215,7 @@ void FFTSpectrum::sendSoundData(const QByteArray &data)
 		const int size = qMin((data.size() - newDataPos) / (int)sizeof(float), (tmpDataSize - tmpDataPos) * w.chn);
 		if (!size)
 			break;
-		fltmix(tmpData + tmpDataPos, (const float *)(data.data() + newDataPos), size, w.chn);
+		fltmix(tmpData + tmpDataPos, (const float *)(data.constData() + newDataPos), size, w.chn);
 		newDataPos += size * sizeof(float);
 		tmpDataPos += size / w.chn;
 		if (tmpDataPos == tmpDataSize)
diff --git a/src/modules/Visualizations/SimpleVis.cpp b/src/modules/Visualizations/SimpleVis.cpp
index 58cbad08c07ffee3342ce7e34a0d946a19dac9f3..30830db41350a3606af687950f7f79c220e942dd 100644
--- a/src/modules/Visualizations/SimpleVis.cpp
+++ b/src/modules/Visualizations/SimpleVis.cpp
@@ -238,7 +238,7 @@ void SimpleVis::sendSoundData(const QByteArray &data)
 	while (newDataPos < data.size())
 	{
 		const int size = qMin(data.size() - newDataPos, tmpData.size() - tmpDataPos);
-		fltcpy((float *)(tmpData.data() + tmpDataPos), (const float *)(data.data() + newDataPos), size);
+		fltcpy((float *)(tmpData.data() + tmpDataPos), (const float *)(data.constData() + newDataPos), size);
 		newDataPos += size;
 		tmpDataPos += size;
 		if (tmpDataPos == tmpData.size())
diff --git a/src/qmplay2/SndResampler.cpp b/src/qmplay2/SndResampler.cpp
index 435e18dcb98e618c0ffa22b6631a2679468abbe2..26a13a100665422186f06fc1fe5e885fa13bc74c 100644
--- a/src/qmplay2/SndResampler.cpp
+++ b/src/qmplay2/SndResampler.cpp
@@ -100,7 +100,7 @@ void SndResampler::convert(const QByteArray &src, QByteArray &dst)
 
 	dst.reserve(out_size * sizeof(float) * dst_channels);
 
-	quint8 *in[]  = {(quint8 *)src.data()};
+	quint8 *in[]  = {(quint8 *)src.constData()};
 	quint8 *out[] = {(quint8 *)dst.data()};
 
 #ifdef QMPLAY2_AVRESAMPLE
